Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> re
Rule 1     re -> alternation
Rule 2     re -> simple
Rule 3     alternation -> re | simple
Rule 4     simple -> concatenation
Rule 5     simple -> basic
Rule 6     concatenation -> simple basic
Rule 7     basic -> elementary
Rule 8     basic -> quantifier
Rule 9     quantifier -> basequantifier
Rule 10    quantifier -> basequantifier ?
Rule 11    basequantifier -> asterisk
Rule 12    basequantifier -> plus
Rule 13    basequantifier -> optional
Rule 14    basequantifier -> nrepeat
Rule 15    elementary -> group
Rule 16    elementary -> directional
Rule 17    elementary -> command
Rule 18    elementary -> literal
Rule 19    elementary -> charclass
Rule 20    elementary -> anychar
Rule 21    elementary -> nodisplay
Rule 22    elementary -> anchor
Rule 23    elementary -> predefined
Rule 24    asterisk -> elementary *
Rule 25    plus -> elementary +
Rule 26    optional -> elementary ?
Rule 27    nrepeat -> elementary { number }
Rule 28    nrepeat -> elementary { , number }
Rule 29    nrepeat -> elementary { number , }
Rule 30    nrepeat -> elementary { number , number }
Rule 31    anychar -> .
Rule 32    nodisplay -> !
Rule 33    number -> DIGIT
Rule 34    number -> DIGIT number
Rule 35    group -> ( groupbody )
Rule 36    groupbody -> ? specialgroup
Rule 37    groupbody -> basicgroup
Rule 38    specialgroup -> _ lengthcheck
Rule 39    specialgroup -> | stationarygroup
Rule 40    specialgroup -> : nocapture
Rule 41    lengthcheck -> ( number ) re
Rule 42    stationarygroup -> re
Rule 43    nocapture -> re
Rule 44    basicgroup -> re
Rule 45    charclass -> [ classitems ]
Rule 46    classitems -> ^ baseitems
Rule 47    classitems -> classitems2
Rule 48    classitems2 -> baseitems
Rule 49    classitems2 -> baseitems | baseitems
Rule 50    baseitems -> classatom
Rule 51    baseitems -> classatom baseitems
Rule 52    classatom -> classliteral
Rule 53    classatom -> classrange
Rule 54    classliteral -> !
Rule 55    classliteral -> "
Rule 56    classliteral -> #
Rule 57    classliteral -> $
Rule 58    classliteral -> %
Rule 59    classliteral -> &
Rule 60    classliteral -> '
Rule 61    classliteral -> (
Rule 62    classliteral -> )
Rule 63    classliteral -> *
Rule 64    classliteral -> +
Rule 65    classliteral -> ,
Rule 66    classliteral -> .
Rule 67    classliteral -> /
Rule 68    classliteral -> :
Rule 69    classliteral -> ;
Rule 70    classliteral -> <
Rule 71    classliteral -> =
Rule 72    classliteral -> >
Rule 73    classliteral -> ?
Rule 74    classliteral -> @
Rule 75    classliteral -> [
Rule 76    classliteral -> \
Rule 77    classliteral -> _
Rule 78    classliteral -> `
Rule 79    classliteral -> {
Rule 80    classliteral -> }
Rule 81    classliteral -> ~
Rule 82    classliteral -> literal
Rule 83    classrange -> classliteral - classliteral
Rule 84    predefined -> ` ALPHA
Rule 85    directional -> ^ DIGIT
Rule 86    directional -> ^ ALPHA
Rule 87    anchor -> $ DIGIT
Rule 88    anchor -> $ ALPHA
Rule 89    command -> >
Rule 90    command -> <
Rule 91    command -> /
Rule 92    command -> \
Rule 93    command -> #
Rule 94    command -> %
Rule 95    literal -> ESCAPED
Rule 96    literal -> ALPHA
Rule 97    literal -> DIGIT
Rule 98    literal -> OTHER

Terminals, with rules where they appear

!                    : 32 54
"                    : 55
#                    : 56 93
$                    : 57 87 88
%                    : 58 94
&                    : 59
'                    : 60
(                    : 35 41 61
)                    : 35 41 62
*                    : 24 63
+                    : 25 64
,                    : 28 29 30 65
-                    : 83
.                    : 31 66
/                    : 67 91
:                    : 40 68
;                    : 69
<                    : 70 90
=                    : 71
>                    : 72 89
?                    : 10 26 36 73
@                    : 74
ALPHA                : 84 86 88 96
DIGIT                : 33 34 85 87 97
ESCAPED              : 95
OTHER                : 98
[                    : 45 75
\                    : 76 92
]                    : 45
^                    : 46 85 86
_                    : 38 77
`                    : 78 84
error                : 
{                    : 27 28 29 30 79
|                    : 3 39 49
}                    : 27 28 29 30 80
~                    : 81

Nonterminals, with rules where they appear

alternation          : 1
anchor               : 22
anychar              : 20
asterisk             : 11
baseitems            : 46 48 49 49 51
basequantifier       : 9 10
basic                : 5 6
basicgroup           : 37
charclass            : 19
classatom            : 50 51
classitems           : 45
classitems2          : 47
classliteral         : 52 83 83
classrange           : 53
command              : 17
concatenation        : 4
directional          : 16
elementary           : 7 24 25 26 27 28 29 30
group                : 15
groupbody            : 35
lengthcheck          : 38
literal              : 18 82
nocapture            : 40
nodisplay            : 21
nrepeat              : 14
number               : 27 28 29 30 30 34 41
optional             : 13
plus                 : 12
predefined           : 23
quantifier           : 8
re                   : 3 41 42 43 44 0
simple               : 2 3 6
specialgroup         : 36
stationarygroup      : 39

Parsing method: LALR

state 0

    (0) S' -> . re
    (1) re -> . alternation
    (2) re -> . simple
    (3) alternation -> . re | simple
    (4) simple -> . concatenation
    (5) simple -> . basic
    (6) concatenation -> . simple basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . anchor
    (23) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (35) group -> . ( groupbody )
    (85) directional -> . ^ DIGIT
    (86) directional -> . ^ ALPHA
    (89) command -> . >
    (90) command -> . <
    (91) command -> . /
    (92) command -> . \
    (93) command -> . #
    (94) command -> . %
    (95) literal -> . ESCAPED
    (96) literal -> . ALPHA
    (97) literal -> . DIGIT
    (98) literal -> . OTHER
    (45) charclass -> . [ classitems ]
    (31) anychar -> . .
    (32) nodisplay -> . !
    (87) anchor -> . $ DIGIT
    (88) anchor -> . $ ALPHA
    (84) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (24) asterisk -> . elementary *
    (25) plus -> . elementary +
    (26) optional -> . elementary ?
    (27) nrepeat -> . elementary { number }
    (28) nrepeat -> . elementary { , number }
    (29) nrepeat -> . elementary { number , }
    (30) nrepeat -> . elementary { number , number }

    (               shift and go to state 8
    ^               shift and go to state 29
    >               shift and go to state 9
    <               shift and go to state 36
    /               shift and go to state 26
    \               shift and go to state 18
    #               shift and go to state 1
    %               shift and go to state 20
    ESCAPED         shift and go to state 23
    ALPHA           shift and go to state 15
    DIGIT           shift and go to state 34
    OTHER           shift and go to state 14
    [               shift and go to state 35
    .               shift and go to state 6
    !               shift and go to state 17
    $               shift and go to state 22
    `               shift and go to state 27

    alternation                    shift and go to state 2
    concatenation                  shift and go to state 7
    command                        shift and go to state 3
    simple                         shift and go to state 4
    anchor                         shift and go to state 21
    nodisplay                      shift and go to state 24
    basequantifier                 shift and go to state 25
    anychar                        shift and go to state 28
    quantifier                     shift and go to state 19
    group                          shift and go to state 30
    elementary                     shift and go to state 10
    basic                          shift and go to state 11
    literal                        shift and go to state 12
    directional                    shift and go to state 31
    plus                           shift and go to state 5
    predefined                     shift and go to state 33
    re                             shift and go to state 32
    asterisk                       shift and go to state 16
    charclass                      shift and go to state 37
    nrepeat                        shift and go to state 13
    optional                       shift and go to state 38

state 1

    (93) command -> # .

    *               reduce using rule 93 (command -> # .)
    +               reduce using rule 93 (command -> # .)
    ?               reduce using rule 93 (command -> # .)
    {               reduce using rule 93 (command -> # .)
    (               reduce using rule 93 (command -> # .)
    ^               reduce using rule 93 (command -> # .)
    >               reduce using rule 93 (command -> # .)
    <               reduce using rule 93 (command -> # .)
    /               reduce using rule 93 (command -> # .)
    \               reduce using rule 93 (command -> # .)
    #               reduce using rule 93 (command -> # .)
    %               reduce using rule 93 (command -> # .)
    ESCAPED         reduce using rule 93 (command -> # .)
    ALPHA           reduce using rule 93 (command -> # .)
    DIGIT           reduce using rule 93 (command -> # .)
    OTHER           reduce using rule 93 (command -> # .)
    [               reduce using rule 93 (command -> # .)
    .               reduce using rule 93 (command -> # .)
    !               reduce using rule 93 (command -> # .)
    $               reduce using rule 93 (command -> # .)
    `               reduce using rule 93 (command -> # .)
    |               reduce using rule 93 (command -> # .)
    )               reduce using rule 93 (command -> # .)
    $end            reduce using rule 93 (command -> # .)


state 2

    (1) re -> alternation .

    |               reduce using rule 1 (re -> alternation .)
    )               reduce using rule 1 (re -> alternation .)
    $end            reduce using rule 1 (re -> alternation .)


state 3

    (17) elementary -> command .

    *               reduce using rule 17 (elementary -> command .)
    +               reduce using rule 17 (elementary -> command .)
    ?               reduce using rule 17 (elementary -> command .)
    {               reduce using rule 17 (elementary -> command .)
    (               reduce using rule 17 (elementary -> command .)
    ^               reduce using rule 17 (elementary -> command .)
    >               reduce using rule 17 (elementary -> command .)
    <               reduce using rule 17 (elementary -> command .)
    /               reduce using rule 17 (elementary -> command .)
    \               reduce using rule 17 (elementary -> command .)
    #               reduce using rule 17 (elementary -> command .)
    %               reduce using rule 17 (elementary -> command .)
    ESCAPED         reduce using rule 17 (elementary -> command .)
    ALPHA           reduce using rule 17 (elementary -> command .)
    DIGIT           reduce using rule 17 (elementary -> command .)
    OTHER           reduce using rule 17 (elementary -> command .)
    [               reduce using rule 17 (elementary -> command .)
    .               reduce using rule 17 (elementary -> command .)
    !               reduce using rule 17 (elementary -> command .)
    $               reduce using rule 17 (elementary -> command .)
    `               reduce using rule 17 (elementary -> command .)
    |               reduce using rule 17 (elementary -> command .)
    $end            reduce using rule 17 (elementary -> command .)
    )               reduce using rule 17 (elementary -> command .)


state 4

    (2) re -> simple .
    (6) concatenation -> simple . basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . anchor
    (23) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (35) group -> . ( groupbody )
    (85) directional -> . ^ DIGIT
    (86) directional -> . ^ ALPHA
    (89) command -> . >
    (90) command -> . <
    (91) command -> . /
    (92) command -> . \
    (93) command -> . #
    (94) command -> . %
    (95) literal -> . ESCAPED
    (96) literal -> . ALPHA
    (97) literal -> . DIGIT
    (98) literal -> . OTHER
    (45) charclass -> . [ classitems ]
    (31) anychar -> . .
    (32) nodisplay -> . !
    (87) anchor -> . $ DIGIT
    (88) anchor -> . $ ALPHA
    (84) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (24) asterisk -> . elementary *
    (25) plus -> . elementary +
    (26) optional -> . elementary ?
    (27) nrepeat -> . elementary { number }
    (28) nrepeat -> . elementary { , number }
    (29) nrepeat -> . elementary { number , }
    (30) nrepeat -> . elementary { number , number }

    |               reduce using rule 2 (re -> simple .)
    )               reduce using rule 2 (re -> simple .)
    $end            reduce using rule 2 (re -> simple .)
    (               shift and go to state 8
    ^               shift and go to state 29
    >               shift and go to state 9
    <               shift and go to state 36
    /               shift and go to state 26
    \               shift and go to state 18
    #               shift and go to state 1
    %               shift and go to state 20
    ESCAPED         shift and go to state 23
    ALPHA           shift and go to state 15
    DIGIT           shift and go to state 34
    OTHER           shift and go to state 14
    [               shift and go to state 35
    .               shift and go to state 6
    !               shift and go to state 17
    $               shift and go to state 22
    `               shift and go to state 27

    quantifier                     shift and go to state 19
    optional                       shift and go to state 38
    group                          shift and go to state 30
    elementary                     shift and go to state 10
    basic                          shift and go to state 39
    literal                        shift and go to state 12
    directional                    shift and go to state 31
    plus                           shift and go to state 5
    command                        shift and go to state 3
    anchor                         shift and go to state 21
    predefined                     shift and go to state 33
    nodisplay                      shift and go to state 24
    asterisk                       shift and go to state 16
    basequantifier                 shift and go to state 25
    charclass                      shift and go to state 37
    nrepeat                        shift and go to state 13
    anychar                        shift and go to state 28

state 5

    (12) basequantifier -> plus .

    ?               reduce using rule 12 (basequantifier -> plus .)
    (               reduce using rule 12 (basequantifier -> plus .)
    ^               reduce using rule 12 (basequantifier -> plus .)
    >               reduce using rule 12 (basequantifier -> plus .)
    <               reduce using rule 12 (basequantifier -> plus .)
    /               reduce using rule 12 (basequantifier -> plus .)
    \               reduce using rule 12 (basequantifier -> plus .)
    #               reduce using rule 12 (basequantifier -> plus .)
    %               reduce using rule 12 (basequantifier -> plus .)
    ESCAPED         reduce using rule 12 (basequantifier -> plus .)
    ALPHA           reduce using rule 12 (basequantifier -> plus .)
    DIGIT           reduce using rule 12 (basequantifier -> plus .)
    OTHER           reduce using rule 12 (basequantifier -> plus .)
    [               reduce using rule 12 (basequantifier -> plus .)
    .               reduce using rule 12 (basequantifier -> plus .)
    !               reduce using rule 12 (basequantifier -> plus .)
    $               reduce using rule 12 (basequantifier -> plus .)
    `               reduce using rule 12 (basequantifier -> plus .)
    |               reduce using rule 12 (basequantifier -> plus .)
    $end            reduce using rule 12 (basequantifier -> plus .)
    )               reduce using rule 12 (basequantifier -> plus .)


state 6

    (31) anychar -> . .

    *               reduce using rule 31 (anychar -> . .)
    +               reduce using rule 31 (anychar -> . .)
    ?               reduce using rule 31 (anychar -> . .)
    {               reduce using rule 31 (anychar -> . .)
    (               reduce using rule 31 (anychar -> . .)
    ^               reduce using rule 31 (anychar -> . .)
    >               reduce using rule 31 (anychar -> . .)
    <               reduce using rule 31 (anychar -> . .)
    /               reduce using rule 31 (anychar -> . .)
    \               reduce using rule 31 (anychar -> . .)
    #               reduce using rule 31 (anychar -> . .)
    %               reduce using rule 31 (anychar -> . .)
    ESCAPED         reduce using rule 31 (anychar -> . .)
    ALPHA           reduce using rule 31 (anychar -> . .)
    DIGIT           reduce using rule 31 (anychar -> . .)
    OTHER           reduce using rule 31 (anychar -> . .)
    [               reduce using rule 31 (anychar -> . .)
    .               reduce using rule 31 (anychar -> . .)
    !               reduce using rule 31 (anychar -> . .)
    $               reduce using rule 31 (anychar -> . .)
    `               reduce using rule 31 (anychar -> . .)
    |               reduce using rule 31 (anychar -> . .)
    )               reduce using rule 31 (anychar -> . .)
    $end            reduce using rule 31 (anychar -> . .)


state 7

    (4) simple -> concatenation .

    (               reduce using rule 4 (simple -> concatenation .)
    ^               reduce using rule 4 (simple -> concatenation .)
    >               reduce using rule 4 (simple -> concatenation .)
    <               reduce using rule 4 (simple -> concatenation .)
    /               reduce using rule 4 (simple -> concatenation .)
    \               reduce using rule 4 (simple -> concatenation .)
    #               reduce using rule 4 (simple -> concatenation .)
    %               reduce using rule 4 (simple -> concatenation .)
    ESCAPED         reduce using rule 4 (simple -> concatenation .)
    ALPHA           reduce using rule 4 (simple -> concatenation .)
    DIGIT           reduce using rule 4 (simple -> concatenation .)
    OTHER           reduce using rule 4 (simple -> concatenation .)
    [               reduce using rule 4 (simple -> concatenation .)
    .               reduce using rule 4 (simple -> concatenation .)
    !               reduce using rule 4 (simple -> concatenation .)
    $               reduce using rule 4 (simple -> concatenation .)
    `               reduce using rule 4 (simple -> concatenation .)
    |               reduce using rule 4 (simple -> concatenation .)
    $end            reduce using rule 4 (simple -> concatenation .)
    )               reduce using rule 4 (simple -> concatenation .)


state 8

    (35) group -> ( . groupbody )
    (36) groupbody -> . ? specialgroup
    (37) groupbody -> . basicgroup
    (44) basicgroup -> . re
    (1) re -> . alternation
    (2) re -> . simple
    (3) alternation -> . re | simple
    (4) simple -> . concatenation
    (5) simple -> . basic
    (6) concatenation -> . simple basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . anchor
    (23) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (35) group -> . ( groupbody )
    (85) directional -> . ^ DIGIT
    (86) directional -> . ^ ALPHA
    (89) command -> . >
    (90) command -> . <
    (91) command -> . /
    (92) command -> . \
    (93) command -> . #
    (94) command -> . %
    (95) literal -> . ESCAPED
    (96) literal -> . ALPHA
    (97) literal -> . DIGIT
    (98) literal -> . OTHER
    (45) charclass -> . [ classitems ]
    (31) anychar -> . .
    (32) nodisplay -> . !
    (87) anchor -> . $ DIGIT
    (88) anchor -> . $ ALPHA
    (84) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (24) asterisk -> . elementary *
    (25) plus -> . elementary +
    (26) optional -> . elementary ?
    (27) nrepeat -> . elementary { number }
    (28) nrepeat -> . elementary { , number }
    (29) nrepeat -> . elementary { number , }
    (30) nrepeat -> . elementary { number , number }

    ?               shift and go to state 40
    (               shift and go to state 8
    ^               shift and go to state 29
    >               shift and go to state 9
    <               shift and go to state 36
    /               shift and go to state 26
    \               shift and go to state 18
    #               shift and go to state 1
    %               shift and go to state 20
    ESCAPED         shift and go to state 23
    ALPHA           shift and go to state 15
    DIGIT           shift and go to state 34
    OTHER           shift and go to state 14
    [               shift and go to state 35
    .               shift and go to state 6
    !               shift and go to state 17
    $               shift and go to state 22
    `               shift and go to state 27

    alternation                    shift and go to state 2
    concatenation                  shift and go to state 7
    plus                           shift and go to state 5
    command                        shift and go to state 3
    simple                         shift and go to state 4
    anchor                         shift and go to state 21
    nodisplay                      shift and go to state 24
    basequantifier                 shift and go to state 25
    anychar                        shift and go to state 28
    directional                    shift and go to state 31
    quantifier                     shift and go to state 19
    group                          shift and go to state 30
    elementary                     shift and go to state 10
    basic                          shift and go to state 11
    literal                        shift and go to state 12
    basicgroup                     shift and go to state 42
    re                             shift and go to state 41
    predefined                     shift and go to state 33
    groupbody                      shift and go to state 43
    asterisk                       shift and go to state 16
    charclass                      shift and go to state 37
    nrepeat                        shift and go to state 13
    optional                       shift and go to state 38

state 9

    (89) command -> > .

    *               reduce using rule 89 (command -> > .)
    +               reduce using rule 89 (command -> > .)
    ?               reduce using rule 89 (command -> > .)
    {               reduce using rule 89 (command -> > .)
    (               reduce using rule 89 (command -> > .)
    ^               reduce using rule 89 (command -> > .)
    >               reduce using rule 89 (command -> > .)
    <               reduce using rule 89 (command -> > .)
    /               reduce using rule 89 (command -> > .)
    \               reduce using rule 89 (command -> > .)
    #               reduce using rule 89 (command -> > .)
    %               reduce using rule 89 (command -> > .)
    ESCAPED         reduce using rule 89 (command -> > .)
    ALPHA           reduce using rule 89 (command -> > .)
    DIGIT           reduce using rule 89 (command -> > .)
    OTHER           reduce using rule 89 (command -> > .)
    [               reduce using rule 89 (command -> > .)
    .               reduce using rule 89 (command -> > .)
    !               reduce using rule 89 (command -> > .)
    $               reduce using rule 89 (command -> > .)
    `               reduce using rule 89 (command -> > .)
    |               reduce using rule 89 (command -> > .)
    )               reduce using rule 89 (command -> > .)
    $end            reduce using rule 89 (command -> > .)


state 10

    (7) basic -> elementary .
    (24) asterisk -> elementary . *
    (25) plus -> elementary . +
    (26) optional -> elementary . ?
    (27) nrepeat -> elementary . { number }
    (28) nrepeat -> elementary . { , number }
    (29) nrepeat -> elementary . { number , }
    (30) nrepeat -> elementary . { number , number }

    (               reduce using rule 7 (basic -> elementary .)
    ^               reduce using rule 7 (basic -> elementary .)
    >               reduce using rule 7 (basic -> elementary .)
    <               reduce using rule 7 (basic -> elementary .)
    /               reduce using rule 7 (basic -> elementary .)
    \               reduce using rule 7 (basic -> elementary .)
    #               reduce using rule 7 (basic -> elementary .)
    %               reduce using rule 7 (basic -> elementary .)
    ESCAPED         reduce using rule 7 (basic -> elementary .)
    ALPHA           reduce using rule 7 (basic -> elementary .)
    DIGIT           reduce using rule 7 (basic -> elementary .)
    OTHER           reduce using rule 7 (basic -> elementary .)
    [               reduce using rule 7 (basic -> elementary .)
    .               reduce using rule 7 (basic -> elementary .)
    !               reduce using rule 7 (basic -> elementary .)
    $               reduce using rule 7 (basic -> elementary .)
    `               reduce using rule 7 (basic -> elementary .)
    |               reduce using rule 7 (basic -> elementary .)
    )               reduce using rule 7 (basic -> elementary .)
    $end            reduce using rule 7 (basic -> elementary .)
    *               shift and go to state 45
    +               shift and go to state 47
    ?               shift and go to state 46
    {               shift and go to state 44


state 11

    (5) simple -> basic .

    (               reduce using rule 5 (simple -> basic .)
    ^               reduce using rule 5 (simple -> basic .)
    >               reduce using rule 5 (simple -> basic .)
    <               reduce using rule 5 (simple -> basic .)
    /               reduce using rule 5 (simple -> basic .)
    \               reduce using rule 5 (simple -> basic .)
    #               reduce using rule 5 (simple -> basic .)
    %               reduce using rule 5 (simple -> basic .)
    ESCAPED         reduce using rule 5 (simple -> basic .)
    ALPHA           reduce using rule 5 (simple -> basic .)
    DIGIT           reduce using rule 5 (simple -> basic .)
    OTHER           reduce using rule 5 (simple -> basic .)
    [               reduce using rule 5 (simple -> basic .)
    .               reduce using rule 5 (simple -> basic .)
    !               reduce using rule 5 (simple -> basic .)
    $               reduce using rule 5 (simple -> basic .)
    `               reduce using rule 5 (simple -> basic .)
    |               reduce using rule 5 (simple -> basic .)
    $end            reduce using rule 5 (simple -> basic .)
    )               reduce using rule 5 (simple -> basic .)


state 12

    (18) elementary -> literal .

    *               reduce using rule 18 (elementary -> literal .)
    +               reduce using rule 18 (elementary -> literal .)
    ?               reduce using rule 18 (elementary -> literal .)
    {               reduce using rule 18 (elementary -> literal .)
    (               reduce using rule 18 (elementary -> literal .)
    ^               reduce using rule 18 (elementary -> literal .)
    >               reduce using rule 18 (elementary -> literal .)
    <               reduce using rule 18 (elementary -> literal .)
    /               reduce using rule 18 (elementary -> literal .)
    \               reduce using rule 18 (elementary -> literal .)
    #               reduce using rule 18 (elementary -> literal .)
    %               reduce using rule 18 (elementary -> literal .)
    ESCAPED         reduce using rule 18 (elementary -> literal .)
    ALPHA           reduce using rule 18 (elementary -> literal .)
    DIGIT           reduce using rule 18 (elementary -> literal .)
    OTHER           reduce using rule 18 (elementary -> literal .)
    [               reduce using rule 18 (elementary -> literal .)
    .               reduce using rule 18 (elementary -> literal .)
    !               reduce using rule 18 (elementary -> literal .)
    $               reduce using rule 18 (elementary -> literal .)
    `               reduce using rule 18 (elementary -> literal .)
    |               reduce using rule 18 (elementary -> literal .)
    $end            reduce using rule 18 (elementary -> literal .)
    )               reduce using rule 18 (elementary -> literal .)


state 13

    (14) basequantifier -> nrepeat .

    ?               reduce using rule 14 (basequantifier -> nrepeat .)
    (               reduce using rule 14 (basequantifier -> nrepeat .)
    ^               reduce using rule 14 (basequantifier -> nrepeat .)
    >               reduce using rule 14 (basequantifier -> nrepeat .)
    <               reduce using rule 14 (basequantifier -> nrepeat .)
    /               reduce using rule 14 (basequantifier -> nrepeat .)
    \               reduce using rule 14 (basequantifier -> nrepeat .)
    #               reduce using rule 14 (basequantifier -> nrepeat .)
    %               reduce using rule 14 (basequantifier -> nrepeat .)
    ESCAPED         reduce using rule 14 (basequantifier -> nrepeat .)
    ALPHA           reduce using rule 14 (basequantifier -> nrepeat .)
    DIGIT           reduce using rule 14 (basequantifier -> nrepeat .)
    OTHER           reduce using rule 14 (basequantifier -> nrepeat .)
    [               reduce using rule 14 (basequantifier -> nrepeat .)
    .               reduce using rule 14 (basequantifier -> nrepeat .)
    !               reduce using rule 14 (basequantifier -> nrepeat .)
    $               reduce using rule 14 (basequantifier -> nrepeat .)
    `               reduce using rule 14 (basequantifier -> nrepeat .)
    |               reduce using rule 14 (basequantifier -> nrepeat .)
    $end            reduce using rule 14 (basequantifier -> nrepeat .)
    )               reduce using rule 14 (basequantifier -> nrepeat .)


state 14

    (98) literal -> OTHER .

    !               reduce using rule 98 (literal -> OTHER .)
    "               reduce using rule 98 (literal -> OTHER .)
    #               reduce using rule 98 (literal -> OTHER .)
    $               reduce using rule 98 (literal -> OTHER .)
    %               reduce using rule 98 (literal -> OTHER .)
    &               reduce using rule 98 (literal -> OTHER .)
    '               reduce using rule 98 (literal -> OTHER .)
    (               reduce using rule 98 (literal -> OTHER .)
    )               reduce using rule 98 (literal -> OTHER .)
    *               reduce using rule 98 (literal -> OTHER .)
    +               reduce using rule 98 (literal -> OTHER .)
    ,               reduce using rule 98 (literal -> OTHER .)
    .               reduce using rule 98 (literal -> OTHER .)
    /               reduce using rule 98 (literal -> OTHER .)
    :               reduce using rule 98 (literal -> OTHER .)
    ;               reduce using rule 98 (literal -> OTHER .)
    <               reduce using rule 98 (literal -> OTHER .)
    =               reduce using rule 98 (literal -> OTHER .)
    >               reduce using rule 98 (literal -> OTHER .)
    ?               reduce using rule 98 (literal -> OTHER .)
    @               reduce using rule 98 (literal -> OTHER .)
    [               reduce using rule 98 (literal -> OTHER .)
    \               reduce using rule 98 (literal -> OTHER .)
    _               reduce using rule 98 (literal -> OTHER .)
    `               reduce using rule 98 (literal -> OTHER .)
    {               reduce using rule 98 (literal -> OTHER .)
    }               reduce using rule 98 (literal -> OTHER .)
    ~               reduce using rule 98 (literal -> OTHER .)
    ESCAPED         reduce using rule 98 (literal -> OTHER .)
    ALPHA           reduce using rule 98 (literal -> OTHER .)
    DIGIT           reduce using rule 98 (literal -> OTHER .)
    OTHER           reduce using rule 98 (literal -> OTHER .)
    |               reduce using rule 98 (literal -> OTHER .)
    ]               reduce using rule 98 (literal -> OTHER .)
    ^               reduce using rule 98 (literal -> OTHER .)
    $end            reduce using rule 98 (literal -> OTHER .)
    -               reduce using rule 98 (literal -> OTHER .)


state 15

    (96) literal -> ALPHA .

    !               reduce using rule 96 (literal -> ALPHA .)
    "               reduce using rule 96 (literal -> ALPHA .)
    #               reduce using rule 96 (literal -> ALPHA .)
    $               reduce using rule 96 (literal -> ALPHA .)
    %               reduce using rule 96 (literal -> ALPHA .)
    &               reduce using rule 96 (literal -> ALPHA .)
    '               reduce using rule 96 (literal -> ALPHA .)
    (               reduce using rule 96 (literal -> ALPHA .)
    )               reduce using rule 96 (literal -> ALPHA .)
    *               reduce using rule 96 (literal -> ALPHA .)
    +               reduce using rule 96 (literal -> ALPHA .)
    ,               reduce using rule 96 (literal -> ALPHA .)
    .               reduce using rule 96 (literal -> ALPHA .)
    /               reduce using rule 96 (literal -> ALPHA .)
    :               reduce using rule 96 (literal -> ALPHA .)
    ;               reduce using rule 96 (literal -> ALPHA .)
    <               reduce using rule 96 (literal -> ALPHA .)
    =               reduce using rule 96 (literal -> ALPHA .)
    >               reduce using rule 96 (literal -> ALPHA .)
    ?               reduce using rule 96 (literal -> ALPHA .)
    @               reduce using rule 96 (literal -> ALPHA .)
    [               reduce using rule 96 (literal -> ALPHA .)
    \               reduce using rule 96 (literal -> ALPHA .)
    _               reduce using rule 96 (literal -> ALPHA .)
    `               reduce using rule 96 (literal -> ALPHA .)
    {               reduce using rule 96 (literal -> ALPHA .)
    }               reduce using rule 96 (literal -> ALPHA .)
    ~               reduce using rule 96 (literal -> ALPHA .)
    ESCAPED         reduce using rule 96 (literal -> ALPHA .)
    ALPHA           reduce using rule 96 (literal -> ALPHA .)
    DIGIT           reduce using rule 96 (literal -> ALPHA .)
    OTHER           reduce using rule 96 (literal -> ALPHA .)
    |               reduce using rule 96 (literal -> ALPHA .)
    ]               reduce using rule 96 (literal -> ALPHA .)
    ^               reduce using rule 96 (literal -> ALPHA .)
    $end            reduce using rule 96 (literal -> ALPHA .)
    -               reduce using rule 96 (literal -> ALPHA .)


state 16

    (11) basequantifier -> asterisk .

    ?               reduce using rule 11 (basequantifier -> asterisk .)
    (               reduce using rule 11 (basequantifier -> asterisk .)
    ^               reduce using rule 11 (basequantifier -> asterisk .)
    >               reduce using rule 11 (basequantifier -> asterisk .)
    <               reduce using rule 11 (basequantifier -> asterisk .)
    /               reduce using rule 11 (basequantifier -> asterisk .)
    \               reduce using rule 11 (basequantifier -> asterisk .)
    #               reduce using rule 11 (basequantifier -> asterisk .)
    %               reduce using rule 11 (basequantifier -> asterisk .)
    ESCAPED         reduce using rule 11 (basequantifier -> asterisk .)
    ALPHA           reduce using rule 11 (basequantifier -> asterisk .)
    DIGIT           reduce using rule 11 (basequantifier -> asterisk .)
    OTHER           reduce using rule 11 (basequantifier -> asterisk .)
    [               reduce using rule 11 (basequantifier -> asterisk .)
    .               reduce using rule 11 (basequantifier -> asterisk .)
    !               reduce using rule 11 (basequantifier -> asterisk .)
    $               reduce using rule 11 (basequantifier -> asterisk .)
    `               reduce using rule 11 (basequantifier -> asterisk .)
    |               reduce using rule 11 (basequantifier -> asterisk .)
    $end            reduce using rule 11 (basequantifier -> asterisk .)
    )               reduce using rule 11 (basequantifier -> asterisk .)


state 17

    (32) nodisplay -> ! .

    *               reduce using rule 32 (nodisplay -> ! .)
    +               reduce using rule 32 (nodisplay -> ! .)
    ?               reduce using rule 32 (nodisplay -> ! .)
    {               reduce using rule 32 (nodisplay -> ! .)
    (               reduce using rule 32 (nodisplay -> ! .)
    ^               reduce using rule 32 (nodisplay -> ! .)
    >               reduce using rule 32 (nodisplay -> ! .)
    <               reduce using rule 32 (nodisplay -> ! .)
    /               reduce using rule 32 (nodisplay -> ! .)
    \               reduce using rule 32 (nodisplay -> ! .)
    #               reduce using rule 32 (nodisplay -> ! .)
    %               reduce using rule 32 (nodisplay -> ! .)
    ESCAPED         reduce using rule 32 (nodisplay -> ! .)
    ALPHA           reduce using rule 32 (nodisplay -> ! .)
    DIGIT           reduce using rule 32 (nodisplay -> ! .)
    OTHER           reduce using rule 32 (nodisplay -> ! .)
    [               reduce using rule 32 (nodisplay -> ! .)
    .               reduce using rule 32 (nodisplay -> ! .)
    !               reduce using rule 32 (nodisplay -> ! .)
    $               reduce using rule 32 (nodisplay -> ! .)
    `               reduce using rule 32 (nodisplay -> ! .)
    |               reduce using rule 32 (nodisplay -> ! .)
    )               reduce using rule 32 (nodisplay -> ! .)
    $end            reduce using rule 32 (nodisplay -> ! .)


state 18

    (92) command -> \ .

    *               reduce using rule 92 (command -> \ .)
    +               reduce using rule 92 (command -> \ .)
    ?               reduce using rule 92 (command -> \ .)
    {               reduce using rule 92 (command -> \ .)
    (               reduce using rule 92 (command -> \ .)
    ^               reduce using rule 92 (command -> \ .)
    >               reduce using rule 92 (command -> \ .)
    <               reduce using rule 92 (command -> \ .)
    /               reduce using rule 92 (command -> \ .)
    \               reduce using rule 92 (command -> \ .)
    #               reduce using rule 92 (command -> \ .)
    %               reduce using rule 92 (command -> \ .)
    ESCAPED         reduce using rule 92 (command -> \ .)
    ALPHA           reduce using rule 92 (command -> \ .)
    DIGIT           reduce using rule 92 (command -> \ .)
    OTHER           reduce using rule 92 (command -> \ .)
    [               reduce using rule 92 (command -> \ .)
    .               reduce using rule 92 (command -> \ .)
    !               reduce using rule 92 (command -> \ .)
    $               reduce using rule 92 (command -> \ .)
    `               reduce using rule 92 (command -> \ .)
    |               reduce using rule 92 (command -> \ .)
    )               reduce using rule 92 (command -> \ .)
    $end            reduce using rule 92 (command -> \ .)


state 19

    (8) basic -> quantifier .

    (               reduce using rule 8 (basic -> quantifier .)
    ^               reduce using rule 8 (basic -> quantifier .)
    >               reduce using rule 8 (basic -> quantifier .)
    <               reduce using rule 8 (basic -> quantifier .)
    /               reduce using rule 8 (basic -> quantifier .)
    \               reduce using rule 8 (basic -> quantifier .)
    #               reduce using rule 8 (basic -> quantifier .)
    %               reduce using rule 8 (basic -> quantifier .)
    ESCAPED         reduce using rule 8 (basic -> quantifier .)
    ALPHA           reduce using rule 8 (basic -> quantifier .)
    DIGIT           reduce using rule 8 (basic -> quantifier .)
    OTHER           reduce using rule 8 (basic -> quantifier .)
    [               reduce using rule 8 (basic -> quantifier .)
    .               reduce using rule 8 (basic -> quantifier .)
    !               reduce using rule 8 (basic -> quantifier .)
    $               reduce using rule 8 (basic -> quantifier .)
    `               reduce using rule 8 (basic -> quantifier .)
    |               reduce using rule 8 (basic -> quantifier .)
    )               reduce using rule 8 (basic -> quantifier .)
    $end            reduce using rule 8 (basic -> quantifier .)


state 20

    (94) command -> % .

    *               reduce using rule 94 (command -> % .)
    +               reduce using rule 94 (command -> % .)
    ?               reduce using rule 94 (command -> % .)
    {               reduce using rule 94 (command -> % .)
    (               reduce using rule 94 (command -> % .)
    ^               reduce using rule 94 (command -> % .)
    >               reduce using rule 94 (command -> % .)
    <               reduce using rule 94 (command -> % .)
    /               reduce using rule 94 (command -> % .)
    \               reduce using rule 94 (command -> % .)
    #               reduce using rule 94 (command -> % .)
    %               reduce using rule 94 (command -> % .)
    ESCAPED         reduce using rule 94 (command -> % .)
    ALPHA           reduce using rule 94 (command -> % .)
    DIGIT           reduce using rule 94 (command -> % .)
    OTHER           reduce using rule 94 (command -> % .)
    [               reduce using rule 94 (command -> % .)
    .               reduce using rule 94 (command -> % .)
    !               reduce using rule 94 (command -> % .)
    $               reduce using rule 94 (command -> % .)
    `               reduce using rule 94 (command -> % .)
    |               reduce using rule 94 (command -> % .)
    )               reduce using rule 94 (command -> % .)
    $end            reduce using rule 94 (command -> % .)


state 21

    (22) elementary -> anchor .

    *               reduce using rule 22 (elementary -> anchor .)
    +               reduce using rule 22 (elementary -> anchor .)
    ?               reduce using rule 22 (elementary -> anchor .)
    {               reduce using rule 22 (elementary -> anchor .)
    (               reduce using rule 22 (elementary -> anchor .)
    ^               reduce using rule 22 (elementary -> anchor .)
    >               reduce using rule 22 (elementary -> anchor .)
    <               reduce using rule 22 (elementary -> anchor .)
    /               reduce using rule 22 (elementary -> anchor .)
    \               reduce using rule 22 (elementary -> anchor .)
    #               reduce using rule 22 (elementary -> anchor .)
    %               reduce using rule 22 (elementary -> anchor .)
    ESCAPED         reduce using rule 22 (elementary -> anchor .)
    ALPHA           reduce using rule 22 (elementary -> anchor .)
    DIGIT           reduce using rule 22 (elementary -> anchor .)
    OTHER           reduce using rule 22 (elementary -> anchor .)
    [               reduce using rule 22 (elementary -> anchor .)
    .               reduce using rule 22 (elementary -> anchor .)
    !               reduce using rule 22 (elementary -> anchor .)
    $               reduce using rule 22 (elementary -> anchor .)
    `               reduce using rule 22 (elementary -> anchor .)
    |               reduce using rule 22 (elementary -> anchor .)
    $end            reduce using rule 22 (elementary -> anchor .)
    )               reduce using rule 22 (elementary -> anchor .)


state 22

    (87) anchor -> $ . DIGIT
    (88) anchor -> $ . ALPHA

    DIGIT           shift and go to state 49
    ALPHA           shift and go to state 48


state 23

    (95) literal -> ESCAPED .

    !               reduce using rule 95 (literal -> ESCAPED .)
    "               reduce using rule 95 (literal -> ESCAPED .)
    #               reduce using rule 95 (literal -> ESCAPED .)
    $               reduce using rule 95 (literal -> ESCAPED .)
    %               reduce using rule 95 (literal -> ESCAPED .)
    &               reduce using rule 95 (literal -> ESCAPED .)
    '               reduce using rule 95 (literal -> ESCAPED .)
    (               reduce using rule 95 (literal -> ESCAPED .)
    )               reduce using rule 95 (literal -> ESCAPED .)
    *               reduce using rule 95 (literal -> ESCAPED .)
    +               reduce using rule 95 (literal -> ESCAPED .)
    ,               reduce using rule 95 (literal -> ESCAPED .)
    .               reduce using rule 95 (literal -> ESCAPED .)
    /               reduce using rule 95 (literal -> ESCAPED .)
    :               reduce using rule 95 (literal -> ESCAPED .)
    ;               reduce using rule 95 (literal -> ESCAPED .)
    <               reduce using rule 95 (literal -> ESCAPED .)
    =               reduce using rule 95 (literal -> ESCAPED .)
    >               reduce using rule 95 (literal -> ESCAPED .)
    ?               reduce using rule 95 (literal -> ESCAPED .)
    @               reduce using rule 95 (literal -> ESCAPED .)
    [               reduce using rule 95 (literal -> ESCAPED .)
    \               reduce using rule 95 (literal -> ESCAPED .)
    _               reduce using rule 95 (literal -> ESCAPED .)
    `               reduce using rule 95 (literal -> ESCAPED .)
    {               reduce using rule 95 (literal -> ESCAPED .)
    }               reduce using rule 95 (literal -> ESCAPED .)
    ~               reduce using rule 95 (literal -> ESCAPED .)
    ESCAPED         reduce using rule 95 (literal -> ESCAPED .)
    ALPHA           reduce using rule 95 (literal -> ESCAPED .)
    DIGIT           reduce using rule 95 (literal -> ESCAPED .)
    OTHER           reduce using rule 95 (literal -> ESCAPED .)
    |               reduce using rule 95 (literal -> ESCAPED .)
    ]               reduce using rule 95 (literal -> ESCAPED .)
    ^               reduce using rule 95 (literal -> ESCAPED .)
    $end            reduce using rule 95 (literal -> ESCAPED .)
    -               reduce using rule 95 (literal -> ESCAPED .)


state 24

    (21) elementary -> nodisplay .

    *               reduce using rule 21 (elementary -> nodisplay .)
    +               reduce using rule 21 (elementary -> nodisplay .)
    ?               reduce using rule 21 (elementary -> nodisplay .)
    {               reduce using rule 21 (elementary -> nodisplay .)
    (               reduce using rule 21 (elementary -> nodisplay .)
    ^               reduce using rule 21 (elementary -> nodisplay .)
    >               reduce using rule 21 (elementary -> nodisplay .)
    <               reduce using rule 21 (elementary -> nodisplay .)
    /               reduce using rule 21 (elementary -> nodisplay .)
    \               reduce using rule 21 (elementary -> nodisplay .)
    #               reduce using rule 21 (elementary -> nodisplay .)
    %               reduce using rule 21 (elementary -> nodisplay .)
    ESCAPED         reduce using rule 21 (elementary -> nodisplay .)
    ALPHA           reduce using rule 21 (elementary -> nodisplay .)
    DIGIT           reduce using rule 21 (elementary -> nodisplay .)
    OTHER           reduce using rule 21 (elementary -> nodisplay .)
    [               reduce using rule 21 (elementary -> nodisplay .)
    .               reduce using rule 21 (elementary -> nodisplay .)
    !               reduce using rule 21 (elementary -> nodisplay .)
    $               reduce using rule 21 (elementary -> nodisplay .)
    `               reduce using rule 21 (elementary -> nodisplay .)
    |               reduce using rule 21 (elementary -> nodisplay .)
    $end            reduce using rule 21 (elementary -> nodisplay .)
    )               reduce using rule 21 (elementary -> nodisplay .)


state 25

    (9) quantifier -> basequantifier .
    (10) quantifier -> basequantifier . ?

    (               reduce using rule 9 (quantifier -> basequantifier .)
    ^               reduce using rule 9 (quantifier -> basequantifier .)
    >               reduce using rule 9 (quantifier -> basequantifier .)
    <               reduce using rule 9 (quantifier -> basequantifier .)
    /               reduce using rule 9 (quantifier -> basequantifier .)
    \               reduce using rule 9 (quantifier -> basequantifier .)
    #               reduce using rule 9 (quantifier -> basequantifier .)
    %               reduce using rule 9 (quantifier -> basequantifier .)
    ESCAPED         reduce using rule 9 (quantifier -> basequantifier .)
    ALPHA           reduce using rule 9 (quantifier -> basequantifier .)
    DIGIT           reduce using rule 9 (quantifier -> basequantifier .)
    OTHER           reduce using rule 9 (quantifier -> basequantifier .)
    [               reduce using rule 9 (quantifier -> basequantifier .)
    .               reduce using rule 9 (quantifier -> basequantifier .)
    !               reduce using rule 9 (quantifier -> basequantifier .)
    $               reduce using rule 9 (quantifier -> basequantifier .)
    `               reduce using rule 9 (quantifier -> basequantifier .)
    |               reduce using rule 9 (quantifier -> basequantifier .)
    )               reduce using rule 9 (quantifier -> basequantifier .)
    $end            reduce using rule 9 (quantifier -> basequantifier .)
    ?               shift and go to state 50


state 26

    (91) command -> / .

    *               reduce using rule 91 (command -> / .)
    +               reduce using rule 91 (command -> / .)
    ?               reduce using rule 91 (command -> / .)
    {               reduce using rule 91 (command -> / .)
    (               reduce using rule 91 (command -> / .)
    ^               reduce using rule 91 (command -> / .)
    >               reduce using rule 91 (command -> / .)
    <               reduce using rule 91 (command -> / .)
    /               reduce using rule 91 (command -> / .)
    \               reduce using rule 91 (command -> / .)
    #               reduce using rule 91 (command -> / .)
    %               reduce using rule 91 (command -> / .)
    ESCAPED         reduce using rule 91 (command -> / .)
    ALPHA           reduce using rule 91 (command -> / .)
    DIGIT           reduce using rule 91 (command -> / .)
    OTHER           reduce using rule 91 (command -> / .)
    [               reduce using rule 91 (command -> / .)
    .               reduce using rule 91 (command -> / .)
    !               reduce using rule 91 (command -> / .)
    $               reduce using rule 91 (command -> / .)
    `               reduce using rule 91 (command -> / .)
    |               reduce using rule 91 (command -> / .)
    )               reduce using rule 91 (command -> / .)
    $end            reduce using rule 91 (command -> / .)


state 27

    (84) predefined -> ` . ALPHA

    ALPHA           shift and go to state 51


state 28

    (20) elementary -> anychar .

    *               reduce using rule 20 (elementary -> anychar .)
    +               reduce using rule 20 (elementary -> anychar .)
    ?               reduce using rule 20 (elementary -> anychar .)
    {               reduce using rule 20 (elementary -> anychar .)
    (               reduce using rule 20 (elementary -> anychar .)
    ^               reduce using rule 20 (elementary -> anychar .)
    >               reduce using rule 20 (elementary -> anychar .)
    <               reduce using rule 20 (elementary -> anychar .)
    /               reduce using rule 20 (elementary -> anychar .)
    \               reduce using rule 20 (elementary -> anychar .)
    #               reduce using rule 20 (elementary -> anychar .)
    %               reduce using rule 20 (elementary -> anychar .)
    ESCAPED         reduce using rule 20 (elementary -> anychar .)
    ALPHA           reduce using rule 20 (elementary -> anychar .)
    DIGIT           reduce using rule 20 (elementary -> anychar .)
    OTHER           reduce using rule 20 (elementary -> anychar .)
    [               reduce using rule 20 (elementary -> anychar .)
    .               reduce using rule 20 (elementary -> anychar .)
    !               reduce using rule 20 (elementary -> anychar .)
    $               reduce using rule 20 (elementary -> anychar .)
    `               reduce using rule 20 (elementary -> anychar .)
    |               reduce using rule 20 (elementary -> anychar .)
    $end            reduce using rule 20 (elementary -> anychar .)
    )               reduce using rule 20 (elementary -> anychar .)


state 29

    (85) directional -> ^ . DIGIT
    (86) directional -> ^ . ALPHA

    DIGIT           shift and go to state 52
    ALPHA           shift and go to state 53


state 30

    (15) elementary -> group .

    *               reduce using rule 15 (elementary -> group .)
    +               reduce using rule 15 (elementary -> group .)
    ?               reduce using rule 15 (elementary -> group .)
    {               reduce using rule 15 (elementary -> group .)
    (               reduce using rule 15 (elementary -> group .)
    ^               reduce using rule 15 (elementary -> group .)
    >               reduce using rule 15 (elementary -> group .)
    <               reduce using rule 15 (elementary -> group .)
    /               reduce using rule 15 (elementary -> group .)
    \               reduce using rule 15 (elementary -> group .)
    #               reduce using rule 15 (elementary -> group .)
    %               reduce using rule 15 (elementary -> group .)
    ESCAPED         reduce using rule 15 (elementary -> group .)
    ALPHA           reduce using rule 15 (elementary -> group .)
    DIGIT           reduce using rule 15 (elementary -> group .)
    OTHER           reduce using rule 15 (elementary -> group .)
    [               reduce using rule 15 (elementary -> group .)
    .               reduce using rule 15 (elementary -> group .)
    !               reduce using rule 15 (elementary -> group .)
    $               reduce using rule 15 (elementary -> group .)
    `               reduce using rule 15 (elementary -> group .)
    |               reduce using rule 15 (elementary -> group .)
    $end            reduce using rule 15 (elementary -> group .)
    )               reduce using rule 15 (elementary -> group .)


state 31

    (16) elementary -> directional .

    *               reduce using rule 16 (elementary -> directional .)
    +               reduce using rule 16 (elementary -> directional .)
    ?               reduce using rule 16 (elementary -> directional .)
    {               reduce using rule 16 (elementary -> directional .)
    (               reduce using rule 16 (elementary -> directional .)
    ^               reduce using rule 16 (elementary -> directional .)
    >               reduce using rule 16 (elementary -> directional .)
    <               reduce using rule 16 (elementary -> directional .)
    /               reduce using rule 16 (elementary -> directional .)
    \               reduce using rule 16 (elementary -> directional .)
    #               reduce using rule 16 (elementary -> directional .)
    %               reduce using rule 16 (elementary -> directional .)
    ESCAPED         reduce using rule 16 (elementary -> directional .)
    ALPHA           reduce using rule 16 (elementary -> directional .)
    DIGIT           reduce using rule 16 (elementary -> directional .)
    OTHER           reduce using rule 16 (elementary -> directional .)
    [               reduce using rule 16 (elementary -> directional .)
    .               reduce using rule 16 (elementary -> directional .)
    !               reduce using rule 16 (elementary -> directional .)
    $               reduce using rule 16 (elementary -> directional .)
    `               reduce using rule 16 (elementary -> directional .)
    |               reduce using rule 16 (elementary -> directional .)
    $end            reduce using rule 16 (elementary -> directional .)
    )               reduce using rule 16 (elementary -> directional .)


state 32

    (0) S' -> re .
    (3) alternation -> re . | simple

    |               shift and go to state 54


state 33

    (23) elementary -> predefined .

    *               reduce using rule 23 (elementary -> predefined .)
    +               reduce using rule 23 (elementary -> predefined .)
    ?               reduce using rule 23 (elementary -> predefined .)
    {               reduce using rule 23 (elementary -> predefined .)
    (               reduce using rule 23 (elementary -> predefined .)
    ^               reduce using rule 23 (elementary -> predefined .)
    >               reduce using rule 23 (elementary -> predefined .)
    <               reduce using rule 23 (elementary -> predefined .)
    /               reduce using rule 23 (elementary -> predefined .)
    \               reduce using rule 23 (elementary -> predefined .)
    #               reduce using rule 23 (elementary -> predefined .)
    %               reduce using rule 23 (elementary -> predefined .)
    ESCAPED         reduce using rule 23 (elementary -> predefined .)
    ALPHA           reduce using rule 23 (elementary -> predefined .)
    DIGIT           reduce using rule 23 (elementary -> predefined .)
    OTHER           reduce using rule 23 (elementary -> predefined .)
    [               reduce using rule 23 (elementary -> predefined .)
    .               reduce using rule 23 (elementary -> predefined .)
    !               reduce using rule 23 (elementary -> predefined .)
    $               reduce using rule 23 (elementary -> predefined .)
    `               reduce using rule 23 (elementary -> predefined .)
    |               reduce using rule 23 (elementary -> predefined .)
    $end            reduce using rule 23 (elementary -> predefined .)
    )               reduce using rule 23 (elementary -> predefined .)


state 34

    (97) literal -> DIGIT .

    !               reduce using rule 97 (literal -> DIGIT .)
    "               reduce using rule 97 (literal -> DIGIT .)
    #               reduce using rule 97 (literal -> DIGIT .)
    $               reduce using rule 97 (literal -> DIGIT .)
    %               reduce using rule 97 (literal -> DIGIT .)
    &               reduce using rule 97 (literal -> DIGIT .)
    '               reduce using rule 97 (literal -> DIGIT .)
    (               reduce using rule 97 (literal -> DIGIT .)
    )               reduce using rule 97 (literal -> DIGIT .)
    *               reduce using rule 97 (literal -> DIGIT .)
    +               reduce using rule 97 (literal -> DIGIT .)
    ,               reduce using rule 97 (literal -> DIGIT .)
    .               reduce using rule 97 (literal -> DIGIT .)
    /               reduce using rule 97 (literal -> DIGIT .)
    :               reduce using rule 97 (literal -> DIGIT .)
    ;               reduce using rule 97 (literal -> DIGIT .)
    <               reduce using rule 97 (literal -> DIGIT .)
    =               reduce using rule 97 (literal -> DIGIT .)
    >               reduce using rule 97 (literal -> DIGIT .)
    ?               reduce using rule 97 (literal -> DIGIT .)
    @               reduce using rule 97 (literal -> DIGIT .)
    [               reduce using rule 97 (literal -> DIGIT .)
    \               reduce using rule 97 (literal -> DIGIT .)
    _               reduce using rule 97 (literal -> DIGIT .)
    `               reduce using rule 97 (literal -> DIGIT .)
    {               reduce using rule 97 (literal -> DIGIT .)
    }               reduce using rule 97 (literal -> DIGIT .)
    ~               reduce using rule 97 (literal -> DIGIT .)
    ESCAPED         reduce using rule 97 (literal -> DIGIT .)
    ALPHA           reduce using rule 97 (literal -> DIGIT .)
    DIGIT           reduce using rule 97 (literal -> DIGIT .)
    OTHER           reduce using rule 97 (literal -> DIGIT .)
    |               reduce using rule 97 (literal -> DIGIT .)
    ]               reduce using rule 97 (literal -> DIGIT .)
    ^               reduce using rule 97 (literal -> DIGIT .)
    $end            reduce using rule 97 (literal -> DIGIT .)
    -               reduce using rule 97 (literal -> DIGIT .)


state 35

    (45) charclass -> [ . classitems ]
    (46) classitems -> . ^ baseitems
    (47) classitems -> . classitems2
    (48) classitems2 -> . baseitems
    (49) classitems2 -> . baseitems | baseitems
    (50) baseitems -> . classatom
    (51) baseitems -> . classatom baseitems
    (52) classatom -> . classliteral
    (53) classatom -> . classrange
    (54) classliteral -> . !
    (55) classliteral -> . "
    (56) classliteral -> . #
    (57) classliteral -> . $
    (58) classliteral -> . %
    (59) classliteral -> . &
    (60) classliteral -> . '
    (61) classliteral -> . (
    (62) classliteral -> . )
    (63) classliteral -> . *
    (64) classliteral -> . +
    (65) classliteral -> . ,
    (66) classliteral -> . .
    (67) classliteral -> . /
    (68) classliteral -> . :
    (69) classliteral -> . ;
    (70) classliteral -> . <
    (71) classliteral -> . =
    (72) classliteral -> . >
    (73) classliteral -> . ?
    (74) classliteral -> . @
    (75) classliteral -> . [
    (76) classliteral -> . \
    (77) classliteral -> . _
    (78) classliteral -> . `
    (79) classliteral -> . {
    (80) classliteral -> . }
    (81) classliteral -> . ~
    (82) classliteral -> . literal
    (83) classrange -> . classliteral - classliteral
    (95) literal -> . ESCAPED
    (96) literal -> . ALPHA
    (97) literal -> . DIGIT
    (98) literal -> . OTHER

    ^               shift and go to state 76
    !               shift and go to state 88
    "               shift and go to state 72
    #               shift and go to state 57
    $               shift and go to state 66
    %               shift and go to state 61
    &               shift and go to state 87
    '               shift and go to state 80
    (               shift and go to state 70
    )               shift and go to state 81
    *               shift and go to state 67
    +               shift and go to state 89
    ,               shift and go to state 58
    .               shift and go to state 90
    /               shift and go to state 62
    :               shift and go to state 86
    ;               shift and go to state 82
    <               shift and go to state 71
    =               shift and go to state 83
    >               shift and go to state 84
    ?               shift and go to state 64
    @               shift and go to state 65
    [               shift and go to state 85
    \               shift and go to state 55
    _               shift and go to state 74
    `               shift and go to state 77
    {               shift and go to state 63
    }               shift and go to state 56
    ~               shift and go to state 79
    ESCAPED         shift and go to state 23
    ALPHA           shift and go to state 15
    DIGIT           shift and go to state 34
    OTHER           shift and go to state 14

    classatom                      shift and go to state 59
    classitems                     shift and go to state 75
    classrange                     shift and go to state 60
    literal                        shift and go to state 78
    classliteral                   shift and go to state 68
    baseitems                      shift and go to state 69
    classitems2                    shift and go to state 73

state 36

    (90) command -> < .

    *               reduce using rule 90 (command -> < .)
    +               reduce using rule 90 (command -> < .)
    ?               reduce using rule 90 (command -> < .)
    {               reduce using rule 90 (command -> < .)
    (               reduce using rule 90 (command -> < .)
    ^               reduce using rule 90 (command -> < .)
    >               reduce using rule 90 (command -> < .)
    <               reduce using rule 90 (command -> < .)
    /               reduce using rule 90 (command -> < .)
    \               reduce using rule 90 (command -> < .)
    #               reduce using rule 90 (command -> < .)
    %               reduce using rule 90 (command -> < .)
    ESCAPED         reduce using rule 90 (command -> < .)
    ALPHA           reduce using rule 90 (command -> < .)
    DIGIT           reduce using rule 90 (command -> < .)
    OTHER           reduce using rule 90 (command -> < .)
    [               reduce using rule 90 (command -> < .)
    .               reduce using rule 90 (command -> < .)
    !               reduce using rule 90 (command -> < .)
    $               reduce using rule 90 (command -> < .)
    `               reduce using rule 90 (command -> < .)
    |               reduce using rule 90 (command -> < .)
    )               reduce using rule 90 (command -> < .)
    $end            reduce using rule 90 (command -> < .)


state 37

    (19) elementary -> charclass .

    *               reduce using rule 19 (elementary -> charclass .)
    +               reduce using rule 19 (elementary -> charclass .)
    ?               reduce using rule 19 (elementary -> charclass .)
    {               reduce using rule 19 (elementary -> charclass .)
    (               reduce using rule 19 (elementary -> charclass .)
    ^               reduce using rule 19 (elementary -> charclass .)
    >               reduce using rule 19 (elementary -> charclass .)
    <               reduce using rule 19 (elementary -> charclass .)
    /               reduce using rule 19 (elementary -> charclass .)
    \               reduce using rule 19 (elementary -> charclass .)
    #               reduce using rule 19 (elementary -> charclass .)
    %               reduce using rule 19 (elementary -> charclass .)
    ESCAPED         reduce using rule 19 (elementary -> charclass .)
    ALPHA           reduce using rule 19 (elementary -> charclass .)
    DIGIT           reduce using rule 19 (elementary -> charclass .)
    OTHER           reduce using rule 19 (elementary -> charclass .)
    [               reduce using rule 19 (elementary -> charclass .)
    .               reduce using rule 19 (elementary -> charclass .)
    !               reduce using rule 19 (elementary -> charclass .)
    $               reduce using rule 19 (elementary -> charclass .)
    `               reduce using rule 19 (elementary -> charclass .)
    |               reduce using rule 19 (elementary -> charclass .)
    $end            reduce using rule 19 (elementary -> charclass .)
    )               reduce using rule 19 (elementary -> charclass .)


state 38

    (13) basequantifier -> optional .

    ?               reduce using rule 13 (basequantifier -> optional .)
    (               reduce using rule 13 (basequantifier -> optional .)
    ^               reduce using rule 13 (basequantifier -> optional .)
    >               reduce using rule 13 (basequantifier -> optional .)
    <               reduce using rule 13 (basequantifier -> optional .)
    /               reduce using rule 13 (basequantifier -> optional .)
    \               reduce using rule 13 (basequantifier -> optional .)
    #               reduce using rule 13 (basequantifier -> optional .)
    %               reduce using rule 13 (basequantifier -> optional .)
    ESCAPED         reduce using rule 13 (basequantifier -> optional .)
    ALPHA           reduce using rule 13 (basequantifier -> optional .)
    DIGIT           reduce using rule 13 (basequantifier -> optional .)
    OTHER           reduce using rule 13 (basequantifier -> optional .)
    [               reduce using rule 13 (basequantifier -> optional .)
    .               reduce using rule 13 (basequantifier -> optional .)
    !               reduce using rule 13 (basequantifier -> optional .)
    $               reduce using rule 13 (basequantifier -> optional .)
    `               reduce using rule 13 (basequantifier -> optional .)
    |               reduce using rule 13 (basequantifier -> optional .)
    $end            reduce using rule 13 (basequantifier -> optional .)
    )               reduce using rule 13 (basequantifier -> optional .)


state 39

    (6) concatenation -> simple basic .

    (               reduce using rule 6 (concatenation -> simple basic .)
    ^               reduce using rule 6 (concatenation -> simple basic .)
    >               reduce using rule 6 (concatenation -> simple basic .)
    <               reduce using rule 6 (concatenation -> simple basic .)
    /               reduce using rule 6 (concatenation -> simple basic .)
    \               reduce using rule 6 (concatenation -> simple basic .)
    #               reduce using rule 6 (concatenation -> simple basic .)
    %               reduce using rule 6 (concatenation -> simple basic .)
    ESCAPED         reduce using rule 6 (concatenation -> simple basic .)
    ALPHA           reduce using rule 6 (concatenation -> simple basic .)
    DIGIT           reduce using rule 6 (concatenation -> simple basic .)
    OTHER           reduce using rule 6 (concatenation -> simple basic .)
    [               reduce using rule 6 (concatenation -> simple basic .)
    .               reduce using rule 6 (concatenation -> simple basic .)
    !               reduce using rule 6 (concatenation -> simple basic .)
    $               reduce using rule 6 (concatenation -> simple basic .)
    `               reduce using rule 6 (concatenation -> simple basic .)
    |               reduce using rule 6 (concatenation -> simple basic .)
    )               reduce using rule 6 (concatenation -> simple basic .)
    $end            reduce using rule 6 (concatenation -> simple basic .)


state 40

    (36) groupbody -> ? . specialgroup
    (38) specialgroup -> . _ lengthcheck
    (39) specialgroup -> . | stationarygroup
    (40) specialgroup -> . : nocapture

    _               shift and go to state 91
    |               shift and go to state 93
    :               shift and go to state 94

    specialgroup                   shift and go to state 92

state 41

    (44) basicgroup -> re .
    (3) alternation -> re . | simple

    )               reduce using rule 44 (basicgroup -> re .)
    |               shift and go to state 54


state 42

    (37) groupbody -> basicgroup .

    )               reduce using rule 37 (groupbody -> basicgroup .)


state 43

    (35) group -> ( groupbody . )

    )               shift and go to state 95


state 44

    (27) nrepeat -> elementary { . number }
    (28) nrepeat -> elementary { . , number }
    (29) nrepeat -> elementary { . number , }
    (30) nrepeat -> elementary { . number , number }
    (33) number -> . DIGIT
    (34) number -> . DIGIT number

    ,               shift and go to state 96
    DIGIT           shift and go to state 97

    number                         shift and go to state 98

state 45

    (24) asterisk -> elementary * .

    ?               reduce using rule 24 (asterisk -> elementary * .)
    (               reduce using rule 24 (asterisk -> elementary * .)
    ^               reduce using rule 24 (asterisk -> elementary * .)
    >               reduce using rule 24 (asterisk -> elementary * .)
    <               reduce using rule 24 (asterisk -> elementary * .)
    /               reduce using rule 24 (asterisk -> elementary * .)
    \               reduce using rule 24 (asterisk -> elementary * .)
    #               reduce using rule 24 (asterisk -> elementary * .)
    %               reduce using rule 24 (asterisk -> elementary * .)
    ESCAPED         reduce using rule 24 (asterisk -> elementary * .)
    ALPHA           reduce using rule 24 (asterisk -> elementary * .)
    DIGIT           reduce using rule 24 (asterisk -> elementary * .)
    OTHER           reduce using rule 24 (asterisk -> elementary * .)
    [               reduce using rule 24 (asterisk -> elementary * .)
    .               reduce using rule 24 (asterisk -> elementary * .)
    !               reduce using rule 24 (asterisk -> elementary * .)
    $               reduce using rule 24 (asterisk -> elementary * .)
    `               reduce using rule 24 (asterisk -> elementary * .)
    |               reduce using rule 24 (asterisk -> elementary * .)
    $end            reduce using rule 24 (asterisk -> elementary * .)
    )               reduce using rule 24 (asterisk -> elementary * .)


state 46

    (26) optional -> elementary ? .

    ?               reduce using rule 26 (optional -> elementary ? .)
    (               reduce using rule 26 (optional -> elementary ? .)
    ^               reduce using rule 26 (optional -> elementary ? .)
    >               reduce using rule 26 (optional -> elementary ? .)
    <               reduce using rule 26 (optional -> elementary ? .)
    /               reduce using rule 26 (optional -> elementary ? .)
    \               reduce using rule 26 (optional -> elementary ? .)
    #               reduce using rule 26 (optional -> elementary ? .)
    %               reduce using rule 26 (optional -> elementary ? .)
    ESCAPED         reduce using rule 26 (optional -> elementary ? .)
    ALPHA           reduce using rule 26 (optional -> elementary ? .)
    DIGIT           reduce using rule 26 (optional -> elementary ? .)
    OTHER           reduce using rule 26 (optional -> elementary ? .)
    [               reduce using rule 26 (optional -> elementary ? .)
    .               reduce using rule 26 (optional -> elementary ? .)
    !               reduce using rule 26 (optional -> elementary ? .)
    $               reduce using rule 26 (optional -> elementary ? .)
    `               reduce using rule 26 (optional -> elementary ? .)
    |               reduce using rule 26 (optional -> elementary ? .)
    $end            reduce using rule 26 (optional -> elementary ? .)
    )               reduce using rule 26 (optional -> elementary ? .)


state 47

    (25) plus -> elementary + .

    ?               reduce using rule 25 (plus -> elementary + .)
    (               reduce using rule 25 (plus -> elementary + .)
    ^               reduce using rule 25 (plus -> elementary + .)
    >               reduce using rule 25 (plus -> elementary + .)
    <               reduce using rule 25 (plus -> elementary + .)
    /               reduce using rule 25 (plus -> elementary + .)
    \               reduce using rule 25 (plus -> elementary + .)
    #               reduce using rule 25 (plus -> elementary + .)
    %               reduce using rule 25 (plus -> elementary + .)
    ESCAPED         reduce using rule 25 (plus -> elementary + .)
    ALPHA           reduce using rule 25 (plus -> elementary + .)
    DIGIT           reduce using rule 25 (plus -> elementary + .)
    OTHER           reduce using rule 25 (plus -> elementary + .)
    [               reduce using rule 25 (plus -> elementary + .)
    .               reduce using rule 25 (plus -> elementary + .)
    !               reduce using rule 25 (plus -> elementary + .)
    $               reduce using rule 25 (plus -> elementary + .)
    `               reduce using rule 25 (plus -> elementary + .)
    |               reduce using rule 25 (plus -> elementary + .)
    $end            reduce using rule 25 (plus -> elementary + .)
    )               reduce using rule 25 (plus -> elementary + .)


state 48

    (88) anchor -> $ ALPHA .

    *               reduce using rule 88 (anchor -> $ ALPHA .)
    +               reduce using rule 88 (anchor -> $ ALPHA .)
    ?               reduce using rule 88 (anchor -> $ ALPHA .)
    {               reduce using rule 88 (anchor -> $ ALPHA .)
    (               reduce using rule 88 (anchor -> $ ALPHA .)
    ^               reduce using rule 88 (anchor -> $ ALPHA .)
    >               reduce using rule 88 (anchor -> $ ALPHA .)
    <               reduce using rule 88 (anchor -> $ ALPHA .)
    /               reduce using rule 88 (anchor -> $ ALPHA .)
    \               reduce using rule 88 (anchor -> $ ALPHA .)
    #               reduce using rule 88 (anchor -> $ ALPHA .)
    %               reduce using rule 88 (anchor -> $ ALPHA .)
    ESCAPED         reduce using rule 88 (anchor -> $ ALPHA .)
    ALPHA           reduce using rule 88 (anchor -> $ ALPHA .)
    DIGIT           reduce using rule 88 (anchor -> $ ALPHA .)
    OTHER           reduce using rule 88 (anchor -> $ ALPHA .)
    [               reduce using rule 88 (anchor -> $ ALPHA .)
    .               reduce using rule 88 (anchor -> $ ALPHA .)
    !               reduce using rule 88 (anchor -> $ ALPHA .)
    $               reduce using rule 88 (anchor -> $ ALPHA .)
    `               reduce using rule 88 (anchor -> $ ALPHA .)
    |               reduce using rule 88 (anchor -> $ ALPHA .)
    )               reduce using rule 88 (anchor -> $ ALPHA .)
    $end            reduce using rule 88 (anchor -> $ ALPHA .)


state 49

    (87) anchor -> $ DIGIT .

    *               reduce using rule 87 (anchor -> $ DIGIT .)
    +               reduce using rule 87 (anchor -> $ DIGIT .)
    ?               reduce using rule 87 (anchor -> $ DIGIT .)
    {               reduce using rule 87 (anchor -> $ DIGIT .)
    (               reduce using rule 87 (anchor -> $ DIGIT .)
    ^               reduce using rule 87 (anchor -> $ DIGIT .)
    >               reduce using rule 87 (anchor -> $ DIGIT .)
    <               reduce using rule 87 (anchor -> $ DIGIT .)
    /               reduce using rule 87 (anchor -> $ DIGIT .)
    \               reduce using rule 87 (anchor -> $ DIGIT .)
    #               reduce using rule 87 (anchor -> $ DIGIT .)
    %               reduce using rule 87 (anchor -> $ DIGIT .)
    ESCAPED         reduce using rule 87 (anchor -> $ DIGIT .)
    ALPHA           reduce using rule 87 (anchor -> $ DIGIT .)
    DIGIT           reduce using rule 87 (anchor -> $ DIGIT .)
    OTHER           reduce using rule 87 (anchor -> $ DIGIT .)
    [               reduce using rule 87 (anchor -> $ DIGIT .)
    .               reduce using rule 87 (anchor -> $ DIGIT .)
    !               reduce using rule 87 (anchor -> $ DIGIT .)
    $               reduce using rule 87 (anchor -> $ DIGIT .)
    `               reduce using rule 87 (anchor -> $ DIGIT .)
    |               reduce using rule 87 (anchor -> $ DIGIT .)
    )               reduce using rule 87 (anchor -> $ DIGIT .)
    $end            reduce using rule 87 (anchor -> $ DIGIT .)


state 50

    (10) quantifier -> basequantifier ? .

    (               reduce using rule 10 (quantifier -> basequantifier ? .)
    ^               reduce using rule 10 (quantifier -> basequantifier ? .)
    >               reduce using rule 10 (quantifier -> basequantifier ? .)
    <               reduce using rule 10 (quantifier -> basequantifier ? .)
    /               reduce using rule 10 (quantifier -> basequantifier ? .)
    \               reduce using rule 10 (quantifier -> basequantifier ? .)
    #               reduce using rule 10 (quantifier -> basequantifier ? .)
    %               reduce using rule 10 (quantifier -> basequantifier ? .)
    ESCAPED         reduce using rule 10 (quantifier -> basequantifier ? .)
    ALPHA           reduce using rule 10 (quantifier -> basequantifier ? .)
    DIGIT           reduce using rule 10 (quantifier -> basequantifier ? .)
    OTHER           reduce using rule 10 (quantifier -> basequantifier ? .)
    [               reduce using rule 10 (quantifier -> basequantifier ? .)
    .               reduce using rule 10 (quantifier -> basequantifier ? .)
    !               reduce using rule 10 (quantifier -> basequantifier ? .)
    $               reduce using rule 10 (quantifier -> basequantifier ? .)
    `               reduce using rule 10 (quantifier -> basequantifier ? .)
    |               reduce using rule 10 (quantifier -> basequantifier ? .)
    )               reduce using rule 10 (quantifier -> basequantifier ? .)
    $end            reduce using rule 10 (quantifier -> basequantifier ? .)


state 51

    (84) predefined -> ` ALPHA .

    *               reduce using rule 84 (predefined -> ` ALPHA .)
    +               reduce using rule 84 (predefined -> ` ALPHA .)
    ?               reduce using rule 84 (predefined -> ` ALPHA .)
    {               reduce using rule 84 (predefined -> ` ALPHA .)
    (               reduce using rule 84 (predefined -> ` ALPHA .)
    ^               reduce using rule 84 (predefined -> ` ALPHA .)
    >               reduce using rule 84 (predefined -> ` ALPHA .)
    <               reduce using rule 84 (predefined -> ` ALPHA .)
    /               reduce using rule 84 (predefined -> ` ALPHA .)
    \               reduce using rule 84 (predefined -> ` ALPHA .)
    #               reduce using rule 84 (predefined -> ` ALPHA .)
    %               reduce using rule 84 (predefined -> ` ALPHA .)
    ESCAPED         reduce using rule 84 (predefined -> ` ALPHA .)
    ALPHA           reduce using rule 84 (predefined -> ` ALPHA .)
    DIGIT           reduce using rule 84 (predefined -> ` ALPHA .)
    OTHER           reduce using rule 84 (predefined -> ` ALPHA .)
    [               reduce using rule 84 (predefined -> ` ALPHA .)
    .               reduce using rule 84 (predefined -> ` ALPHA .)
    !               reduce using rule 84 (predefined -> ` ALPHA .)
    $               reduce using rule 84 (predefined -> ` ALPHA .)
    `               reduce using rule 84 (predefined -> ` ALPHA .)
    |               reduce using rule 84 (predefined -> ` ALPHA .)
    )               reduce using rule 84 (predefined -> ` ALPHA .)
    $end            reduce using rule 84 (predefined -> ` ALPHA .)


state 52

    (85) directional -> ^ DIGIT .

    *               reduce using rule 85 (directional -> ^ DIGIT .)
    +               reduce using rule 85 (directional -> ^ DIGIT .)
    ?               reduce using rule 85 (directional -> ^ DIGIT .)
    {               reduce using rule 85 (directional -> ^ DIGIT .)
    (               reduce using rule 85 (directional -> ^ DIGIT .)
    ^               reduce using rule 85 (directional -> ^ DIGIT .)
    >               reduce using rule 85 (directional -> ^ DIGIT .)
    <               reduce using rule 85 (directional -> ^ DIGIT .)
    /               reduce using rule 85 (directional -> ^ DIGIT .)
    \               reduce using rule 85 (directional -> ^ DIGIT .)
    #               reduce using rule 85 (directional -> ^ DIGIT .)
    %               reduce using rule 85 (directional -> ^ DIGIT .)
    ESCAPED         reduce using rule 85 (directional -> ^ DIGIT .)
    ALPHA           reduce using rule 85 (directional -> ^ DIGIT .)
    DIGIT           reduce using rule 85 (directional -> ^ DIGIT .)
    OTHER           reduce using rule 85 (directional -> ^ DIGIT .)
    [               reduce using rule 85 (directional -> ^ DIGIT .)
    .               reduce using rule 85 (directional -> ^ DIGIT .)
    !               reduce using rule 85 (directional -> ^ DIGIT .)
    $               reduce using rule 85 (directional -> ^ DIGIT .)
    `               reduce using rule 85 (directional -> ^ DIGIT .)
    |               reduce using rule 85 (directional -> ^ DIGIT .)
    $end            reduce using rule 85 (directional -> ^ DIGIT .)
    )               reduce using rule 85 (directional -> ^ DIGIT .)


state 53

    (86) directional -> ^ ALPHA .

    *               reduce using rule 86 (directional -> ^ ALPHA .)
    +               reduce using rule 86 (directional -> ^ ALPHA .)
    ?               reduce using rule 86 (directional -> ^ ALPHA .)
    {               reduce using rule 86 (directional -> ^ ALPHA .)
    (               reduce using rule 86 (directional -> ^ ALPHA .)
    ^               reduce using rule 86 (directional -> ^ ALPHA .)
    >               reduce using rule 86 (directional -> ^ ALPHA .)
    <               reduce using rule 86 (directional -> ^ ALPHA .)
    /               reduce using rule 86 (directional -> ^ ALPHA .)
    \               reduce using rule 86 (directional -> ^ ALPHA .)
    #               reduce using rule 86 (directional -> ^ ALPHA .)
    %               reduce using rule 86 (directional -> ^ ALPHA .)
    ESCAPED         reduce using rule 86 (directional -> ^ ALPHA .)
    ALPHA           reduce using rule 86 (directional -> ^ ALPHA .)
    DIGIT           reduce using rule 86 (directional -> ^ ALPHA .)
    OTHER           reduce using rule 86 (directional -> ^ ALPHA .)
    [               reduce using rule 86 (directional -> ^ ALPHA .)
    .               reduce using rule 86 (directional -> ^ ALPHA .)
    !               reduce using rule 86 (directional -> ^ ALPHA .)
    $               reduce using rule 86 (directional -> ^ ALPHA .)
    `               reduce using rule 86 (directional -> ^ ALPHA .)
    |               reduce using rule 86 (directional -> ^ ALPHA .)
    $end            reduce using rule 86 (directional -> ^ ALPHA .)
    )               reduce using rule 86 (directional -> ^ ALPHA .)


state 54

    (3) alternation -> re | . simple
    (4) simple -> . concatenation
    (5) simple -> . basic
    (6) concatenation -> . simple basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . anchor
    (23) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (35) group -> . ( groupbody )
    (85) directional -> . ^ DIGIT
    (86) directional -> . ^ ALPHA
    (89) command -> . >
    (90) command -> . <
    (91) command -> . /
    (92) command -> . \
    (93) command -> . #
    (94) command -> . %
    (95) literal -> . ESCAPED
    (96) literal -> . ALPHA
    (97) literal -> . DIGIT
    (98) literal -> . OTHER
    (45) charclass -> . [ classitems ]
    (31) anychar -> . .
    (32) nodisplay -> . !
    (87) anchor -> . $ DIGIT
    (88) anchor -> . $ ALPHA
    (84) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (24) asterisk -> . elementary *
    (25) plus -> . elementary +
    (26) optional -> . elementary ?
    (27) nrepeat -> . elementary { number }
    (28) nrepeat -> . elementary { , number }
    (29) nrepeat -> . elementary { number , }
    (30) nrepeat -> . elementary { number , number }

    (               shift and go to state 8
    ^               shift and go to state 29
    >               shift and go to state 9
    <               shift and go to state 36
    /               shift and go to state 26
    \               shift and go to state 18
    #               shift and go to state 1
    %               shift and go to state 20
    ESCAPED         shift and go to state 23
    ALPHA           shift and go to state 15
    DIGIT           shift and go to state 34
    OTHER           shift and go to state 14
    [               shift and go to state 35
    .               shift and go to state 6
    !               shift and go to state 17
    $               shift and go to state 22
    `               shift and go to state 27

    concatenation                  shift and go to state 7
    command                        shift and go to state 3
    simple                         shift and go to state 99
    anchor                         shift and go to state 21
    nodisplay                      shift and go to state 24
    basequantifier                 shift and go to state 25
    anychar                        shift and go to state 28
    quantifier                     shift and go to state 19
    group                          shift and go to state 30
    elementary                     shift and go to state 10
    basic                          shift and go to state 11
    literal                        shift and go to state 12
    directional                    shift and go to state 31
    plus                           shift and go to state 5
    predefined                     shift and go to state 33
    asterisk                       shift and go to state 16
    charclass                      shift and go to state 37
    nrepeat                        shift and go to state 13
    optional                       shift and go to state 38

state 55

    (76) classliteral -> \ .

    -               reduce using rule 76 (classliteral -> \ .)
    !               reduce using rule 76 (classliteral -> \ .)
    "               reduce using rule 76 (classliteral -> \ .)
    #               reduce using rule 76 (classliteral -> \ .)
    $               reduce using rule 76 (classliteral -> \ .)
    %               reduce using rule 76 (classliteral -> \ .)
    &               reduce using rule 76 (classliteral -> \ .)
    '               reduce using rule 76 (classliteral -> \ .)
    (               reduce using rule 76 (classliteral -> \ .)
    )               reduce using rule 76 (classliteral -> \ .)
    *               reduce using rule 76 (classliteral -> \ .)
    +               reduce using rule 76 (classliteral -> \ .)
    ,               reduce using rule 76 (classliteral -> \ .)
    .               reduce using rule 76 (classliteral -> \ .)
    /               reduce using rule 76 (classliteral -> \ .)
    :               reduce using rule 76 (classliteral -> \ .)
    ;               reduce using rule 76 (classliteral -> \ .)
    <               reduce using rule 76 (classliteral -> \ .)
    =               reduce using rule 76 (classliteral -> \ .)
    >               reduce using rule 76 (classliteral -> \ .)
    ?               reduce using rule 76 (classliteral -> \ .)
    @               reduce using rule 76 (classliteral -> \ .)
    [               reduce using rule 76 (classliteral -> \ .)
    \               reduce using rule 76 (classliteral -> \ .)
    _               reduce using rule 76 (classliteral -> \ .)
    `               reduce using rule 76 (classliteral -> \ .)
    {               reduce using rule 76 (classliteral -> \ .)
    }               reduce using rule 76 (classliteral -> \ .)
    ~               reduce using rule 76 (classliteral -> \ .)
    ESCAPED         reduce using rule 76 (classliteral -> \ .)
    ALPHA           reduce using rule 76 (classliteral -> \ .)
    DIGIT           reduce using rule 76 (classliteral -> \ .)
    OTHER           reduce using rule 76 (classliteral -> \ .)
    ]               reduce using rule 76 (classliteral -> \ .)
    |               reduce using rule 76 (classliteral -> \ .)


state 56

    (80) classliteral -> } .

    -               reduce using rule 80 (classliteral -> } .)
    !               reduce using rule 80 (classliteral -> } .)
    "               reduce using rule 80 (classliteral -> } .)
    #               reduce using rule 80 (classliteral -> } .)
    $               reduce using rule 80 (classliteral -> } .)
    %               reduce using rule 80 (classliteral -> } .)
    &               reduce using rule 80 (classliteral -> } .)
    '               reduce using rule 80 (classliteral -> } .)
    (               reduce using rule 80 (classliteral -> } .)
    )               reduce using rule 80 (classliteral -> } .)
    *               reduce using rule 80 (classliteral -> } .)
    +               reduce using rule 80 (classliteral -> } .)
    ,               reduce using rule 80 (classliteral -> } .)
    .               reduce using rule 80 (classliteral -> } .)
    /               reduce using rule 80 (classliteral -> } .)
    :               reduce using rule 80 (classliteral -> } .)
    ;               reduce using rule 80 (classliteral -> } .)
    <               reduce using rule 80 (classliteral -> } .)
    =               reduce using rule 80 (classliteral -> } .)
    >               reduce using rule 80 (classliteral -> } .)
    ?               reduce using rule 80 (classliteral -> } .)
    @               reduce using rule 80 (classliteral -> } .)
    [               reduce using rule 80 (classliteral -> } .)
    \               reduce using rule 80 (classliteral -> } .)
    _               reduce using rule 80 (classliteral -> } .)
    `               reduce using rule 80 (classliteral -> } .)
    {               reduce using rule 80 (classliteral -> } .)
    }               reduce using rule 80 (classliteral -> } .)
    ~               reduce using rule 80 (classliteral -> } .)
    ESCAPED         reduce using rule 80 (classliteral -> } .)
    ALPHA           reduce using rule 80 (classliteral -> } .)
    DIGIT           reduce using rule 80 (classliteral -> } .)
    OTHER           reduce using rule 80 (classliteral -> } .)
    ]               reduce using rule 80 (classliteral -> } .)
    |               reduce using rule 80 (classliteral -> } .)


state 57

    (56) classliteral -> # .

    -               reduce using rule 56 (classliteral -> # .)
    !               reduce using rule 56 (classliteral -> # .)
    "               reduce using rule 56 (classliteral -> # .)
    #               reduce using rule 56 (classliteral -> # .)
    $               reduce using rule 56 (classliteral -> # .)
    %               reduce using rule 56 (classliteral -> # .)
    &               reduce using rule 56 (classliteral -> # .)
    '               reduce using rule 56 (classliteral -> # .)
    (               reduce using rule 56 (classliteral -> # .)
    )               reduce using rule 56 (classliteral -> # .)
    *               reduce using rule 56 (classliteral -> # .)
    +               reduce using rule 56 (classliteral -> # .)
    ,               reduce using rule 56 (classliteral -> # .)
    .               reduce using rule 56 (classliteral -> # .)
    /               reduce using rule 56 (classliteral -> # .)
    :               reduce using rule 56 (classliteral -> # .)
    ;               reduce using rule 56 (classliteral -> # .)
    <               reduce using rule 56 (classliteral -> # .)
    =               reduce using rule 56 (classliteral -> # .)
    >               reduce using rule 56 (classliteral -> # .)
    ?               reduce using rule 56 (classliteral -> # .)
    @               reduce using rule 56 (classliteral -> # .)
    [               reduce using rule 56 (classliteral -> # .)
    \               reduce using rule 56 (classliteral -> # .)
    _               reduce using rule 56 (classliteral -> # .)
    `               reduce using rule 56 (classliteral -> # .)
    {               reduce using rule 56 (classliteral -> # .)
    }               reduce using rule 56 (classliteral -> # .)
    ~               reduce using rule 56 (classliteral -> # .)
    ESCAPED         reduce using rule 56 (classliteral -> # .)
    ALPHA           reduce using rule 56 (classliteral -> # .)
    DIGIT           reduce using rule 56 (classliteral -> # .)
    OTHER           reduce using rule 56 (classliteral -> # .)
    ]               reduce using rule 56 (classliteral -> # .)
    |               reduce using rule 56 (classliteral -> # .)


state 58

    (65) classliteral -> , .

    -               reduce using rule 65 (classliteral -> , .)
    !               reduce using rule 65 (classliteral -> , .)
    "               reduce using rule 65 (classliteral -> , .)
    #               reduce using rule 65 (classliteral -> , .)
    $               reduce using rule 65 (classliteral -> , .)
    %               reduce using rule 65 (classliteral -> , .)
    &               reduce using rule 65 (classliteral -> , .)
    '               reduce using rule 65 (classliteral -> , .)
    (               reduce using rule 65 (classliteral -> , .)
    )               reduce using rule 65 (classliteral -> , .)
    *               reduce using rule 65 (classliteral -> , .)
    +               reduce using rule 65 (classliteral -> , .)
    ,               reduce using rule 65 (classliteral -> , .)
    .               reduce using rule 65 (classliteral -> , .)
    /               reduce using rule 65 (classliteral -> , .)
    :               reduce using rule 65 (classliteral -> , .)
    ;               reduce using rule 65 (classliteral -> , .)
    <               reduce using rule 65 (classliteral -> , .)
    =               reduce using rule 65 (classliteral -> , .)
    >               reduce using rule 65 (classliteral -> , .)
    ?               reduce using rule 65 (classliteral -> , .)
    @               reduce using rule 65 (classliteral -> , .)
    [               reduce using rule 65 (classliteral -> , .)
    \               reduce using rule 65 (classliteral -> , .)
    _               reduce using rule 65 (classliteral -> , .)
    `               reduce using rule 65 (classliteral -> , .)
    {               reduce using rule 65 (classliteral -> , .)
    }               reduce using rule 65 (classliteral -> , .)
    ~               reduce using rule 65 (classliteral -> , .)
    ESCAPED         reduce using rule 65 (classliteral -> , .)
    ALPHA           reduce using rule 65 (classliteral -> , .)
    DIGIT           reduce using rule 65 (classliteral -> , .)
    OTHER           reduce using rule 65 (classliteral -> , .)
    ]               reduce using rule 65 (classliteral -> , .)
    |               reduce using rule 65 (classliteral -> , .)


state 59

    (50) baseitems -> classatom .
    (51) baseitems -> classatom . baseitems
    (50) baseitems -> . classatom
    (51) baseitems -> . classatom baseitems
    (52) classatom -> . classliteral
    (53) classatom -> . classrange
    (54) classliteral -> . !
    (55) classliteral -> . "
    (56) classliteral -> . #
    (57) classliteral -> . $
    (58) classliteral -> . %
    (59) classliteral -> . &
    (60) classliteral -> . '
    (61) classliteral -> . (
    (62) classliteral -> . )
    (63) classliteral -> . *
    (64) classliteral -> . +
    (65) classliteral -> . ,
    (66) classliteral -> . .
    (67) classliteral -> . /
    (68) classliteral -> . :
    (69) classliteral -> . ;
    (70) classliteral -> . <
    (71) classliteral -> . =
    (72) classliteral -> . >
    (73) classliteral -> . ?
    (74) classliteral -> . @
    (75) classliteral -> . [
    (76) classliteral -> . \
    (77) classliteral -> . _
    (78) classliteral -> . `
    (79) classliteral -> . {
    (80) classliteral -> . }
    (81) classliteral -> . ~
    (82) classliteral -> . literal
    (83) classrange -> . classliteral - classliteral
    (95) literal -> . ESCAPED
    (96) literal -> . ALPHA
    (97) literal -> . DIGIT
    (98) literal -> . OTHER

    ]               reduce using rule 50 (baseitems -> classatom .)
    |               reduce using rule 50 (baseitems -> classatom .)
    !               shift and go to state 88
    "               shift and go to state 72
    #               shift and go to state 57
    $               shift and go to state 66
    %               shift and go to state 61
    &               shift and go to state 87
    '               shift and go to state 80
    (               shift and go to state 70
    )               shift and go to state 81
    *               shift and go to state 67
    +               shift and go to state 89
    ,               shift and go to state 58
    .               shift and go to state 90
    /               shift and go to state 62
    :               shift and go to state 86
    ;               shift and go to state 82
    <               shift and go to state 71
    =               shift and go to state 83
    >               shift and go to state 84
    ?               shift and go to state 64
    @               shift and go to state 65
    [               shift and go to state 85
    \               shift and go to state 55
    _               shift and go to state 74
    `               shift and go to state 77
    {               shift and go to state 63
    }               shift and go to state 56
    ~               shift and go to state 79
    ESCAPED         shift and go to state 23
    ALPHA           shift and go to state 15
    DIGIT           shift and go to state 34
    OTHER           shift and go to state 14

    classatom                      shift and go to state 59
    classliteral                   shift and go to state 68
    classrange                     shift and go to state 60
    baseitems                      shift and go to state 100
    literal                        shift and go to state 78

state 60

    (53) classatom -> classrange .

    !               reduce using rule 53 (classatom -> classrange .)
    "               reduce using rule 53 (classatom -> classrange .)
    #               reduce using rule 53 (classatom -> classrange .)
    $               reduce using rule 53 (classatom -> classrange .)
    %               reduce using rule 53 (classatom -> classrange .)
    &               reduce using rule 53 (classatom -> classrange .)
    '               reduce using rule 53 (classatom -> classrange .)
    (               reduce using rule 53 (classatom -> classrange .)
    )               reduce using rule 53 (classatom -> classrange .)
    *               reduce using rule 53 (classatom -> classrange .)
    +               reduce using rule 53 (classatom -> classrange .)
    ,               reduce using rule 53 (classatom -> classrange .)
    .               reduce using rule 53 (classatom -> classrange .)
    /               reduce using rule 53 (classatom -> classrange .)
    :               reduce using rule 53 (classatom -> classrange .)
    ;               reduce using rule 53 (classatom -> classrange .)
    <               reduce using rule 53 (classatom -> classrange .)
    =               reduce using rule 53 (classatom -> classrange .)
    >               reduce using rule 53 (classatom -> classrange .)
    ?               reduce using rule 53 (classatom -> classrange .)
    @               reduce using rule 53 (classatom -> classrange .)
    [               reduce using rule 53 (classatom -> classrange .)
    \               reduce using rule 53 (classatom -> classrange .)
    _               reduce using rule 53 (classatom -> classrange .)
    `               reduce using rule 53 (classatom -> classrange .)
    {               reduce using rule 53 (classatom -> classrange .)
    }               reduce using rule 53 (classatom -> classrange .)
    ~               reduce using rule 53 (classatom -> classrange .)
    ESCAPED         reduce using rule 53 (classatom -> classrange .)
    ALPHA           reduce using rule 53 (classatom -> classrange .)
    DIGIT           reduce using rule 53 (classatom -> classrange .)
    OTHER           reduce using rule 53 (classatom -> classrange .)
    |               reduce using rule 53 (classatom -> classrange .)
    ]               reduce using rule 53 (classatom -> classrange .)


state 61

    (58) classliteral -> % .

    -               reduce using rule 58 (classliteral -> % .)
    !               reduce using rule 58 (classliteral -> % .)
    "               reduce using rule 58 (classliteral -> % .)
    #               reduce using rule 58 (classliteral -> % .)
    $               reduce using rule 58 (classliteral -> % .)
    %               reduce using rule 58 (classliteral -> % .)
    &               reduce using rule 58 (classliteral -> % .)
    '               reduce using rule 58 (classliteral -> % .)
    (               reduce using rule 58 (classliteral -> % .)
    )               reduce using rule 58 (classliteral -> % .)
    *               reduce using rule 58 (classliteral -> % .)
    +               reduce using rule 58 (classliteral -> % .)
    ,               reduce using rule 58 (classliteral -> % .)
    .               reduce using rule 58 (classliteral -> % .)
    /               reduce using rule 58 (classliteral -> % .)
    :               reduce using rule 58 (classliteral -> % .)
    ;               reduce using rule 58 (classliteral -> % .)
    <               reduce using rule 58 (classliteral -> % .)
    =               reduce using rule 58 (classliteral -> % .)
    >               reduce using rule 58 (classliteral -> % .)
    ?               reduce using rule 58 (classliteral -> % .)
    @               reduce using rule 58 (classliteral -> % .)
    [               reduce using rule 58 (classliteral -> % .)
    \               reduce using rule 58 (classliteral -> % .)
    _               reduce using rule 58 (classliteral -> % .)
    `               reduce using rule 58 (classliteral -> % .)
    {               reduce using rule 58 (classliteral -> % .)
    }               reduce using rule 58 (classliteral -> % .)
    ~               reduce using rule 58 (classliteral -> % .)
    ESCAPED         reduce using rule 58 (classliteral -> % .)
    ALPHA           reduce using rule 58 (classliteral -> % .)
    DIGIT           reduce using rule 58 (classliteral -> % .)
    OTHER           reduce using rule 58 (classliteral -> % .)
    ]               reduce using rule 58 (classliteral -> % .)
    |               reduce using rule 58 (classliteral -> % .)


state 62

    (67) classliteral -> / .

    -               reduce using rule 67 (classliteral -> / .)
    !               reduce using rule 67 (classliteral -> / .)
    "               reduce using rule 67 (classliteral -> / .)
    #               reduce using rule 67 (classliteral -> / .)
    $               reduce using rule 67 (classliteral -> / .)
    %               reduce using rule 67 (classliteral -> / .)
    &               reduce using rule 67 (classliteral -> / .)
    '               reduce using rule 67 (classliteral -> / .)
    (               reduce using rule 67 (classliteral -> / .)
    )               reduce using rule 67 (classliteral -> / .)
    *               reduce using rule 67 (classliteral -> / .)
    +               reduce using rule 67 (classliteral -> / .)
    ,               reduce using rule 67 (classliteral -> / .)
    .               reduce using rule 67 (classliteral -> / .)
    /               reduce using rule 67 (classliteral -> / .)
    :               reduce using rule 67 (classliteral -> / .)
    ;               reduce using rule 67 (classliteral -> / .)
    <               reduce using rule 67 (classliteral -> / .)
    =               reduce using rule 67 (classliteral -> / .)
    >               reduce using rule 67 (classliteral -> / .)
    ?               reduce using rule 67 (classliteral -> / .)
    @               reduce using rule 67 (classliteral -> / .)
    [               reduce using rule 67 (classliteral -> / .)
    \               reduce using rule 67 (classliteral -> / .)
    _               reduce using rule 67 (classliteral -> / .)
    `               reduce using rule 67 (classliteral -> / .)
    {               reduce using rule 67 (classliteral -> / .)
    }               reduce using rule 67 (classliteral -> / .)
    ~               reduce using rule 67 (classliteral -> / .)
    ESCAPED         reduce using rule 67 (classliteral -> / .)
    ALPHA           reduce using rule 67 (classliteral -> / .)
    DIGIT           reduce using rule 67 (classliteral -> / .)
    OTHER           reduce using rule 67 (classliteral -> / .)
    ]               reduce using rule 67 (classliteral -> / .)
    |               reduce using rule 67 (classliteral -> / .)


state 63

    (79) classliteral -> { .

    -               reduce using rule 79 (classliteral -> { .)
    !               reduce using rule 79 (classliteral -> { .)
    "               reduce using rule 79 (classliteral -> { .)
    #               reduce using rule 79 (classliteral -> { .)
    $               reduce using rule 79 (classliteral -> { .)
    %               reduce using rule 79 (classliteral -> { .)
    &               reduce using rule 79 (classliteral -> { .)
    '               reduce using rule 79 (classliteral -> { .)
    (               reduce using rule 79 (classliteral -> { .)
    )               reduce using rule 79 (classliteral -> { .)
    *               reduce using rule 79 (classliteral -> { .)
    +               reduce using rule 79 (classliteral -> { .)
    ,               reduce using rule 79 (classliteral -> { .)
    .               reduce using rule 79 (classliteral -> { .)
    /               reduce using rule 79 (classliteral -> { .)
    :               reduce using rule 79 (classliteral -> { .)
    ;               reduce using rule 79 (classliteral -> { .)
    <               reduce using rule 79 (classliteral -> { .)
    =               reduce using rule 79 (classliteral -> { .)
    >               reduce using rule 79 (classliteral -> { .)
    ?               reduce using rule 79 (classliteral -> { .)
    @               reduce using rule 79 (classliteral -> { .)
    [               reduce using rule 79 (classliteral -> { .)
    \               reduce using rule 79 (classliteral -> { .)
    _               reduce using rule 79 (classliteral -> { .)
    `               reduce using rule 79 (classliteral -> { .)
    {               reduce using rule 79 (classliteral -> { .)
    }               reduce using rule 79 (classliteral -> { .)
    ~               reduce using rule 79 (classliteral -> { .)
    ESCAPED         reduce using rule 79 (classliteral -> { .)
    ALPHA           reduce using rule 79 (classliteral -> { .)
    DIGIT           reduce using rule 79 (classliteral -> { .)
    OTHER           reduce using rule 79 (classliteral -> { .)
    ]               reduce using rule 79 (classliteral -> { .)
    |               reduce using rule 79 (classliteral -> { .)


state 64

    (73) classliteral -> ? .

    -               reduce using rule 73 (classliteral -> ? .)
    !               reduce using rule 73 (classliteral -> ? .)
    "               reduce using rule 73 (classliteral -> ? .)
    #               reduce using rule 73 (classliteral -> ? .)
    $               reduce using rule 73 (classliteral -> ? .)
    %               reduce using rule 73 (classliteral -> ? .)
    &               reduce using rule 73 (classliteral -> ? .)
    '               reduce using rule 73 (classliteral -> ? .)
    (               reduce using rule 73 (classliteral -> ? .)
    )               reduce using rule 73 (classliteral -> ? .)
    *               reduce using rule 73 (classliteral -> ? .)
    +               reduce using rule 73 (classliteral -> ? .)
    ,               reduce using rule 73 (classliteral -> ? .)
    .               reduce using rule 73 (classliteral -> ? .)
    /               reduce using rule 73 (classliteral -> ? .)
    :               reduce using rule 73 (classliteral -> ? .)
    ;               reduce using rule 73 (classliteral -> ? .)
    <               reduce using rule 73 (classliteral -> ? .)
    =               reduce using rule 73 (classliteral -> ? .)
    >               reduce using rule 73 (classliteral -> ? .)
    ?               reduce using rule 73 (classliteral -> ? .)
    @               reduce using rule 73 (classliteral -> ? .)
    [               reduce using rule 73 (classliteral -> ? .)
    \               reduce using rule 73 (classliteral -> ? .)
    _               reduce using rule 73 (classliteral -> ? .)
    `               reduce using rule 73 (classliteral -> ? .)
    {               reduce using rule 73 (classliteral -> ? .)
    }               reduce using rule 73 (classliteral -> ? .)
    ~               reduce using rule 73 (classliteral -> ? .)
    ESCAPED         reduce using rule 73 (classliteral -> ? .)
    ALPHA           reduce using rule 73 (classliteral -> ? .)
    DIGIT           reduce using rule 73 (classliteral -> ? .)
    OTHER           reduce using rule 73 (classliteral -> ? .)
    ]               reduce using rule 73 (classliteral -> ? .)
    |               reduce using rule 73 (classliteral -> ? .)


state 65

    (74) classliteral -> @ .

    -               reduce using rule 74 (classliteral -> @ .)
    !               reduce using rule 74 (classliteral -> @ .)
    "               reduce using rule 74 (classliteral -> @ .)
    #               reduce using rule 74 (classliteral -> @ .)
    $               reduce using rule 74 (classliteral -> @ .)
    %               reduce using rule 74 (classliteral -> @ .)
    &               reduce using rule 74 (classliteral -> @ .)
    '               reduce using rule 74 (classliteral -> @ .)
    (               reduce using rule 74 (classliteral -> @ .)
    )               reduce using rule 74 (classliteral -> @ .)
    *               reduce using rule 74 (classliteral -> @ .)
    +               reduce using rule 74 (classliteral -> @ .)
    ,               reduce using rule 74 (classliteral -> @ .)
    .               reduce using rule 74 (classliteral -> @ .)
    /               reduce using rule 74 (classliteral -> @ .)
    :               reduce using rule 74 (classliteral -> @ .)
    ;               reduce using rule 74 (classliteral -> @ .)
    <               reduce using rule 74 (classliteral -> @ .)
    =               reduce using rule 74 (classliteral -> @ .)
    >               reduce using rule 74 (classliteral -> @ .)
    ?               reduce using rule 74 (classliteral -> @ .)
    @               reduce using rule 74 (classliteral -> @ .)
    [               reduce using rule 74 (classliteral -> @ .)
    \               reduce using rule 74 (classliteral -> @ .)
    _               reduce using rule 74 (classliteral -> @ .)
    `               reduce using rule 74 (classliteral -> @ .)
    {               reduce using rule 74 (classliteral -> @ .)
    }               reduce using rule 74 (classliteral -> @ .)
    ~               reduce using rule 74 (classliteral -> @ .)
    ESCAPED         reduce using rule 74 (classliteral -> @ .)
    ALPHA           reduce using rule 74 (classliteral -> @ .)
    DIGIT           reduce using rule 74 (classliteral -> @ .)
    OTHER           reduce using rule 74 (classliteral -> @ .)
    ]               reduce using rule 74 (classliteral -> @ .)
    |               reduce using rule 74 (classliteral -> @ .)


state 66

    (57) classliteral -> $ .

    -               reduce using rule 57 (classliteral -> $ .)
    !               reduce using rule 57 (classliteral -> $ .)
    "               reduce using rule 57 (classliteral -> $ .)
    #               reduce using rule 57 (classliteral -> $ .)
    $               reduce using rule 57 (classliteral -> $ .)
    %               reduce using rule 57 (classliteral -> $ .)
    &               reduce using rule 57 (classliteral -> $ .)
    '               reduce using rule 57 (classliteral -> $ .)
    (               reduce using rule 57 (classliteral -> $ .)
    )               reduce using rule 57 (classliteral -> $ .)
    *               reduce using rule 57 (classliteral -> $ .)
    +               reduce using rule 57 (classliteral -> $ .)
    ,               reduce using rule 57 (classliteral -> $ .)
    .               reduce using rule 57 (classliteral -> $ .)
    /               reduce using rule 57 (classliteral -> $ .)
    :               reduce using rule 57 (classliteral -> $ .)
    ;               reduce using rule 57 (classliteral -> $ .)
    <               reduce using rule 57 (classliteral -> $ .)
    =               reduce using rule 57 (classliteral -> $ .)
    >               reduce using rule 57 (classliteral -> $ .)
    ?               reduce using rule 57 (classliteral -> $ .)
    @               reduce using rule 57 (classliteral -> $ .)
    [               reduce using rule 57 (classliteral -> $ .)
    \               reduce using rule 57 (classliteral -> $ .)
    _               reduce using rule 57 (classliteral -> $ .)
    `               reduce using rule 57 (classliteral -> $ .)
    {               reduce using rule 57 (classliteral -> $ .)
    }               reduce using rule 57 (classliteral -> $ .)
    ~               reduce using rule 57 (classliteral -> $ .)
    ESCAPED         reduce using rule 57 (classliteral -> $ .)
    ALPHA           reduce using rule 57 (classliteral -> $ .)
    DIGIT           reduce using rule 57 (classliteral -> $ .)
    OTHER           reduce using rule 57 (classliteral -> $ .)
    ]               reduce using rule 57 (classliteral -> $ .)
    |               reduce using rule 57 (classliteral -> $ .)


state 67

    (63) classliteral -> * .

    -               reduce using rule 63 (classliteral -> * .)
    !               reduce using rule 63 (classliteral -> * .)
    "               reduce using rule 63 (classliteral -> * .)
    #               reduce using rule 63 (classliteral -> * .)
    $               reduce using rule 63 (classliteral -> * .)
    %               reduce using rule 63 (classliteral -> * .)
    &               reduce using rule 63 (classliteral -> * .)
    '               reduce using rule 63 (classliteral -> * .)
    (               reduce using rule 63 (classliteral -> * .)
    )               reduce using rule 63 (classliteral -> * .)
    *               reduce using rule 63 (classliteral -> * .)
    +               reduce using rule 63 (classliteral -> * .)
    ,               reduce using rule 63 (classliteral -> * .)
    .               reduce using rule 63 (classliteral -> * .)
    /               reduce using rule 63 (classliteral -> * .)
    :               reduce using rule 63 (classliteral -> * .)
    ;               reduce using rule 63 (classliteral -> * .)
    <               reduce using rule 63 (classliteral -> * .)
    =               reduce using rule 63 (classliteral -> * .)
    >               reduce using rule 63 (classliteral -> * .)
    ?               reduce using rule 63 (classliteral -> * .)
    @               reduce using rule 63 (classliteral -> * .)
    [               reduce using rule 63 (classliteral -> * .)
    \               reduce using rule 63 (classliteral -> * .)
    _               reduce using rule 63 (classliteral -> * .)
    `               reduce using rule 63 (classliteral -> * .)
    {               reduce using rule 63 (classliteral -> * .)
    }               reduce using rule 63 (classliteral -> * .)
    ~               reduce using rule 63 (classliteral -> * .)
    ESCAPED         reduce using rule 63 (classliteral -> * .)
    ALPHA           reduce using rule 63 (classliteral -> * .)
    DIGIT           reduce using rule 63 (classliteral -> * .)
    OTHER           reduce using rule 63 (classliteral -> * .)
    ]               reduce using rule 63 (classliteral -> * .)
    |               reduce using rule 63 (classliteral -> * .)


state 68

    (52) classatom -> classliteral .
    (83) classrange -> classliteral . - classliteral

    !               reduce using rule 52 (classatom -> classliteral .)
    "               reduce using rule 52 (classatom -> classliteral .)
    #               reduce using rule 52 (classatom -> classliteral .)
    $               reduce using rule 52 (classatom -> classliteral .)
    %               reduce using rule 52 (classatom -> classliteral .)
    &               reduce using rule 52 (classatom -> classliteral .)
    '               reduce using rule 52 (classatom -> classliteral .)
    (               reduce using rule 52 (classatom -> classliteral .)
    )               reduce using rule 52 (classatom -> classliteral .)
    *               reduce using rule 52 (classatom -> classliteral .)
    +               reduce using rule 52 (classatom -> classliteral .)
    ,               reduce using rule 52 (classatom -> classliteral .)
    .               reduce using rule 52 (classatom -> classliteral .)
    /               reduce using rule 52 (classatom -> classliteral .)
    :               reduce using rule 52 (classatom -> classliteral .)
    ;               reduce using rule 52 (classatom -> classliteral .)
    <               reduce using rule 52 (classatom -> classliteral .)
    =               reduce using rule 52 (classatom -> classliteral .)
    >               reduce using rule 52 (classatom -> classliteral .)
    ?               reduce using rule 52 (classatom -> classliteral .)
    @               reduce using rule 52 (classatom -> classliteral .)
    [               reduce using rule 52 (classatom -> classliteral .)
    \               reduce using rule 52 (classatom -> classliteral .)
    _               reduce using rule 52 (classatom -> classliteral .)
    `               reduce using rule 52 (classatom -> classliteral .)
    {               reduce using rule 52 (classatom -> classliteral .)
    }               reduce using rule 52 (classatom -> classliteral .)
    ~               reduce using rule 52 (classatom -> classliteral .)
    ESCAPED         reduce using rule 52 (classatom -> classliteral .)
    ALPHA           reduce using rule 52 (classatom -> classliteral .)
    DIGIT           reduce using rule 52 (classatom -> classliteral .)
    OTHER           reduce using rule 52 (classatom -> classliteral .)
    |               reduce using rule 52 (classatom -> classliteral .)
    ]               reduce using rule 52 (classatom -> classliteral .)
    -               shift and go to state 101


state 69

    (48) classitems2 -> baseitems .
    (49) classitems2 -> baseitems . | baseitems

    ]               reduce using rule 48 (classitems2 -> baseitems .)
    |               shift and go to state 102


state 70

    (61) classliteral -> ( .

    -               reduce using rule 61 (classliteral -> ( .)
    !               reduce using rule 61 (classliteral -> ( .)
    "               reduce using rule 61 (classliteral -> ( .)
    #               reduce using rule 61 (classliteral -> ( .)
    $               reduce using rule 61 (classliteral -> ( .)
    %               reduce using rule 61 (classliteral -> ( .)
    &               reduce using rule 61 (classliteral -> ( .)
    '               reduce using rule 61 (classliteral -> ( .)
    (               reduce using rule 61 (classliteral -> ( .)
    )               reduce using rule 61 (classliteral -> ( .)
    *               reduce using rule 61 (classliteral -> ( .)
    +               reduce using rule 61 (classliteral -> ( .)
    ,               reduce using rule 61 (classliteral -> ( .)
    .               reduce using rule 61 (classliteral -> ( .)
    /               reduce using rule 61 (classliteral -> ( .)
    :               reduce using rule 61 (classliteral -> ( .)
    ;               reduce using rule 61 (classliteral -> ( .)
    <               reduce using rule 61 (classliteral -> ( .)
    =               reduce using rule 61 (classliteral -> ( .)
    >               reduce using rule 61 (classliteral -> ( .)
    ?               reduce using rule 61 (classliteral -> ( .)
    @               reduce using rule 61 (classliteral -> ( .)
    [               reduce using rule 61 (classliteral -> ( .)
    \               reduce using rule 61 (classliteral -> ( .)
    _               reduce using rule 61 (classliteral -> ( .)
    `               reduce using rule 61 (classliteral -> ( .)
    {               reduce using rule 61 (classliteral -> ( .)
    }               reduce using rule 61 (classliteral -> ( .)
    ~               reduce using rule 61 (classliteral -> ( .)
    ESCAPED         reduce using rule 61 (classliteral -> ( .)
    ALPHA           reduce using rule 61 (classliteral -> ( .)
    DIGIT           reduce using rule 61 (classliteral -> ( .)
    OTHER           reduce using rule 61 (classliteral -> ( .)
    ]               reduce using rule 61 (classliteral -> ( .)
    |               reduce using rule 61 (classliteral -> ( .)


state 71

    (70) classliteral -> < .

    -               reduce using rule 70 (classliteral -> < .)
    !               reduce using rule 70 (classliteral -> < .)
    "               reduce using rule 70 (classliteral -> < .)
    #               reduce using rule 70 (classliteral -> < .)
    $               reduce using rule 70 (classliteral -> < .)
    %               reduce using rule 70 (classliteral -> < .)
    &               reduce using rule 70 (classliteral -> < .)
    '               reduce using rule 70 (classliteral -> < .)
    (               reduce using rule 70 (classliteral -> < .)
    )               reduce using rule 70 (classliteral -> < .)
    *               reduce using rule 70 (classliteral -> < .)
    +               reduce using rule 70 (classliteral -> < .)
    ,               reduce using rule 70 (classliteral -> < .)
    .               reduce using rule 70 (classliteral -> < .)
    /               reduce using rule 70 (classliteral -> < .)
    :               reduce using rule 70 (classliteral -> < .)
    ;               reduce using rule 70 (classliteral -> < .)
    <               reduce using rule 70 (classliteral -> < .)
    =               reduce using rule 70 (classliteral -> < .)
    >               reduce using rule 70 (classliteral -> < .)
    ?               reduce using rule 70 (classliteral -> < .)
    @               reduce using rule 70 (classliteral -> < .)
    [               reduce using rule 70 (classliteral -> < .)
    \               reduce using rule 70 (classliteral -> < .)
    _               reduce using rule 70 (classliteral -> < .)
    `               reduce using rule 70 (classliteral -> < .)
    {               reduce using rule 70 (classliteral -> < .)
    }               reduce using rule 70 (classliteral -> < .)
    ~               reduce using rule 70 (classliteral -> < .)
    ESCAPED         reduce using rule 70 (classliteral -> < .)
    ALPHA           reduce using rule 70 (classliteral -> < .)
    DIGIT           reduce using rule 70 (classliteral -> < .)
    OTHER           reduce using rule 70 (classliteral -> < .)
    ]               reduce using rule 70 (classliteral -> < .)
    |               reduce using rule 70 (classliteral -> < .)


state 72

    (55) classliteral -> " .

    -               reduce using rule 55 (classliteral -> " .)
    !               reduce using rule 55 (classliteral -> " .)
    "               reduce using rule 55 (classliteral -> " .)
    #               reduce using rule 55 (classliteral -> " .)
    $               reduce using rule 55 (classliteral -> " .)
    %               reduce using rule 55 (classliteral -> " .)
    &               reduce using rule 55 (classliteral -> " .)
    '               reduce using rule 55 (classliteral -> " .)
    (               reduce using rule 55 (classliteral -> " .)
    )               reduce using rule 55 (classliteral -> " .)
    *               reduce using rule 55 (classliteral -> " .)
    +               reduce using rule 55 (classliteral -> " .)
    ,               reduce using rule 55 (classliteral -> " .)
    .               reduce using rule 55 (classliteral -> " .)
    /               reduce using rule 55 (classliteral -> " .)
    :               reduce using rule 55 (classliteral -> " .)
    ;               reduce using rule 55 (classliteral -> " .)
    <               reduce using rule 55 (classliteral -> " .)
    =               reduce using rule 55 (classliteral -> " .)
    >               reduce using rule 55 (classliteral -> " .)
    ?               reduce using rule 55 (classliteral -> " .)
    @               reduce using rule 55 (classliteral -> " .)
    [               reduce using rule 55 (classliteral -> " .)
    \               reduce using rule 55 (classliteral -> " .)
    _               reduce using rule 55 (classliteral -> " .)
    `               reduce using rule 55 (classliteral -> " .)
    {               reduce using rule 55 (classliteral -> " .)
    }               reduce using rule 55 (classliteral -> " .)
    ~               reduce using rule 55 (classliteral -> " .)
    ESCAPED         reduce using rule 55 (classliteral -> " .)
    ALPHA           reduce using rule 55 (classliteral -> " .)
    DIGIT           reduce using rule 55 (classliteral -> " .)
    OTHER           reduce using rule 55 (classliteral -> " .)
    ]               reduce using rule 55 (classliteral -> " .)
    |               reduce using rule 55 (classliteral -> " .)


state 73

    (47) classitems -> classitems2 .

    ]               reduce using rule 47 (classitems -> classitems2 .)


state 74

    (77) classliteral -> _ .

    -               reduce using rule 77 (classliteral -> _ .)
    !               reduce using rule 77 (classliteral -> _ .)
    "               reduce using rule 77 (classliteral -> _ .)
    #               reduce using rule 77 (classliteral -> _ .)
    $               reduce using rule 77 (classliteral -> _ .)
    %               reduce using rule 77 (classliteral -> _ .)
    &               reduce using rule 77 (classliteral -> _ .)
    '               reduce using rule 77 (classliteral -> _ .)
    (               reduce using rule 77 (classliteral -> _ .)
    )               reduce using rule 77 (classliteral -> _ .)
    *               reduce using rule 77 (classliteral -> _ .)
    +               reduce using rule 77 (classliteral -> _ .)
    ,               reduce using rule 77 (classliteral -> _ .)
    .               reduce using rule 77 (classliteral -> _ .)
    /               reduce using rule 77 (classliteral -> _ .)
    :               reduce using rule 77 (classliteral -> _ .)
    ;               reduce using rule 77 (classliteral -> _ .)
    <               reduce using rule 77 (classliteral -> _ .)
    =               reduce using rule 77 (classliteral -> _ .)
    >               reduce using rule 77 (classliteral -> _ .)
    ?               reduce using rule 77 (classliteral -> _ .)
    @               reduce using rule 77 (classliteral -> _ .)
    [               reduce using rule 77 (classliteral -> _ .)
    \               reduce using rule 77 (classliteral -> _ .)
    _               reduce using rule 77 (classliteral -> _ .)
    `               reduce using rule 77 (classliteral -> _ .)
    {               reduce using rule 77 (classliteral -> _ .)
    }               reduce using rule 77 (classliteral -> _ .)
    ~               reduce using rule 77 (classliteral -> _ .)
    ESCAPED         reduce using rule 77 (classliteral -> _ .)
    ALPHA           reduce using rule 77 (classliteral -> _ .)
    DIGIT           reduce using rule 77 (classliteral -> _ .)
    OTHER           reduce using rule 77 (classliteral -> _ .)
    ]               reduce using rule 77 (classliteral -> _ .)
    |               reduce using rule 77 (classliteral -> _ .)


state 75

    (45) charclass -> [ classitems . ]

    ]               shift and go to state 103


state 76

    (46) classitems -> ^ . baseitems
    (50) baseitems -> . classatom
    (51) baseitems -> . classatom baseitems
    (52) classatom -> . classliteral
    (53) classatom -> . classrange
    (54) classliteral -> . !
    (55) classliteral -> . "
    (56) classliteral -> . #
    (57) classliteral -> . $
    (58) classliteral -> . %
    (59) classliteral -> . &
    (60) classliteral -> . '
    (61) classliteral -> . (
    (62) classliteral -> . )
    (63) classliteral -> . *
    (64) classliteral -> . +
    (65) classliteral -> . ,
    (66) classliteral -> . .
    (67) classliteral -> . /
    (68) classliteral -> . :
    (69) classliteral -> . ;
    (70) classliteral -> . <
    (71) classliteral -> . =
    (72) classliteral -> . >
    (73) classliteral -> . ?
    (74) classliteral -> . @
    (75) classliteral -> . [
    (76) classliteral -> . \
    (77) classliteral -> . _
    (78) classliteral -> . `
    (79) classliteral -> . {
    (80) classliteral -> . }
    (81) classliteral -> . ~
    (82) classliteral -> . literal
    (83) classrange -> . classliteral - classliteral
    (95) literal -> . ESCAPED
    (96) literal -> . ALPHA
    (97) literal -> . DIGIT
    (98) literal -> . OTHER

    !               shift and go to state 88
    "               shift and go to state 72
    #               shift and go to state 57
    $               shift and go to state 66
    %               shift and go to state 61
    &               shift and go to state 87
    '               shift and go to state 80
    (               shift and go to state 70
    )               shift and go to state 81
    *               shift and go to state 67
    +               shift and go to state 89
    ,               shift and go to state 58
    .               shift and go to state 90
    /               shift and go to state 62
    :               shift and go to state 86
    ;               shift and go to state 82
    <               shift and go to state 71
    =               shift and go to state 83
    >               shift and go to state 84
    ?               shift and go to state 64
    @               shift and go to state 65
    [               shift and go to state 85
    \               shift and go to state 55
    _               shift and go to state 74
    `               shift and go to state 77
    {               shift and go to state 63
    }               shift and go to state 56
    ~               shift and go to state 79
    ESCAPED         shift and go to state 23
    ALPHA           shift and go to state 15
    DIGIT           shift and go to state 34
    OTHER           shift and go to state 14

    classatom                      shift and go to state 59
    classliteral                   shift and go to state 68
    classrange                     shift and go to state 60
    baseitems                      shift and go to state 104
    literal                        shift and go to state 78

state 77

    (78) classliteral -> ` .

    -               reduce using rule 78 (classliteral -> ` .)
    !               reduce using rule 78 (classliteral -> ` .)
    "               reduce using rule 78 (classliteral -> ` .)
    #               reduce using rule 78 (classliteral -> ` .)
    $               reduce using rule 78 (classliteral -> ` .)
    %               reduce using rule 78 (classliteral -> ` .)
    &               reduce using rule 78 (classliteral -> ` .)
    '               reduce using rule 78 (classliteral -> ` .)
    (               reduce using rule 78 (classliteral -> ` .)
    )               reduce using rule 78 (classliteral -> ` .)
    *               reduce using rule 78 (classliteral -> ` .)
    +               reduce using rule 78 (classliteral -> ` .)
    ,               reduce using rule 78 (classliteral -> ` .)
    .               reduce using rule 78 (classliteral -> ` .)
    /               reduce using rule 78 (classliteral -> ` .)
    :               reduce using rule 78 (classliteral -> ` .)
    ;               reduce using rule 78 (classliteral -> ` .)
    <               reduce using rule 78 (classliteral -> ` .)
    =               reduce using rule 78 (classliteral -> ` .)
    >               reduce using rule 78 (classliteral -> ` .)
    ?               reduce using rule 78 (classliteral -> ` .)
    @               reduce using rule 78 (classliteral -> ` .)
    [               reduce using rule 78 (classliteral -> ` .)
    \               reduce using rule 78 (classliteral -> ` .)
    _               reduce using rule 78 (classliteral -> ` .)
    `               reduce using rule 78 (classliteral -> ` .)
    {               reduce using rule 78 (classliteral -> ` .)
    }               reduce using rule 78 (classliteral -> ` .)
    ~               reduce using rule 78 (classliteral -> ` .)
    ESCAPED         reduce using rule 78 (classliteral -> ` .)
    ALPHA           reduce using rule 78 (classliteral -> ` .)
    DIGIT           reduce using rule 78 (classliteral -> ` .)
    OTHER           reduce using rule 78 (classliteral -> ` .)
    ]               reduce using rule 78 (classliteral -> ` .)
    |               reduce using rule 78 (classliteral -> ` .)


state 78

    (82) classliteral -> literal .

    -               reduce using rule 82 (classliteral -> literal .)
    !               reduce using rule 82 (classliteral -> literal .)
    "               reduce using rule 82 (classliteral -> literal .)
    #               reduce using rule 82 (classliteral -> literal .)
    $               reduce using rule 82 (classliteral -> literal .)
    %               reduce using rule 82 (classliteral -> literal .)
    &               reduce using rule 82 (classliteral -> literal .)
    '               reduce using rule 82 (classliteral -> literal .)
    (               reduce using rule 82 (classliteral -> literal .)
    )               reduce using rule 82 (classliteral -> literal .)
    *               reduce using rule 82 (classliteral -> literal .)
    +               reduce using rule 82 (classliteral -> literal .)
    ,               reduce using rule 82 (classliteral -> literal .)
    .               reduce using rule 82 (classliteral -> literal .)
    /               reduce using rule 82 (classliteral -> literal .)
    :               reduce using rule 82 (classliteral -> literal .)
    ;               reduce using rule 82 (classliteral -> literal .)
    <               reduce using rule 82 (classliteral -> literal .)
    =               reduce using rule 82 (classliteral -> literal .)
    >               reduce using rule 82 (classliteral -> literal .)
    ?               reduce using rule 82 (classliteral -> literal .)
    @               reduce using rule 82 (classliteral -> literal .)
    [               reduce using rule 82 (classliteral -> literal .)
    \               reduce using rule 82 (classliteral -> literal .)
    _               reduce using rule 82 (classliteral -> literal .)
    `               reduce using rule 82 (classliteral -> literal .)
    {               reduce using rule 82 (classliteral -> literal .)
    }               reduce using rule 82 (classliteral -> literal .)
    ~               reduce using rule 82 (classliteral -> literal .)
    ESCAPED         reduce using rule 82 (classliteral -> literal .)
    ALPHA           reduce using rule 82 (classliteral -> literal .)
    DIGIT           reduce using rule 82 (classliteral -> literal .)
    OTHER           reduce using rule 82 (classliteral -> literal .)
    ]               reduce using rule 82 (classliteral -> literal .)
    |               reduce using rule 82 (classliteral -> literal .)


state 79

    (81) classliteral -> ~ .

    -               reduce using rule 81 (classliteral -> ~ .)
    !               reduce using rule 81 (classliteral -> ~ .)
    "               reduce using rule 81 (classliteral -> ~ .)
    #               reduce using rule 81 (classliteral -> ~ .)
    $               reduce using rule 81 (classliteral -> ~ .)
    %               reduce using rule 81 (classliteral -> ~ .)
    &               reduce using rule 81 (classliteral -> ~ .)
    '               reduce using rule 81 (classliteral -> ~ .)
    (               reduce using rule 81 (classliteral -> ~ .)
    )               reduce using rule 81 (classliteral -> ~ .)
    *               reduce using rule 81 (classliteral -> ~ .)
    +               reduce using rule 81 (classliteral -> ~ .)
    ,               reduce using rule 81 (classliteral -> ~ .)
    .               reduce using rule 81 (classliteral -> ~ .)
    /               reduce using rule 81 (classliteral -> ~ .)
    :               reduce using rule 81 (classliteral -> ~ .)
    ;               reduce using rule 81 (classliteral -> ~ .)
    <               reduce using rule 81 (classliteral -> ~ .)
    =               reduce using rule 81 (classliteral -> ~ .)
    >               reduce using rule 81 (classliteral -> ~ .)
    ?               reduce using rule 81 (classliteral -> ~ .)
    @               reduce using rule 81 (classliteral -> ~ .)
    [               reduce using rule 81 (classliteral -> ~ .)
    \               reduce using rule 81 (classliteral -> ~ .)
    _               reduce using rule 81 (classliteral -> ~ .)
    `               reduce using rule 81 (classliteral -> ~ .)
    {               reduce using rule 81 (classliteral -> ~ .)
    }               reduce using rule 81 (classliteral -> ~ .)
    ~               reduce using rule 81 (classliteral -> ~ .)
    ESCAPED         reduce using rule 81 (classliteral -> ~ .)
    ALPHA           reduce using rule 81 (classliteral -> ~ .)
    DIGIT           reduce using rule 81 (classliteral -> ~ .)
    OTHER           reduce using rule 81 (classliteral -> ~ .)
    ]               reduce using rule 81 (classliteral -> ~ .)
    |               reduce using rule 81 (classliteral -> ~ .)


state 80

    (60) classliteral -> ' .

    -               reduce using rule 60 (classliteral -> ' .)
    !               reduce using rule 60 (classliteral -> ' .)
    "               reduce using rule 60 (classliteral -> ' .)
    #               reduce using rule 60 (classliteral -> ' .)
    $               reduce using rule 60 (classliteral -> ' .)
    %               reduce using rule 60 (classliteral -> ' .)
    &               reduce using rule 60 (classliteral -> ' .)
    '               reduce using rule 60 (classliteral -> ' .)
    (               reduce using rule 60 (classliteral -> ' .)
    )               reduce using rule 60 (classliteral -> ' .)
    *               reduce using rule 60 (classliteral -> ' .)
    +               reduce using rule 60 (classliteral -> ' .)
    ,               reduce using rule 60 (classliteral -> ' .)
    .               reduce using rule 60 (classliteral -> ' .)
    /               reduce using rule 60 (classliteral -> ' .)
    :               reduce using rule 60 (classliteral -> ' .)
    ;               reduce using rule 60 (classliteral -> ' .)
    <               reduce using rule 60 (classliteral -> ' .)
    =               reduce using rule 60 (classliteral -> ' .)
    >               reduce using rule 60 (classliteral -> ' .)
    ?               reduce using rule 60 (classliteral -> ' .)
    @               reduce using rule 60 (classliteral -> ' .)
    [               reduce using rule 60 (classliteral -> ' .)
    \               reduce using rule 60 (classliteral -> ' .)
    _               reduce using rule 60 (classliteral -> ' .)
    `               reduce using rule 60 (classliteral -> ' .)
    {               reduce using rule 60 (classliteral -> ' .)
    }               reduce using rule 60 (classliteral -> ' .)
    ~               reduce using rule 60 (classliteral -> ' .)
    ESCAPED         reduce using rule 60 (classliteral -> ' .)
    ALPHA           reduce using rule 60 (classliteral -> ' .)
    DIGIT           reduce using rule 60 (classliteral -> ' .)
    OTHER           reduce using rule 60 (classliteral -> ' .)
    ]               reduce using rule 60 (classliteral -> ' .)
    |               reduce using rule 60 (classliteral -> ' .)


state 81

    (62) classliteral -> ) .

    -               reduce using rule 62 (classliteral -> ) .)
    !               reduce using rule 62 (classliteral -> ) .)
    "               reduce using rule 62 (classliteral -> ) .)
    #               reduce using rule 62 (classliteral -> ) .)
    $               reduce using rule 62 (classliteral -> ) .)
    %               reduce using rule 62 (classliteral -> ) .)
    &               reduce using rule 62 (classliteral -> ) .)
    '               reduce using rule 62 (classliteral -> ) .)
    (               reduce using rule 62 (classliteral -> ) .)
    )               reduce using rule 62 (classliteral -> ) .)
    *               reduce using rule 62 (classliteral -> ) .)
    +               reduce using rule 62 (classliteral -> ) .)
    ,               reduce using rule 62 (classliteral -> ) .)
    .               reduce using rule 62 (classliteral -> ) .)
    /               reduce using rule 62 (classliteral -> ) .)
    :               reduce using rule 62 (classliteral -> ) .)
    ;               reduce using rule 62 (classliteral -> ) .)
    <               reduce using rule 62 (classliteral -> ) .)
    =               reduce using rule 62 (classliteral -> ) .)
    >               reduce using rule 62 (classliteral -> ) .)
    ?               reduce using rule 62 (classliteral -> ) .)
    @               reduce using rule 62 (classliteral -> ) .)
    [               reduce using rule 62 (classliteral -> ) .)
    \               reduce using rule 62 (classliteral -> ) .)
    _               reduce using rule 62 (classliteral -> ) .)
    `               reduce using rule 62 (classliteral -> ) .)
    {               reduce using rule 62 (classliteral -> ) .)
    }               reduce using rule 62 (classliteral -> ) .)
    ~               reduce using rule 62 (classliteral -> ) .)
    ESCAPED         reduce using rule 62 (classliteral -> ) .)
    ALPHA           reduce using rule 62 (classliteral -> ) .)
    DIGIT           reduce using rule 62 (classliteral -> ) .)
    OTHER           reduce using rule 62 (classliteral -> ) .)
    ]               reduce using rule 62 (classliteral -> ) .)
    |               reduce using rule 62 (classliteral -> ) .)


state 82

    (69) classliteral -> ; .

    -               reduce using rule 69 (classliteral -> ; .)
    !               reduce using rule 69 (classliteral -> ; .)
    "               reduce using rule 69 (classliteral -> ; .)
    #               reduce using rule 69 (classliteral -> ; .)
    $               reduce using rule 69 (classliteral -> ; .)
    %               reduce using rule 69 (classliteral -> ; .)
    &               reduce using rule 69 (classliteral -> ; .)
    '               reduce using rule 69 (classliteral -> ; .)
    (               reduce using rule 69 (classliteral -> ; .)
    )               reduce using rule 69 (classliteral -> ; .)
    *               reduce using rule 69 (classliteral -> ; .)
    +               reduce using rule 69 (classliteral -> ; .)
    ,               reduce using rule 69 (classliteral -> ; .)
    .               reduce using rule 69 (classliteral -> ; .)
    /               reduce using rule 69 (classliteral -> ; .)
    :               reduce using rule 69 (classliteral -> ; .)
    ;               reduce using rule 69 (classliteral -> ; .)
    <               reduce using rule 69 (classliteral -> ; .)
    =               reduce using rule 69 (classliteral -> ; .)
    >               reduce using rule 69 (classliteral -> ; .)
    ?               reduce using rule 69 (classliteral -> ; .)
    @               reduce using rule 69 (classliteral -> ; .)
    [               reduce using rule 69 (classliteral -> ; .)
    \               reduce using rule 69 (classliteral -> ; .)
    _               reduce using rule 69 (classliteral -> ; .)
    `               reduce using rule 69 (classliteral -> ; .)
    {               reduce using rule 69 (classliteral -> ; .)
    }               reduce using rule 69 (classliteral -> ; .)
    ~               reduce using rule 69 (classliteral -> ; .)
    ESCAPED         reduce using rule 69 (classliteral -> ; .)
    ALPHA           reduce using rule 69 (classliteral -> ; .)
    DIGIT           reduce using rule 69 (classliteral -> ; .)
    OTHER           reduce using rule 69 (classliteral -> ; .)
    ]               reduce using rule 69 (classliteral -> ; .)
    |               reduce using rule 69 (classliteral -> ; .)


state 83

    (71) classliteral -> = .

    -               reduce using rule 71 (classliteral -> = .)
    !               reduce using rule 71 (classliteral -> = .)
    "               reduce using rule 71 (classliteral -> = .)
    #               reduce using rule 71 (classliteral -> = .)
    $               reduce using rule 71 (classliteral -> = .)
    %               reduce using rule 71 (classliteral -> = .)
    &               reduce using rule 71 (classliteral -> = .)
    '               reduce using rule 71 (classliteral -> = .)
    (               reduce using rule 71 (classliteral -> = .)
    )               reduce using rule 71 (classliteral -> = .)
    *               reduce using rule 71 (classliteral -> = .)
    +               reduce using rule 71 (classliteral -> = .)
    ,               reduce using rule 71 (classliteral -> = .)
    .               reduce using rule 71 (classliteral -> = .)
    /               reduce using rule 71 (classliteral -> = .)
    :               reduce using rule 71 (classliteral -> = .)
    ;               reduce using rule 71 (classliteral -> = .)
    <               reduce using rule 71 (classliteral -> = .)
    =               reduce using rule 71 (classliteral -> = .)
    >               reduce using rule 71 (classliteral -> = .)
    ?               reduce using rule 71 (classliteral -> = .)
    @               reduce using rule 71 (classliteral -> = .)
    [               reduce using rule 71 (classliteral -> = .)
    \               reduce using rule 71 (classliteral -> = .)
    _               reduce using rule 71 (classliteral -> = .)
    `               reduce using rule 71 (classliteral -> = .)
    {               reduce using rule 71 (classliteral -> = .)
    }               reduce using rule 71 (classliteral -> = .)
    ~               reduce using rule 71 (classliteral -> = .)
    ESCAPED         reduce using rule 71 (classliteral -> = .)
    ALPHA           reduce using rule 71 (classliteral -> = .)
    DIGIT           reduce using rule 71 (classliteral -> = .)
    OTHER           reduce using rule 71 (classliteral -> = .)
    ]               reduce using rule 71 (classliteral -> = .)
    |               reduce using rule 71 (classliteral -> = .)


state 84

    (72) classliteral -> > .

    -               reduce using rule 72 (classliteral -> > .)
    !               reduce using rule 72 (classliteral -> > .)
    "               reduce using rule 72 (classliteral -> > .)
    #               reduce using rule 72 (classliteral -> > .)
    $               reduce using rule 72 (classliteral -> > .)
    %               reduce using rule 72 (classliteral -> > .)
    &               reduce using rule 72 (classliteral -> > .)
    '               reduce using rule 72 (classliteral -> > .)
    (               reduce using rule 72 (classliteral -> > .)
    )               reduce using rule 72 (classliteral -> > .)
    *               reduce using rule 72 (classliteral -> > .)
    +               reduce using rule 72 (classliteral -> > .)
    ,               reduce using rule 72 (classliteral -> > .)
    .               reduce using rule 72 (classliteral -> > .)
    /               reduce using rule 72 (classliteral -> > .)
    :               reduce using rule 72 (classliteral -> > .)
    ;               reduce using rule 72 (classliteral -> > .)
    <               reduce using rule 72 (classliteral -> > .)
    =               reduce using rule 72 (classliteral -> > .)
    >               reduce using rule 72 (classliteral -> > .)
    ?               reduce using rule 72 (classliteral -> > .)
    @               reduce using rule 72 (classliteral -> > .)
    [               reduce using rule 72 (classliteral -> > .)
    \               reduce using rule 72 (classliteral -> > .)
    _               reduce using rule 72 (classliteral -> > .)
    `               reduce using rule 72 (classliteral -> > .)
    {               reduce using rule 72 (classliteral -> > .)
    }               reduce using rule 72 (classliteral -> > .)
    ~               reduce using rule 72 (classliteral -> > .)
    ESCAPED         reduce using rule 72 (classliteral -> > .)
    ALPHA           reduce using rule 72 (classliteral -> > .)
    DIGIT           reduce using rule 72 (classliteral -> > .)
    OTHER           reduce using rule 72 (classliteral -> > .)
    ]               reduce using rule 72 (classliteral -> > .)
    |               reduce using rule 72 (classliteral -> > .)


state 85

    (75) classliteral -> [ .

    -               reduce using rule 75 (classliteral -> [ .)
    !               reduce using rule 75 (classliteral -> [ .)
    "               reduce using rule 75 (classliteral -> [ .)
    #               reduce using rule 75 (classliteral -> [ .)
    $               reduce using rule 75 (classliteral -> [ .)
    %               reduce using rule 75 (classliteral -> [ .)
    &               reduce using rule 75 (classliteral -> [ .)
    '               reduce using rule 75 (classliteral -> [ .)
    (               reduce using rule 75 (classliteral -> [ .)
    )               reduce using rule 75 (classliteral -> [ .)
    *               reduce using rule 75 (classliteral -> [ .)
    +               reduce using rule 75 (classliteral -> [ .)
    ,               reduce using rule 75 (classliteral -> [ .)
    .               reduce using rule 75 (classliteral -> [ .)
    /               reduce using rule 75 (classliteral -> [ .)
    :               reduce using rule 75 (classliteral -> [ .)
    ;               reduce using rule 75 (classliteral -> [ .)
    <               reduce using rule 75 (classliteral -> [ .)
    =               reduce using rule 75 (classliteral -> [ .)
    >               reduce using rule 75 (classliteral -> [ .)
    ?               reduce using rule 75 (classliteral -> [ .)
    @               reduce using rule 75 (classliteral -> [ .)
    [               reduce using rule 75 (classliteral -> [ .)
    \               reduce using rule 75 (classliteral -> [ .)
    _               reduce using rule 75 (classliteral -> [ .)
    `               reduce using rule 75 (classliteral -> [ .)
    {               reduce using rule 75 (classliteral -> [ .)
    }               reduce using rule 75 (classliteral -> [ .)
    ~               reduce using rule 75 (classliteral -> [ .)
    ESCAPED         reduce using rule 75 (classliteral -> [ .)
    ALPHA           reduce using rule 75 (classliteral -> [ .)
    DIGIT           reduce using rule 75 (classliteral -> [ .)
    OTHER           reduce using rule 75 (classliteral -> [ .)
    ]               reduce using rule 75 (classliteral -> [ .)
    |               reduce using rule 75 (classliteral -> [ .)


state 86

    (68) classliteral -> : .

    -               reduce using rule 68 (classliteral -> : .)
    !               reduce using rule 68 (classliteral -> : .)
    "               reduce using rule 68 (classliteral -> : .)
    #               reduce using rule 68 (classliteral -> : .)
    $               reduce using rule 68 (classliteral -> : .)
    %               reduce using rule 68 (classliteral -> : .)
    &               reduce using rule 68 (classliteral -> : .)
    '               reduce using rule 68 (classliteral -> : .)
    (               reduce using rule 68 (classliteral -> : .)
    )               reduce using rule 68 (classliteral -> : .)
    *               reduce using rule 68 (classliteral -> : .)
    +               reduce using rule 68 (classliteral -> : .)
    ,               reduce using rule 68 (classliteral -> : .)
    .               reduce using rule 68 (classliteral -> : .)
    /               reduce using rule 68 (classliteral -> : .)
    :               reduce using rule 68 (classliteral -> : .)
    ;               reduce using rule 68 (classliteral -> : .)
    <               reduce using rule 68 (classliteral -> : .)
    =               reduce using rule 68 (classliteral -> : .)
    >               reduce using rule 68 (classliteral -> : .)
    ?               reduce using rule 68 (classliteral -> : .)
    @               reduce using rule 68 (classliteral -> : .)
    [               reduce using rule 68 (classliteral -> : .)
    \               reduce using rule 68 (classliteral -> : .)
    _               reduce using rule 68 (classliteral -> : .)
    `               reduce using rule 68 (classliteral -> : .)
    {               reduce using rule 68 (classliteral -> : .)
    }               reduce using rule 68 (classliteral -> : .)
    ~               reduce using rule 68 (classliteral -> : .)
    ESCAPED         reduce using rule 68 (classliteral -> : .)
    ALPHA           reduce using rule 68 (classliteral -> : .)
    DIGIT           reduce using rule 68 (classliteral -> : .)
    OTHER           reduce using rule 68 (classliteral -> : .)
    ]               reduce using rule 68 (classliteral -> : .)
    |               reduce using rule 68 (classliteral -> : .)


state 87

    (59) classliteral -> & .

    -               reduce using rule 59 (classliteral -> & .)
    !               reduce using rule 59 (classliteral -> & .)
    "               reduce using rule 59 (classliteral -> & .)
    #               reduce using rule 59 (classliteral -> & .)
    $               reduce using rule 59 (classliteral -> & .)
    %               reduce using rule 59 (classliteral -> & .)
    &               reduce using rule 59 (classliteral -> & .)
    '               reduce using rule 59 (classliteral -> & .)
    (               reduce using rule 59 (classliteral -> & .)
    )               reduce using rule 59 (classliteral -> & .)
    *               reduce using rule 59 (classliteral -> & .)
    +               reduce using rule 59 (classliteral -> & .)
    ,               reduce using rule 59 (classliteral -> & .)
    .               reduce using rule 59 (classliteral -> & .)
    /               reduce using rule 59 (classliteral -> & .)
    :               reduce using rule 59 (classliteral -> & .)
    ;               reduce using rule 59 (classliteral -> & .)
    <               reduce using rule 59 (classliteral -> & .)
    =               reduce using rule 59 (classliteral -> & .)
    >               reduce using rule 59 (classliteral -> & .)
    ?               reduce using rule 59 (classliteral -> & .)
    @               reduce using rule 59 (classliteral -> & .)
    [               reduce using rule 59 (classliteral -> & .)
    \               reduce using rule 59 (classliteral -> & .)
    _               reduce using rule 59 (classliteral -> & .)
    `               reduce using rule 59 (classliteral -> & .)
    {               reduce using rule 59 (classliteral -> & .)
    }               reduce using rule 59 (classliteral -> & .)
    ~               reduce using rule 59 (classliteral -> & .)
    ESCAPED         reduce using rule 59 (classliteral -> & .)
    ALPHA           reduce using rule 59 (classliteral -> & .)
    DIGIT           reduce using rule 59 (classliteral -> & .)
    OTHER           reduce using rule 59 (classliteral -> & .)
    ]               reduce using rule 59 (classliteral -> & .)
    |               reduce using rule 59 (classliteral -> & .)


state 88

    (54) classliteral -> ! .

    -               reduce using rule 54 (classliteral -> ! .)
    !               reduce using rule 54 (classliteral -> ! .)
    "               reduce using rule 54 (classliteral -> ! .)
    #               reduce using rule 54 (classliteral -> ! .)
    $               reduce using rule 54 (classliteral -> ! .)
    %               reduce using rule 54 (classliteral -> ! .)
    &               reduce using rule 54 (classliteral -> ! .)
    '               reduce using rule 54 (classliteral -> ! .)
    (               reduce using rule 54 (classliteral -> ! .)
    )               reduce using rule 54 (classliteral -> ! .)
    *               reduce using rule 54 (classliteral -> ! .)
    +               reduce using rule 54 (classliteral -> ! .)
    ,               reduce using rule 54 (classliteral -> ! .)
    .               reduce using rule 54 (classliteral -> ! .)
    /               reduce using rule 54 (classliteral -> ! .)
    :               reduce using rule 54 (classliteral -> ! .)
    ;               reduce using rule 54 (classliteral -> ! .)
    <               reduce using rule 54 (classliteral -> ! .)
    =               reduce using rule 54 (classliteral -> ! .)
    >               reduce using rule 54 (classliteral -> ! .)
    ?               reduce using rule 54 (classliteral -> ! .)
    @               reduce using rule 54 (classliteral -> ! .)
    [               reduce using rule 54 (classliteral -> ! .)
    \               reduce using rule 54 (classliteral -> ! .)
    _               reduce using rule 54 (classliteral -> ! .)
    `               reduce using rule 54 (classliteral -> ! .)
    {               reduce using rule 54 (classliteral -> ! .)
    }               reduce using rule 54 (classliteral -> ! .)
    ~               reduce using rule 54 (classliteral -> ! .)
    ESCAPED         reduce using rule 54 (classliteral -> ! .)
    ALPHA           reduce using rule 54 (classliteral -> ! .)
    DIGIT           reduce using rule 54 (classliteral -> ! .)
    OTHER           reduce using rule 54 (classliteral -> ! .)
    ]               reduce using rule 54 (classliteral -> ! .)
    |               reduce using rule 54 (classliteral -> ! .)


state 89

    (64) classliteral -> + .

    -               reduce using rule 64 (classliteral -> + .)
    !               reduce using rule 64 (classliteral -> + .)
    "               reduce using rule 64 (classliteral -> + .)
    #               reduce using rule 64 (classliteral -> + .)
    $               reduce using rule 64 (classliteral -> + .)
    %               reduce using rule 64 (classliteral -> + .)
    &               reduce using rule 64 (classliteral -> + .)
    '               reduce using rule 64 (classliteral -> + .)
    (               reduce using rule 64 (classliteral -> + .)
    )               reduce using rule 64 (classliteral -> + .)
    *               reduce using rule 64 (classliteral -> + .)
    +               reduce using rule 64 (classliteral -> + .)
    ,               reduce using rule 64 (classliteral -> + .)
    .               reduce using rule 64 (classliteral -> + .)
    /               reduce using rule 64 (classliteral -> + .)
    :               reduce using rule 64 (classliteral -> + .)
    ;               reduce using rule 64 (classliteral -> + .)
    <               reduce using rule 64 (classliteral -> + .)
    =               reduce using rule 64 (classliteral -> + .)
    >               reduce using rule 64 (classliteral -> + .)
    ?               reduce using rule 64 (classliteral -> + .)
    @               reduce using rule 64 (classliteral -> + .)
    [               reduce using rule 64 (classliteral -> + .)
    \               reduce using rule 64 (classliteral -> + .)
    _               reduce using rule 64 (classliteral -> + .)
    `               reduce using rule 64 (classliteral -> + .)
    {               reduce using rule 64 (classliteral -> + .)
    }               reduce using rule 64 (classliteral -> + .)
    ~               reduce using rule 64 (classliteral -> + .)
    ESCAPED         reduce using rule 64 (classliteral -> + .)
    ALPHA           reduce using rule 64 (classliteral -> + .)
    DIGIT           reduce using rule 64 (classliteral -> + .)
    OTHER           reduce using rule 64 (classliteral -> + .)
    ]               reduce using rule 64 (classliteral -> + .)
    |               reduce using rule 64 (classliteral -> + .)


state 90

    (66) classliteral -> . .

    -               reduce using rule 66 (classliteral -> . .)
    !               reduce using rule 66 (classliteral -> . .)
    "               reduce using rule 66 (classliteral -> . .)
    #               reduce using rule 66 (classliteral -> . .)
    $               reduce using rule 66 (classliteral -> . .)
    %               reduce using rule 66 (classliteral -> . .)
    &               reduce using rule 66 (classliteral -> . .)
    '               reduce using rule 66 (classliteral -> . .)
    (               reduce using rule 66 (classliteral -> . .)
    )               reduce using rule 66 (classliteral -> . .)
    *               reduce using rule 66 (classliteral -> . .)
    +               reduce using rule 66 (classliteral -> . .)
    ,               reduce using rule 66 (classliteral -> . .)
    .               reduce using rule 66 (classliteral -> . .)
    /               reduce using rule 66 (classliteral -> . .)
    :               reduce using rule 66 (classliteral -> . .)
    ;               reduce using rule 66 (classliteral -> . .)
    <               reduce using rule 66 (classliteral -> . .)
    =               reduce using rule 66 (classliteral -> . .)
    >               reduce using rule 66 (classliteral -> . .)
    ?               reduce using rule 66 (classliteral -> . .)
    @               reduce using rule 66 (classliteral -> . .)
    [               reduce using rule 66 (classliteral -> . .)
    \               reduce using rule 66 (classliteral -> . .)
    _               reduce using rule 66 (classliteral -> . .)
    `               reduce using rule 66 (classliteral -> . .)
    {               reduce using rule 66 (classliteral -> . .)
    }               reduce using rule 66 (classliteral -> . .)
    ~               reduce using rule 66 (classliteral -> . .)
    ESCAPED         reduce using rule 66 (classliteral -> . .)
    ALPHA           reduce using rule 66 (classliteral -> . .)
    DIGIT           reduce using rule 66 (classliteral -> . .)
    OTHER           reduce using rule 66 (classliteral -> . .)
    ]               reduce using rule 66 (classliteral -> . .)
    |               reduce using rule 66 (classliteral -> . .)


state 91

    (38) specialgroup -> _ . lengthcheck
    (41) lengthcheck -> . ( number ) re

    (               shift and go to state 106

    lengthcheck                    shift and go to state 105

state 92

    (36) groupbody -> ? specialgroup .

    )               reduce using rule 36 (groupbody -> ? specialgroup .)


state 93

    (39) specialgroup -> | . stationarygroup
    (42) stationarygroup -> . re
    (1) re -> . alternation
    (2) re -> . simple
    (3) alternation -> . re | simple
    (4) simple -> . concatenation
    (5) simple -> . basic
    (6) concatenation -> . simple basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . anchor
    (23) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (35) group -> . ( groupbody )
    (85) directional -> . ^ DIGIT
    (86) directional -> . ^ ALPHA
    (89) command -> . >
    (90) command -> . <
    (91) command -> . /
    (92) command -> . \
    (93) command -> . #
    (94) command -> . %
    (95) literal -> . ESCAPED
    (96) literal -> . ALPHA
    (97) literal -> . DIGIT
    (98) literal -> . OTHER
    (45) charclass -> . [ classitems ]
    (31) anychar -> . .
    (32) nodisplay -> . !
    (87) anchor -> . $ DIGIT
    (88) anchor -> . $ ALPHA
    (84) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (24) asterisk -> . elementary *
    (25) plus -> . elementary +
    (26) optional -> . elementary ?
    (27) nrepeat -> . elementary { number }
    (28) nrepeat -> . elementary { , number }
    (29) nrepeat -> . elementary { number , }
    (30) nrepeat -> . elementary { number , number }

    (               shift and go to state 8
    ^               shift and go to state 29
    >               shift and go to state 9
    <               shift and go to state 36
    /               shift and go to state 26
    \               shift and go to state 18
    #               shift and go to state 1
    %               shift and go to state 20
    ESCAPED         shift and go to state 23
    ALPHA           shift and go to state 15
    DIGIT           shift and go to state 34
    OTHER           shift and go to state 14
    [               shift and go to state 35
    .               shift and go to state 6
    !               shift and go to state 17
    $               shift and go to state 22
    `               shift and go to state 27

    alternation                    shift and go to state 2
    stationarygroup                shift and go to state 107
    concatenation                  shift and go to state 7
    plus                           shift and go to state 5
    command                        shift and go to state 3
    simple                         shift and go to state 4
    re                             shift and go to state 108
    nodisplay                      shift and go to state 24
    basequantifier                 shift and go to state 25
    anychar                        shift and go to state 28
    quantifier                     shift and go to state 19
    group                          shift and go to state 30
    elementary                     shift and go to state 10
    basic                          shift and go to state 11
    literal                        shift and go to state 12
    directional                    shift and go to state 31
    anchor                         shift and go to state 21
    predefined                     shift and go to state 33
    asterisk                       shift and go to state 16
    charclass                      shift and go to state 37
    nrepeat                        shift and go to state 13
    optional                       shift and go to state 38

state 94

    (40) specialgroup -> : . nocapture
    (43) nocapture -> . re
    (1) re -> . alternation
    (2) re -> . simple
    (3) alternation -> . re | simple
    (4) simple -> . concatenation
    (5) simple -> . basic
    (6) concatenation -> . simple basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . anchor
    (23) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (35) group -> . ( groupbody )
    (85) directional -> . ^ DIGIT
    (86) directional -> . ^ ALPHA
    (89) command -> . >
    (90) command -> . <
    (91) command -> . /
    (92) command -> . \
    (93) command -> . #
    (94) command -> . %
    (95) literal -> . ESCAPED
    (96) literal -> . ALPHA
    (97) literal -> . DIGIT
    (98) literal -> . OTHER
    (45) charclass -> . [ classitems ]
    (31) anychar -> . .
    (32) nodisplay -> . !
    (87) anchor -> . $ DIGIT
    (88) anchor -> . $ ALPHA
    (84) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (24) asterisk -> . elementary *
    (25) plus -> . elementary +
    (26) optional -> . elementary ?
    (27) nrepeat -> . elementary { number }
    (28) nrepeat -> . elementary { , number }
    (29) nrepeat -> . elementary { number , }
    (30) nrepeat -> . elementary { number , number }

    (               shift and go to state 8
    ^               shift and go to state 29
    >               shift and go to state 9
    <               shift and go to state 36
    /               shift and go to state 26
    \               shift and go to state 18
    #               shift and go to state 1
    %               shift and go to state 20
    ESCAPED         shift and go to state 23
    ALPHA           shift and go to state 15
    DIGIT           shift and go to state 34
    OTHER           shift and go to state 14
    [               shift and go to state 35
    .               shift and go to state 6
    !               shift and go to state 17
    $               shift and go to state 22
    `               shift and go to state 27

    alternation                    shift and go to state 2
    concatenation                  shift and go to state 7
    plus                           shift and go to state 5
    command                        shift and go to state 3
    simple                         shift and go to state 4
    predefined                     shift and go to state 33
    anchor                         shift and go to state 21
    nodisplay                      shift and go to state 24
    basequantifier                 shift and go to state 25
    anychar                        shift and go to state 28
    quantifier                     shift and go to state 19
    group                          shift and go to state 30
    elementary                     shift and go to state 10
    basic                          shift and go to state 11
    literal                        shift and go to state 12
    directional                    shift and go to state 31
    re                             shift and go to state 109
    nocapture                      shift and go to state 110
    asterisk                       shift and go to state 16
    charclass                      shift and go to state 37
    nrepeat                        shift and go to state 13
    optional                       shift and go to state 38

state 95

    (35) group -> ( groupbody ) .

    *               reduce using rule 35 (group -> ( groupbody ) .)
    +               reduce using rule 35 (group -> ( groupbody ) .)
    ?               reduce using rule 35 (group -> ( groupbody ) .)
    {               reduce using rule 35 (group -> ( groupbody ) .)
    (               reduce using rule 35 (group -> ( groupbody ) .)
    ^               reduce using rule 35 (group -> ( groupbody ) .)
    >               reduce using rule 35 (group -> ( groupbody ) .)
    <               reduce using rule 35 (group -> ( groupbody ) .)
    /               reduce using rule 35 (group -> ( groupbody ) .)
    \               reduce using rule 35 (group -> ( groupbody ) .)
    #               reduce using rule 35 (group -> ( groupbody ) .)
    %               reduce using rule 35 (group -> ( groupbody ) .)
    ESCAPED         reduce using rule 35 (group -> ( groupbody ) .)
    ALPHA           reduce using rule 35 (group -> ( groupbody ) .)
    DIGIT           reduce using rule 35 (group -> ( groupbody ) .)
    OTHER           reduce using rule 35 (group -> ( groupbody ) .)
    [               reduce using rule 35 (group -> ( groupbody ) .)
    .               reduce using rule 35 (group -> ( groupbody ) .)
    !               reduce using rule 35 (group -> ( groupbody ) .)
    $               reduce using rule 35 (group -> ( groupbody ) .)
    `               reduce using rule 35 (group -> ( groupbody ) .)
    |               reduce using rule 35 (group -> ( groupbody ) .)
    )               reduce using rule 35 (group -> ( groupbody ) .)
    $end            reduce using rule 35 (group -> ( groupbody ) .)


state 96

    (28) nrepeat -> elementary { , . number }
    (33) number -> . DIGIT
    (34) number -> . DIGIT number

    DIGIT           shift and go to state 97

    number                         shift and go to state 111

state 97

    (33) number -> DIGIT .
    (34) number -> DIGIT . number
    (33) number -> . DIGIT
    (34) number -> . DIGIT number

    }               reduce using rule 33 (number -> DIGIT .)
    ,               reduce using rule 33 (number -> DIGIT .)
    )               reduce using rule 33 (number -> DIGIT .)
    DIGIT           shift and go to state 97

    number                         shift and go to state 112

state 98

    (27) nrepeat -> elementary { number . }
    (29) nrepeat -> elementary { number . , }
    (30) nrepeat -> elementary { number . , number }

    }               shift and go to state 113
    ,               shift and go to state 114


state 99

    (3) alternation -> re | simple .
    (6) concatenation -> simple . basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . anchor
    (23) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (35) group -> . ( groupbody )
    (85) directional -> . ^ DIGIT
    (86) directional -> . ^ ALPHA
    (89) command -> . >
    (90) command -> . <
    (91) command -> . /
    (92) command -> . \
    (93) command -> . #
    (94) command -> . %
    (95) literal -> . ESCAPED
    (96) literal -> . ALPHA
    (97) literal -> . DIGIT
    (98) literal -> . OTHER
    (45) charclass -> . [ classitems ]
    (31) anychar -> . .
    (32) nodisplay -> . !
    (87) anchor -> . $ DIGIT
    (88) anchor -> . $ ALPHA
    (84) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (24) asterisk -> . elementary *
    (25) plus -> . elementary +
    (26) optional -> . elementary ?
    (27) nrepeat -> . elementary { number }
    (28) nrepeat -> . elementary { , number }
    (29) nrepeat -> . elementary { number , }
    (30) nrepeat -> . elementary { number , number }

    |               reduce using rule 3 (alternation -> re | simple .)
    )               reduce using rule 3 (alternation -> re | simple .)
    $end            reduce using rule 3 (alternation -> re | simple .)
    (               shift and go to state 8
    ^               shift and go to state 29
    >               shift and go to state 9
    <               shift and go to state 36
    /               shift and go to state 26
    \               shift and go to state 18
    #               shift and go to state 1
    %               shift and go to state 20
    ESCAPED         shift and go to state 23
    ALPHA           shift and go to state 15
    DIGIT           shift and go to state 34
    OTHER           shift and go to state 14
    [               shift and go to state 35
    .               shift and go to state 6
    !               shift and go to state 17
    $               shift and go to state 22
    `               shift and go to state 27

    command                        shift and go to state 3
    anchor                         shift and go to state 21
    nodisplay                      shift and go to state 24
    basequantifier                 shift and go to state 25
    anychar                        shift and go to state 28
    quantifier                     shift and go to state 19
    group                          shift and go to state 30
    elementary                     shift and go to state 10
    basic                          shift and go to state 39
    literal                        shift and go to state 12
    directional                    shift and go to state 31
    plus                           shift and go to state 5
    predefined                     shift and go to state 33
    asterisk                       shift and go to state 16
    charclass                      shift and go to state 37
    nrepeat                        shift and go to state 13
    optional                       shift and go to state 38

state 100

    (51) baseitems -> classatom baseitems .

    ]               reduce using rule 51 (baseitems -> classatom baseitems .)
    |               reduce using rule 51 (baseitems -> classatom baseitems .)


state 101

    (83) classrange -> classliteral - . classliteral
    (54) classliteral -> . !
    (55) classliteral -> . "
    (56) classliteral -> . #
    (57) classliteral -> . $
    (58) classliteral -> . %
    (59) classliteral -> . &
    (60) classliteral -> . '
    (61) classliteral -> . (
    (62) classliteral -> . )
    (63) classliteral -> . *
    (64) classliteral -> . +
    (65) classliteral -> . ,
    (66) classliteral -> . .
    (67) classliteral -> . /
    (68) classliteral -> . :
    (69) classliteral -> . ;
    (70) classliteral -> . <
    (71) classliteral -> . =
    (72) classliteral -> . >
    (73) classliteral -> . ?
    (74) classliteral -> . @
    (75) classliteral -> . [
    (76) classliteral -> . \
    (77) classliteral -> . _
    (78) classliteral -> . `
    (79) classliteral -> . {
    (80) classliteral -> . }
    (81) classliteral -> . ~
    (82) classliteral -> . literal
    (95) literal -> . ESCAPED
    (96) literal -> . ALPHA
    (97) literal -> . DIGIT
    (98) literal -> . OTHER

    !               shift and go to state 88
    "               shift and go to state 72
    #               shift and go to state 57
    $               shift and go to state 66
    %               shift and go to state 61
    &               shift and go to state 87
    '               shift and go to state 80
    (               shift and go to state 70
    )               shift and go to state 81
    *               shift and go to state 67
    +               shift and go to state 89
    ,               shift and go to state 58
    .               shift and go to state 90
    /               shift and go to state 62
    :               shift and go to state 86
    ;               shift and go to state 82
    <               shift and go to state 71
    =               shift and go to state 83
    >               shift and go to state 84
    ?               shift and go to state 64
    @               shift and go to state 65
    [               shift and go to state 85
    \               shift and go to state 55
    _               shift and go to state 74
    `               shift and go to state 77
    {               shift and go to state 63
    }               shift and go to state 56
    ~               shift and go to state 79
    ESCAPED         shift and go to state 23
    ALPHA           shift and go to state 15
    DIGIT           shift and go to state 34
    OTHER           shift and go to state 14

    classliteral                   shift and go to state 115
    literal                        shift and go to state 78

state 102

    (49) classitems2 -> baseitems | . baseitems
    (50) baseitems -> . classatom
    (51) baseitems -> . classatom baseitems
    (52) classatom -> . classliteral
    (53) classatom -> . classrange
    (54) classliteral -> . !
    (55) classliteral -> . "
    (56) classliteral -> . #
    (57) classliteral -> . $
    (58) classliteral -> . %
    (59) classliteral -> . &
    (60) classliteral -> . '
    (61) classliteral -> . (
    (62) classliteral -> . )
    (63) classliteral -> . *
    (64) classliteral -> . +
    (65) classliteral -> . ,
    (66) classliteral -> . .
    (67) classliteral -> . /
    (68) classliteral -> . :
    (69) classliteral -> . ;
    (70) classliteral -> . <
    (71) classliteral -> . =
    (72) classliteral -> . >
    (73) classliteral -> . ?
    (74) classliteral -> . @
    (75) classliteral -> . [
    (76) classliteral -> . \
    (77) classliteral -> . _
    (78) classliteral -> . `
    (79) classliteral -> . {
    (80) classliteral -> . }
    (81) classliteral -> . ~
    (82) classliteral -> . literal
    (83) classrange -> . classliteral - classliteral
    (95) literal -> . ESCAPED
    (96) literal -> . ALPHA
    (97) literal -> . DIGIT
    (98) literal -> . OTHER

    !               shift and go to state 88
    "               shift and go to state 72
    #               shift and go to state 57
    $               shift and go to state 66
    %               shift and go to state 61
    &               shift and go to state 87
    '               shift and go to state 80
    (               shift and go to state 70
    )               shift and go to state 81
    *               shift and go to state 67
    +               shift and go to state 89
    ,               shift and go to state 58
    .               shift and go to state 90
    /               shift and go to state 62
    :               shift and go to state 86
    ;               shift and go to state 82
    <               shift and go to state 71
    =               shift and go to state 83
    >               shift and go to state 84
    ?               shift and go to state 64
    @               shift and go to state 65
    [               shift and go to state 85
    \               shift and go to state 55
    _               shift and go to state 74
    `               shift and go to state 77
    {               shift and go to state 63
    }               shift and go to state 56
    ~               shift and go to state 79
    ESCAPED         shift and go to state 23
    ALPHA           shift and go to state 15
    DIGIT           shift and go to state 34
    OTHER           shift and go to state 14

    classatom                      shift and go to state 59
    classliteral                   shift and go to state 68
    classrange                     shift and go to state 60
    baseitems                      shift and go to state 116
    literal                        shift and go to state 78

state 103

    (45) charclass -> [ classitems ] .

    *               reduce using rule 45 (charclass -> [ classitems ] .)
    +               reduce using rule 45 (charclass -> [ classitems ] .)
    ?               reduce using rule 45 (charclass -> [ classitems ] .)
    {               reduce using rule 45 (charclass -> [ classitems ] .)
    (               reduce using rule 45 (charclass -> [ classitems ] .)
    ^               reduce using rule 45 (charclass -> [ classitems ] .)
    >               reduce using rule 45 (charclass -> [ classitems ] .)
    <               reduce using rule 45 (charclass -> [ classitems ] .)
    /               reduce using rule 45 (charclass -> [ classitems ] .)
    \               reduce using rule 45 (charclass -> [ classitems ] .)
    #               reduce using rule 45 (charclass -> [ classitems ] .)
    %               reduce using rule 45 (charclass -> [ classitems ] .)
    ESCAPED         reduce using rule 45 (charclass -> [ classitems ] .)
    ALPHA           reduce using rule 45 (charclass -> [ classitems ] .)
    DIGIT           reduce using rule 45 (charclass -> [ classitems ] .)
    OTHER           reduce using rule 45 (charclass -> [ classitems ] .)
    [               reduce using rule 45 (charclass -> [ classitems ] .)
    .               reduce using rule 45 (charclass -> [ classitems ] .)
    !               reduce using rule 45 (charclass -> [ classitems ] .)
    $               reduce using rule 45 (charclass -> [ classitems ] .)
    `               reduce using rule 45 (charclass -> [ classitems ] .)
    |               reduce using rule 45 (charclass -> [ classitems ] .)
    )               reduce using rule 45 (charclass -> [ classitems ] .)
    $end            reduce using rule 45 (charclass -> [ classitems ] .)


state 104

    (46) classitems -> ^ baseitems .

    ]               reduce using rule 46 (classitems -> ^ baseitems .)


state 105

    (38) specialgroup -> _ lengthcheck .

    )               reduce using rule 38 (specialgroup -> _ lengthcheck .)


state 106

    (41) lengthcheck -> ( . number ) re
    (33) number -> . DIGIT
    (34) number -> . DIGIT number

    DIGIT           shift and go to state 97

    number                         shift and go to state 117

state 107

    (39) specialgroup -> | stationarygroup .

    )               reduce using rule 39 (specialgroup -> | stationarygroup .)


state 108

    (42) stationarygroup -> re .
    (3) alternation -> re . | simple

    )               reduce using rule 42 (stationarygroup -> re .)
    |               shift and go to state 54


state 109

    (43) nocapture -> re .
    (3) alternation -> re . | simple

    )               reduce using rule 43 (nocapture -> re .)
    |               shift and go to state 54


state 110

    (40) specialgroup -> : nocapture .

    )               reduce using rule 40 (specialgroup -> : nocapture .)


state 111

    (28) nrepeat -> elementary { , number . }

    }               shift and go to state 118


state 112

    (34) number -> DIGIT number .

    }               reduce using rule 34 (number -> DIGIT number .)
    ,               reduce using rule 34 (number -> DIGIT number .)
    )               reduce using rule 34 (number -> DIGIT number .)


state 113

    (27) nrepeat -> elementary { number } .

    ?               reduce using rule 27 (nrepeat -> elementary { number } .)
    (               reduce using rule 27 (nrepeat -> elementary { number } .)
    ^               reduce using rule 27 (nrepeat -> elementary { number } .)
    >               reduce using rule 27 (nrepeat -> elementary { number } .)
    <               reduce using rule 27 (nrepeat -> elementary { number } .)
    /               reduce using rule 27 (nrepeat -> elementary { number } .)
    \               reduce using rule 27 (nrepeat -> elementary { number } .)
    #               reduce using rule 27 (nrepeat -> elementary { number } .)
    %               reduce using rule 27 (nrepeat -> elementary { number } .)
    ESCAPED         reduce using rule 27 (nrepeat -> elementary { number } .)
    ALPHA           reduce using rule 27 (nrepeat -> elementary { number } .)
    DIGIT           reduce using rule 27 (nrepeat -> elementary { number } .)
    OTHER           reduce using rule 27 (nrepeat -> elementary { number } .)
    [               reduce using rule 27 (nrepeat -> elementary { number } .)
    .               reduce using rule 27 (nrepeat -> elementary { number } .)
    !               reduce using rule 27 (nrepeat -> elementary { number } .)
    $               reduce using rule 27 (nrepeat -> elementary { number } .)
    `               reduce using rule 27 (nrepeat -> elementary { number } .)
    |               reduce using rule 27 (nrepeat -> elementary { number } .)
    $end            reduce using rule 27 (nrepeat -> elementary { number } .)
    )               reduce using rule 27 (nrepeat -> elementary { number } .)


state 114

    (29) nrepeat -> elementary { number , . }
    (30) nrepeat -> elementary { number , . number }
    (33) number -> . DIGIT
    (34) number -> . DIGIT number

    }               shift and go to state 119
    DIGIT           shift and go to state 97

    number                         shift and go to state 120

state 115

    (83) classrange -> classliteral - classliteral .

    !               reduce using rule 83 (classrange -> classliteral - classliteral .)
    "               reduce using rule 83 (classrange -> classliteral - classliteral .)
    #               reduce using rule 83 (classrange -> classliteral - classliteral .)
    $               reduce using rule 83 (classrange -> classliteral - classliteral .)
    %               reduce using rule 83 (classrange -> classliteral - classliteral .)
    &               reduce using rule 83 (classrange -> classliteral - classliteral .)
    '               reduce using rule 83 (classrange -> classliteral - classliteral .)
    (               reduce using rule 83 (classrange -> classliteral - classliteral .)
    )               reduce using rule 83 (classrange -> classliteral - classliteral .)
    *               reduce using rule 83 (classrange -> classliteral - classliteral .)
    +               reduce using rule 83 (classrange -> classliteral - classliteral .)
    ,               reduce using rule 83 (classrange -> classliteral - classliteral .)
    .               reduce using rule 83 (classrange -> classliteral - classliteral .)
    /               reduce using rule 83 (classrange -> classliteral - classliteral .)
    :               reduce using rule 83 (classrange -> classliteral - classliteral .)
    ;               reduce using rule 83 (classrange -> classliteral - classliteral .)
    <               reduce using rule 83 (classrange -> classliteral - classliteral .)
    =               reduce using rule 83 (classrange -> classliteral - classliteral .)
    >               reduce using rule 83 (classrange -> classliteral - classliteral .)
    ?               reduce using rule 83 (classrange -> classliteral - classliteral .)
    @               reduce using rule 83 (classrange -> classliteral - classliteral .)
    [               reduce using rule 83 (classrange -> classliteral - classliteral .)
    \               reduce using rule 83 (classrange -> classliteral - classliteral .)
    _               reduce using rule 83 (classrange -> classliteral - classliteral .)
    `               reduce using rule 83 (classrange -> classliteral - classliteral .)
    {               reduce using rule 83 (classrange -> classliteral - classliteral .)
    }               reduce using rule 83 (classrange -> classliteral - classliteral .)
    ~               reduce using rule 83 (classrange -> classliteral - classliteral .)
    ESCAPED         reduce using rule 83 (classrange -> classliteral - classliteral .)
    ALPHA           reduce using rule 83 (classrange -> classliteral - classliteral .)
    DIGIT           reduce using rule 83 (classrange -> classliteral - classliteral .)
    OTHER           reduce using rule 83 (classrange -> classliteral - classliteral .)
    ]               reduce using rule 83 (classrange -> classliteral - classliteral .)
    |               reduce using rule 83 (classrange -> classliteral - classliteral .)


state 116

    (49) classitems2 -> baseitems | baseitems .

    ]               reduce using rule 49 (classitems2 -> baseitems | baseitems .)


state 117

    (41) lengthcheck -> ( number . ) re

    )               shift and go to state 121


state 118

    (28) nrepeat -> elementary { , number } .

    ?               reduce using rule 28 (nrepeat -> elementary { , number } .)
    (               reduce using rule 28 (nrepeat -> elementary { , number } .)
    ^               reduce using rule 28 (nrepeat -> elementary { , number } .)
    >               reduce using rule 28 (nrepeat -> elementary { , number } .)
    <               reduce using rule 28 (nrepeat -> elementary { , number } .)
    /               reduce using rule 28 (nrepeat -> elementary { , number } .)
    \               reduce using rule 28 (nrepeat -> elementary { , number } .)
    #               reduce using rule 28 (nrepeat -> elementary { , number } .)
    %               reduce using rule 28 (nrepeat -> elementary { , number } .)
    ESCAPED         reduce using rule 28 (nrepeat -> elementary { , number } .)
    ALPHA           reduce using rule 28 (nrepeat -> elementary { , number } .)
    DIGIT           reduce using rule 28 (nrepeat -> elementary { , number } .)
    OTHER           reduce using rule 28 (nrepeat -> elementary { , number } .)
    [               reduce using rule 28 (nrepeat -> elementary { , number } .)
    .               reduce using rule 28 (nrepeat -> elementary { , number } .)
    !               reduce using rule 28 (nrepeat -> elementary { , number } .)
    $               reduce using rule 28 (nrepeat -> elementary { , number } .)
    `               reduce using rule 28 (nrepeat -> elementary { , number } .)
    |               reduce using rule 28 (nrepeat -> elementary { , number } .)
    $end            reduce using rule 28 (nrepeat -> elementary { , number } .)
    )               reduce using rule 28 (nrepeat -> elementary { , number } .)


state 119

    (29) nrepeat -> elementary { number , } .

    ?               reduce using rule 29 (nrepeat -> elementary { number , } .)
    (               reduce using rule 29 (nrepeat -> elementary { number , } .)
    ^               reduce using rule 29 (nrepeat -> elementary { number , } .)
    >               reduce using rule 29 (nrepeat -> elementary { number , } .)
    <               reduce using rule 29 (nrepeat -> elementary { number , } .)
    /               reduce using rule 29 (nrepeat -> elementary { number , } .)
    \               reduce using rule 29 (nrepeat -> elementary { number , } .)
    #               reduce using rule 29 (nrepeat -> elementary { number , } .)
    %               reduce using rule 29 (nrepeat -> elementary { number , } .)
    ESCAPED         reduce using rule 29 (nrepeat -> elementary { number , } .)
    ALPHA           reduce using rule 29 (nrepeat -> elementary { number , } .)
    DIGIT           reduce using rule 29 (nrepeat -> elementary { number , } .)
    OTHER           reduce using rule 29 (nrepeat -> elementary { number , } .)
    [               reduce using rule 29 (nrepeat -> elementary { number , } .)
    .               reduce using rule 29 (nrepeat -> elementary { number , } .)
    !               reduce using rule 29 (nrepeat -> elementary { number , } .)
    $               reduce using rule 29 (nrepeat -> elementary { number , } .)
    `               reduce using rule 29 (nrepeat -> elementary { number , } .)
    |               reduce using rule 29 (nrepeat -> elementary { number , } .)
    $end            reduce using rule 29 (nrepeat -> elementary { number , } .)
    )               reduce using rule 29 (nrepeat -> elementary { number , } .)


state 120

    (30) nrepeat -> elementary { number , number . }

    }               shift and go to state 122


state 121

    (41) lengthcheck -> ( number ) . re
    (1) re -> . alternation
    (2) re -> . simple
    (3) alternation -> . re | simple
    (4) simple -> . concatenation
    (5) simple -> . basic
    (6) concatenation -> . simple basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . anchor
    (23) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (35) group -> . ( groupbody )
    (85) directional -> . ^ DIGIT
    (86) directional -> . ^ ALPHA
    (89) command -> . >
    (90) command -> . <
    (91) command -> . /
    (92) command -> . \
    (93) command -> . #
    (94) command -> . %
    (95) literal -> . ESCAPED
    (96) literal -> . ALPHA
    (97) literal -> . DIGIT
    (98) literal -> . OTHER
    (45) charclass -> . [ classitems ]
    (31) anychar -> . .
    (32) nodisplay -> . !
    (87) anchor -> . $ DIGIT
    (88) anchor -> . $ ALPHA
    (84) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (24) asterisk -> . elementary *
    (25) plus -> . elementary +
    (26) optional -> . elementary ?
    (27) nrepeat -> . elementary { number }
    (28) nrepeat -> . elementary { , number }
    (29) nrepeat -> . elementary { number , }
    (30) nrepeat -> . elementary { number , number }

    (               shift and go to state 8
    ^               shift and go to state 29
    >               shift and go to state 9
    <               shift and go to state 36
    /               shift and go to state 26
    \               shift and go to state 18
    #               shift and go to state 1
    %               shift and go to state 20
    ESCAPED         shift and go to state 23
    ALPHA           shift and go to state 15
    DIGIT           shift and go to state 34
    OTHER           shift and go to state 14
    [               shift and go to state 35
    .               shift and go to state 6
    !               shift and go to state 17
    $               shift and go to state 22
    `               shift and go to state 27

    alternation                    shift and go to state 2
    concatenation                  shift and go to state 7
    plus                           shift and go to state 5
    command                        shift and go to state 3
    simple                         shift and go to state 4
    anchor                         shift and go to state 21
    nodisplay                      shift and go to state 24
    basequantifier                 shift and go to state 25
    anychar                        shift and go to state 28
    quantifier                     shift and go to state 19
    group                          shift and go to state 30
    elementary                     shift and go to state 10
    basic                          shift and go to state 11
    literal                        shift and go to state 12
    directional                    shift and go to state 31
    re                             shift and go to state 123
    predefined                     shift and go to state 33
    asterisk                       shift and go to state 16
    charclass                      shift and go to state 37
    nrepeat                        shift and go to state 13
    optional                       shift and go to state 38

state 122

    (30) nrepeat -> elementary { number , number } .

    ?               reduce using rule 30 (nrepeat -> elementary { number , number } .)
    (               reduce using rule 30 (nrepeat -> elementary { number , number } .)
    ^               reduce using rule 30 (nrepeat -> elementary { number , number } .)
    >               reduce using rule 30 (nrepeat -> elementary { number , number } .)
    <               reduce using rule 30 (nrepeat -> elementary { number , number } .)
    /               reduce using rule 30 (nrepeat -> elementary { number , number } .)
    \               reduce using rule 30 (nrepeat -> elementary { number , number } .)
    #               reduce using rule 30 (nrepeat -> elementary { number , number } .)
    %               reduce using rule 30 (nrepeat -> elementary { number , number } .)
    ESCAPED         reduce using rule 30 (nrepeat -> elementary { number , number } .)
    ALPHA           reduce using rule 30 (nrepeat -> elementary { number , number } .)
    DIGIT           reduce using rule 30 (nrepeat -> elementary { number , number } .)
    OTHER           reduce using rule 30 (nrepeat -> elementary { number , number } .)
    [               reduce using rule 30 (nrepeat -> elementary { number , number } .)
    .               reduce using rule 30 (nrepeat -> elementary { number , number } .)
    !               reduce using rule 30 (nrepeat -> elementary { number , number } .)
    $               reduce using rule 30 (nrepeat -> elementary { number , number } .)
    `               reduce using rule 30 (nrepeat -> elementary { number , number } .)
    |               reduce using rule 30 (nrepeat -> elementary { number , number } .)
    $end            reduce using rule 30 (nrepeat -> elementary { number , number } .)
    )               reduce using rule 30 (nrepeat -> elementary { number , number } .)


state 123

    (41) lengthcheck -> ( number ) re .
    (3) alternation -> re . | simple

    )               reduce using rule 41 (lengthcheck -> ( number ) re .)
    |               shift and go to state 54

