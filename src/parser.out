Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> re
Rule 1     re -> alternation
Rule 2     re -> simple
Rule 3     alternation -> re | simple
Rule 4     simple -> concatenation
Rule 5     simple -> basic
Rule 6     concatenation -> simple basic
Rule 7     basic -> elementary
Rule 8     basic -> quantifier
Rule 9     quantifier -> basequantifier
Rule 10    quantifier -> basequantifier ?
Rule 11    basequantifier -> asterisk
Rule 12    basequantifier -> plus
Rule 13    basequantifier -> optional
Rule 14    basequantifier -> nrepeat
Rule 15    elementary -> group
Rule 16    elementary -> directional
Rule 17    elementary -> command
Rule 18    elementary -> literal
Rule 19    elementary -> charclass
Rule 20    elementary -> anychar
Rule 21    elementary -> nodisplay
Rule 22    elementary -> nomatch
Rule 23    elementary -> nodispmatch
Rule 24    elementary -> anchor
Rule 25    elementary -> predefined
Rule 26    asterisk -> elementary *
Rule 27    plus -> elementary +
Rule 28    optional -> elementary ?
Rule 29    nrepeat -> elementary { number }
Rule 30    nrepeat -> elementary { , number }
Rule 31    nrepeat -> elementary { number , }
Rule 32    nrepeat -> elementary { number , number }
Rule 33    anychar -> .
Rule 34    nodisplay -> ,
Rule 35    nomatch -> :
Rule 36    nodispmatch -> ;
Rule 37    number -> DIGIT
Rule 38    number -> DIGIT number
Rule 39    group -> ( groupbody )
Rule 40    groupbody -> ? specialgroup
Rule 41    groupbody -> basicgroup
Rule 42    specialgroup -> _ lengthcheck
Rule 43    specialgroup -> | stationarygroup
Rule 44    specialgroup -> : nomatchgroup
Rule 45    specialgroup -> , nodispgroup
Rule 46    specialgroup -> ; nodispmatchgroup
Rule 47    lengthcheck -> ( number ) re
Rule 48    stationarygroup -> re
Rule 49    nomatchgroup -> re
Rule 50    nodispgroup -> re
Rule 51    nodispmatchgroup -> re
Rule 52    basicgroup -> re
Rule 53    charclass -> [ classitems ]
Rule 54    classitems -> ^ baseitems
Rule 55    classitems -> classitems2
Rule 56    classitems2 -> baseitems
Rule 57    classitems2 -> baseitems | baseitems
Rule 58    baseitems -> classatom
Rule 59    baseitems -> classatom baseitems
Rule 60    classatom -> classliteral
Rule 61    classatom -> classrange
Rule 62    classliteral -> !
Rule 63    classliteral -> "
Rule 64    classliteral -> #
Rule 65    classliteral -> $
Rule 66    classliteral -> %
Rule 67    classliteral -> &
Rule 68    classliteral -> '
Rule 69    classliteral -> (
Rule 70    classliteral -> )
Rule 71    classliteral -> *
Rule 72    classliteral -> +
Rule 73    classliteral -> ,
Rule 74    classliteral -> .
Rule 75    classliteral -> /
Rule 76    classliteral -> :
Rule 77    classliteral -> ;
Rule 78    classliteral -> <
Rule 79    classliteral -> =
Rule 80    classliteral -> >
Rule 81    classliteral -> ?
Rule 82    classliteral -> @
Rule 83    classliteral -> [
Rule 84    classliteral -> \
Rule 85    classliteral -> _
Rule 86    classliteral -> `
Rule 87    classliteral -> {
Rule 88    classliteral -> }
Rule 89    classliteral -> ~
Rule 90    classliteral -> literal
Rule 91    classrange -> classliteral - classliteral
Rule 92    predefined -> ` ALPHA
Rule 93    directional -> ^ DIGIT
Rule 94    directional -> ^ ALPHA
Rule 95    directional -> ^ *
Rule 96    directional -> ^ +
Rule 97    anchor -> $ DIGIT
Rule 98    anchor -> $ ALPHA
Rule 99    anchor -> $ *
Rule 100   anchor -> $ +
Rule 101   command -> >
Rule 102   command -> <
Rule 103   command -> /
Rule 104   command -> \
Rule 105   command -> #
Rule 106   command -> %
Rule 107   literal -> ESCAPED
Rule 108   literal -> ALPHA
Rule 109   literal -> DIGIT
Rule 110   literal -> OTHER

Terminals, with rules where they appear

!                    : 62
"                    : 63
#                    : 64 105
$                    : 65 97 98 99 100
%                    : 66 106
&                    : 67
'                    : 68
(                    : 39 47 69
)                    : 39 47 70
*                    : 26 71 95 99
+                    : 27 72 96 100
,                    : 30 31 32 34 45 73
-                    : 91
.                    : 33 74
/                    : 75 103
:                    : 35 44 76
;                    : 36 46 77
<                    : 78 102
=                    : 79
>                    : 80 101
?                    : 10 28 40 81
@                    : 82
ALPHA                : 92 94 98 108
DIGIT                : 37 38 93 97 109
ESCAPED              : 107
OTHER                : 110
[                    : 53 83
\                    : 84 104
]                    : 53
^                    : 54 93 94 95 96
_                    : 42 85
`                    : 86 92
error                : 
{                    : 29 30 31 32 87
|                    : 3 43 57
}                    : 29 30 31 32 88
~                    : 89

Nonterminals, with rules where they appear

alternation          : 1
anchor               : 24
anychar              : 20
asterisk             : 11
baseitems            : 54 56 57 57 59
basequantifier       : 9 10
basic                : 5 6
basicgroup           : 41
charclass            : 19
classatom            : 58 59
classitems           : 53
classitems2          : 55
classliteral         : 60 91 91
classrange           : 61
command              : 17
concatenation        : 4
directional          : 16
elementary           : 7 26 27 28 29 30 31 32
group                : 15
groupbody            : 39
lengthcheck          : 42
literal              : 18 90
nodispgroup          : 45
nodisplay            : 21
nodispmatch          : 23
nodispmatchgroup     : 46
nomatch              : 22
nomatchgroup         : 44
nrepeat              : 14
number               : 29 30 31 32 32 38 47
optional             : 13
plus                 : 12
predefined           : 25
quantifier           : 8
re                   : 3 47 48 49 50 51 52 0
simple               : 2 3 6
specialgroup         : 40
stationarygroup      : 43

Parsing method: LALR

state 0

    (0) S' -> . re
    (1) re -> . alternation
    (2) re -> . simple
    (3) alternation -> . re | simple
    (4) simple -> . concatenation
    (5) simple -> . basic
    (6) concatenation -> . simple basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . nomatch
    (23) elementary -> . nodispmatch
    (24) elementary -> . anchor
    (25) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (39) group -> . ( groupbody )
    (93) directional -> . ^ DIGIT
    (94) directional -> . ^ ALPHA
    (95) directional -> . ^ *
    (96) directional -> . ^ +
    (101) command -> . >
    (102) command -> . <
    (103) command -> . /
    (104) command -> . \
    (105) command -> . #
    (106) command -> . %
    (107) literal -> . ESCAPED
    (108) literal -> . ALPHA
    (109) literal -> . DIGIT
    (110) literal -> . OTHER
    (53) charclass -> . [ classitems ]
    (33) anychar -> . .
    (34) nodisplay -> . ,
    (35) nomatch -> . :
    (36) nodispmatch -> . ;
    (97) anchor -> . $ DIGIT
    (98) anchor -> . $ ALPHA
    (99) anchor -> . $ *
    (100) anchor -> . $ +
    (92) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (26) asterisk -> . elementary *
    (27) plus -> . elementary +
    (28) optional -> . elementary ?
    (29) nrepeat -> . elementary { number }
    (30) nrepeat -> . elementary { , number }
    (31) nrepeat -> . elementary { number , }
    (32) nrepeat -> . elementary { number , number }

    (               shift and go to state 22
    ^               shift and go to state 30
    >               shift and go to state 38
    <               shift and go to state 4
    /               shift and go to state 19
    \               shift and go to state 25
    #               shift and go to state 13
    %               shift and go to state 42
    ESCAPED         shift and go to state 39
    ALPHA           shift and go to state 34
    DIGIT           shift and go to state 28
    OTHER           shift and go to state 7
    [               shift and go to state 1
    .               shift and go to state 33
    ,               shift and go to state 18
    :               shift and go to state 15
    ;               shift and go to state 21
    $               shift and go to state 32
    `               shift and go to state 29

    alternation                    shift and go to state 26
    basequantifier                 shift and go to state 27
    anchor                         shift and go to state 2
    nomatch                        shift and go to state 3
    command                        shift and go to state 5
    nodispmatch                    shift and go to state 8
    simple                         shift and go to state 9
    nodisplay                      shift and go to state 12
    optional                       shift and go to state 31
    literal                        shift and go to state 11
    re                             shift and go to state 10
    nrepeat                        shift and go to state 14
    concatenation                  shift and go to state 23
    group                          shift and go to state 16
    plus                           shift and go to state 17
    directional                    shift and go to state 35
    predefined                     shift and go to state 36
    quantifier                     shift and go to state 6
    charclass                      shift and go to state 20
    anychar                        shift and go to state 37
    basic                          shift and go to state 40
    elementary                     shift and go to state 41
    asterisk                       shift and go to state 24

state 1

    (53) charclass -> [ . classitems ]
    (54) classitems -> . ^ baseitems
    (55) classitems -> . classitems2
    (56) classitems2 -> . baseitems
    (57) classitems2 -> . baseitems | baseitems
    (58) baseitems -> . classatom
    (59) baseitems -> . classatom baseitems
    (60) classatom -> . classliteral
    (61) classatom -> . classrange
    (62) classliteral -> . !
    (63) classliteral -> . "
    (64) classliteral -> . #
    (65) classliteral -> . $
    (66) classliteral -> . %
    (67) classliteral -> . &
    (68) classliteral -> . '
    (69) classliteral -> . (
    (70) classliteral -> . )
    (71) classliteral -> . *
    (72) classliteral -> . +
    (73) classliteral -> . ,
    (74) classliteral -> . .
    (75) classliteral -> . /
    (76) classliteral -> . :
    (77) classliteral -> . ;
    (78) classliteral -> . <
    (79) classliteral -> . =
    (80) classliteral -> . >
    (81) classliteral -> . ?
    (82) classliteral -> . @
    (83) classliteral -> . [
    (84) classliteral -> . \
    (85) classliteral -> . _
    (86) classliteral -> . `
    (87) classliteral -> . {
    (88) classliteral -> . }
    (89) classliteral -> . ~
    (90) classliteral -> . literal
    (91) classrange -> . classliteral - classliteral
    (107) literal -> . ESCAPED
    (108) literal -> . ALPHA
    (109) literal -> . DIGIT
    (110) literal -> . OTHER

    ^               shift and go to state 55
    !               shift and go to state 60
    "               shift and go to state 53
    #               shift and go to state 59
    $               shift and go to state 57
    %               shift and go to state 77
    &               shift and go to state 76
    '               shift and go to state 64
    (               shift and go to state 74
    )               shift and go to state 45
    *               shift and go to state 50
    +               shift and go to state 63
    ,               shift and go to state 66
    .               shift and go to state 62
    /               shift and go to state 67
    :               shift and go to state 61
    ;               shift and go to state 69
    <               shift and go to state 47
    =               shift and go to state 52
    >               shift and go to state 71
    ?               shift and go to state 46
    @               shift and go to state 51
    [               shift and go to state 43
    \               shift and go to state 78
    _               shift and go to state 48
    `               shift and go to state 49
    {               shift and go to state 72
    }               shift and go to state 75
    ~               shift and go to state 56
    ESCAPED         shift and go to state 39
    ALPHA           shift and go to state 34
    DIGIT           shift and go to state 28
    OTHER           shift and go to state 7

    classitems                     shift and go to state 70
    baseitems                      shift and go to state 65
    classliteral                   shift and go to state 54
    literal                        shift and go to state 58
    classrange                     shift and go to state 44
    classatom                      shift and go to state 68
    classitems2                    shift and go to state 73

state 2

    (24) elementary -> anchor .

    *               reduce using rule 24 (elementary -> anchor .)
    +               reduce using rule 24 (elementary -> anchor .)
    ?               reduce using rule 24 (elementary -> anchor .)
    {               reduce using rule 24 (elementary -> anchor .)
    (               reduce using rule 24 (elementary -> anchor .)
    ^               reduce using rule 24 (elementary -> anchor .)
    >               reduce using rule 24 (elementary -> anchor .)
    <               reduce using rule 24 (elementary -> anchor .)
    /               reduce using rule 24 (elementary -> anchor .)
    \               reduce using rule 24 (elementary -> anchor .)
    #               reduce using rule 24 (elementary -> anchor .)
    %               reduce using rule 24 (elementary -> anchor .)
    ESCAPED         reduce using rule 24 (elementary -> anchor .)
    ALPHA           reduce using rule 24 (elementary -> anchor .)
    DIGIT           reduce using rule 24 (elementary -> anchor .)
    OTHER           reduce using rule 24 (elementary -> anchor .)
    [               reduce using rule 24 (elementary -> anchor .)
    .               reduce using rule 24 (elementary -> anchor .)
    ,               reduce using rule 24 (elementary -> anchor .)
    :               reduce using rule 24 (elementary -> anchor .)
    ;               reduce using rule 24 (elementary -> anchor .)
    $               reduce using rule 24 (elementary -> anchor .)
    `               reduce using rule 24 (elementary -> anchor .)
    |               reduce using rule 24 (elementary -> anchor .)
    $end            reduce using rule 24 (elementary -> anchor .)
    )               reduce using rule 24 (elementary -> anchor .)


state 3

    (22) elementary -> nomatch .

    *               reduce using rule 22 (elementary -> nomatch .)
    +               reduce using rule 22 (elementary -> nomatch .)
    ?               reduce using rule 22 (elementary -> nomatch .)
    {               reduce using rule 22 (elementary -> nomatch .)
    (               reduce using rule 22 (elementary -> nomatch .)
    ^               reduce using rule 22 (elementary -> nomatch .)
    >               reduce using rule 22 (elementary -> nomatch .)
    <               reduce using rule 22 (elementary -> nomatch .)
    /               reduce using rule 22 (elementary -> nomatch .)
    \               reduce using rule 22 (elementary -> nomatch .)
    #               reduce using rule 22 (elementary -> nomatch .)
    %               reduce using rule 22 (elementary -> nomatch .)
    ESCAPED         reduce using rule 22 (elementary -> nomatch .)
    ALPHA           reduce using rule 22 (elementary -> nomatch .)
    DIGIT           reduce using rule 22 (elementary -> nomatch .)
    OTHER           reduce using rule 22 (elementary -> nomatch .)
    [               reduce using rule 22 (elementary -> nomatch .)
    .               reduce using rule 22 (elementary -> nomatch .)
    ,               reduce using rule 22 (elementary -> nomatch .)
    :               reduce using rule 22 (elementary -> nomatch .)
    ;               reduce using rule 22 (elementary -> nomatch .)
    $               reduce using rule 22 (elementary -> nomatch .)
    `               reduce using rule 22 (elementary -> nomatch .)
    |               reduce using rule 22 (elementary -> nomatch .)
    $end            reduce using rule 22 (elementary -> nomatch .)
    )               reduce using rule 22 (elementary -> nomatch .)


state 4

    (102) command -> < .

    *               reduce using rule 102 (command -> < .)
    +               reduce using rule 102 (command -> < .)
    ?               reduce using rule 102 (command -> < .)
    {               reduce using rule 102 (command -> < .)
    (               reduce using rule 102 (command -> < .)
    ^               reduce using rule 102 (command -> < .)
    >               reduce using rule 102 (command -> < .)
    <               reduce using rule 102 (command -> < .)
    /               reduce using rule 102 (command -> < .)
    \               reduce using rule 102 (command -> < .)
    #               reduce using rule 102 (command -> < .)
    %               reduce using rule 102 (command -> < .)
    ESCAPED         reduce using rule 102 (command -> < .)
    ALPHA           reduce using rule 102 (command -> < .)
    DIGIT           reduce using rule 102 (command -> < .)
    OTHER           reduce using rule 102 (command -> < .)
    [               reduce using rule 102 (command -> < .)
    .               reduce using rule 102 (command -> < .)
    ,               reduce using rule 102 (command -> < .)
    :               reduce using rule 102 (command -> < .)
    ;               reduce using rule 102 (command -> < .)
    $               reduce using rule 102 (command -> < .)
    `               reduce using rule 102 (command -> < .)
    |               reduce using rule 102 (command -> < .)
    $end            reduce using rule 102 (command -> < .)
    )               reduce using rule 102 (command -> < .)


state 5

    (17) elementary -> command .

    *               reduce using rule 17 (elementary -> command .)
    +               reduce using rule 17 (elementary -> command .)
    ?               reduce using rule 17 (elementary -> command .)
    {               reduce using rule 17 (elementary -> command .)
    (               reduce using rule 17 (elementary -> command .)
    ^               reduce using rule 17 (elementary -> command .)
    >               reduce using rule 17 (elementary -> command .)
    <               reduce using rule 17 (elementary -> command .)
    /               reduce using rule 17 (elementary -> command .)
    \               reduce using rule 17 (elementary -> command .)
    #               reduce using rule 17 (elementary -> command .)
    %               reduce using rule 17 (elementary -> command .)
    ESCAPED         reduce using rule 17 (elementary -> command .)
    ALPHA           reduce using rule 17 (elementary -> command .)
    DIGIT           reduce using rule 17 (elementary -> command .)
    OTHER           reduce using rule 17 (elementary -> command .)
    [               reduce using rule 17 (elementary -> command .)
    .               reduce using rule 17 (elementary -> command .)
    ,               reduce using rule 17 (elementary -> command .)
    :               reduce using rule 17 (elementary -> command .)
    ;               reduce using rule 17 (elementary -> command .)
    $               reduce using rule 17 (elementary -> command .)
    `               reduce using rule 17 (elementary -> command .)
    |               reduce using rule 17 (elementary -> command .)
    $end            reduce using rule 17 (elementary -> command .)
    )               reduce using rule 17 (elementary -> command .)


state 6

    (8) basic -> quantifier .

    (               reduce using rule 8 (basic -> quantifier .)
    ^               reduce using rule 8 (basic -> quantifier .)
    >               reduce using rule 8 (basic -> quantifier .)
    <               reduce using rule 8 (basic -> quantifier .)
    /               reduce using rule 8 (basic -> quantifier .)
    \               reduce using rule 8 (basic -> quantifier .)
    #               reduce using rule 8 (basic -> quantifier .)
    %               reduce using rule 8 (basic -> quantifier .)
    ESCAPED         reduce using rule 8 (basic -> quantifier .)
    ALPHA           reduce using rule 8 (basic -> quantifier .)
    DIGIT           reduce using rule 8 (basic -> quantifier .)
    OTHER           reduce using rule 8 (basic -> quantifier .)
    [               reduce using rule 8 (basic -> quantifier .)
    .               reduce using rule 8 (basic -> quantifier .)
    ,               reduce using rule 8 (basic -> quantifier .)
    :               reduce using rule 8 (basic -> quantifier .)
    ;               reduce using rule 8 (basic -> quantifier .)
    $               reduce using rule 8 (basic -> quantifier .)
    `               reduce using rule 8 (basic -> quantifier .)
    |               reduce using rule 8 (basic -> quantifier .)
    )               reduce using rule 8 (basic -> quantifier .)
    $end            reduce using rule 8 (basic -> quantifier .)


state 7

    (110) literal -> OTHER .

    *               reduce using rule 110 (literal -> OTHER .)
    +               reduce using rule 110 (literal -> OTHER .)
    ?               reduce using rule 110 (literal -> OTHER .)
    {               reduce using rule 110 (literal -> OTHER .)
    (               reduce using rule 110 (literal -> OTHER .)
    ^               reduce using rule 110 (literal -> OTHER .)
    >               reduce using rule 110 (literal -> OTHER .)
    <               reduce using rule 110 (literal -> OTHER .)
    /               reduce using rule 110 (literal -> OTHER .)
    \               reduce using rule 110 (literal -> OTHER .)
    #               reduce using rule 110 (literal -> OTHER .)
    %               reduce using rule 110 (literal -> OTHER .)
    ESCAPED         reduce using rule 110 (literal -> OTHER .)
    ALPHA           reduce using rule 110 (literal -> OTHER .)
    DIGIT           reduce using rule 110 (literal -> OTHER .)
    OTHER           reduce using rule 110 (literal -> OTHER .)
    [               reduce using rule 110 (literal -> OTHER .)
    .               reduce using rule 110 (literal -> OTHER .)
    ,               reduce using rule 110 (literal -> OTHER .)
    :               reduce using rule 110 (literal -> OTHER .)
    ;               reduce using rule 110 (literal -> OTHER .)
    $               reduce using rule 110 (literal -> OTHER .)
    `               reduce using rule 110 (literal -> OTHER .)
    |               reduce using rule 110 (literal -> OTHER .)
    )               reduce using rule 110 (literal -> OTHER .)
    $end            reduce using rule 110 (literal -> OTHER .)
    -               reduce using rule 110 (literal -> OTHER .)
    !               reduce using rule 110 (literal -> OTHER .)
    "               reduce using rule 110 (literal -> OTHER .)
    &               reduce using rule 110 (literal -> OTHER .)
    '               reduce using rule 110 (literal -> OTHER .)
    =               reduce using rule 110 (literal -> OTHER .)
    @               reduce using rule 110 (literal -> OTHER .)
    _               reduce using rule 110 (literal -> OTHER .)
    }               reduce using rule 110 (literal -> OTHER .)
    ~               reduce using rule 110 (literal -> OTHER .)
    ]               reduce using rule 110 (literal -> OTHER .)


state 8

    (23) elementary -> nodispmatch .

    *               reduce using rule 23 (elementary -> nodispmatch .)
    +               reduce using rule 23 (elementary -> nodispmatch .)
    ?               reduce using rule 23 (elementary -> nodispmatch .)
    {               reduce using rule 23 (elementary -> nodispmatch .)
    (               reduce using rule 23 (elementary -> nodispmatch .)
    ^               reduce using rule 23 (elementary -> nodispmatch .)
    >               reduce using rule 23 (elementary -> nodispmatch .)
    <               reduce using rule 23 (elementary -> nodispmatch .)
    /               reduce using rule 23 (elementary -> nodispmatch .)
    \               reduce using rule 23 (elementary -> nodispmatch .)
    #               reduce using rule 23 (elementary -> nodispmatch .)
    %               reduce using rule 23 (elementary -> nodispmatch .)
    ESCAPED         reduce using rule 23 (elementary -> nodispmatch .)
    ALPHA           reduce using rule 23 (elementary -> nodispmatch .)
    DIGIT           reduce using rule 23 (elementary -> nodispmatch .)
    OTHER           reduce using rule 23 (elementary -> nodispmatch .)
    [               reduce using rule 23 (elementary -> nodispmatch .)
    .               reduce using rule 23 (elementary -> nodispmatch .)
    ,               reduce using rule 23 (elementary -> nodispmatch .)
    :               reduce using rule 23 (elementary -> nodispmatch .)
    ;               reduce using rule 23 (elementary -> nodispmatch .)
    $               reduce using rule 23 (elementary -> nodispmatch .)
    `               reduce using rule 23 (elementary -> nodispmatch .)
    |               reduce using rule 23 (elementary -> nodispmatch .)
    $end            reduce using rule 23 (elementary -> nodispmatch .)
    )               reduce using rule 23 (elementary -> nodispmatch .)


state 9

    (2) re -> simple .
    (6) concatenation -> simple . basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . nomatch
    (23) elementary -> . nodispmatch
    (24) elementary -> . anchor
    (25) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (39) group -> . ( groupbody )
    (93) directional -> . ^ DIGIT
    (94) directional -> . ^ ALPHA
    (95) directional -> . ^ *
    (96) directional -> . ^ +
    (101) command -> . >
    (102) command -> . <
    (103) command -> . /
    (104) command -> . \
    (105) command -> . #
    (106) command -> . %
    (107) literal -> . ESCAPED
    (108) literal -> . ALPHA
    (109) literal -> . DIGIT
    (110) literal -> . OTHER
    (53) charclass -> . [ classitems ]
    (33) anychar -> . .
    (34) nodisplay -> . ,
    (35) nomatch -> . :
    (36) nodispmatch -> . ;
    (97) anchor -> . $ DIGIT
    (98) anchor -> . $ ALPHA
    (99) anchor -> . $ *
    (100) anchor -> . $ +
    (92) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (26) asterisk -> . elementary *
    (27) plus -> . elementary +
    (28) optional -> . elementary ?
    (29) nrepeat -> . elementary { number }
    (30) nrepeat -> . elementary { , number }
    (31) nrepeat -> . elementary { number , }
    (32) nrepeat -> . elementary { number , number }

    |               reduce using rule 2 (re -> simple .)
    )               reduce using rule 2 (re -> simple .)
    $end            reduce using rule 2 (re -> simple .)
    (               shift and go to state 22
    ^               shift and go to state 30
    >               shift and go to state 38
    <               shift and go to state 4
    /               shift and go to state 19
    \               shift and go to state 25
    #               shift and go to state 13
    %               shift and go to state 42
    ESCAPED         shift and go to state 39
    ALPHA           shift and go to state 34
    DIGIT           shift and go to state 28
    OTHER           shift and go to state 7
    [               shift and go to state 1
    .               shift and go to state 33
    ,               shift and go to state 18
    :               shift and go to state 15
    ;               shift and go to state 21
    $               shift and go to state 32
    `               shift and go to state 29

    basequantifier                 shift and go to state 27
    anchor                         shift and go to state 2
    nomatch                        shift and go to state 3
    command                        shift and go to state 5
    nodispmatch                    shift and go to state 8
    optional                       shift and go to state 31
    literal                        shift and go to state 11
    nodisplay                      shift and go to state 12
    nrepeat                        shift and go to state 14
    group                          shift and go to state 16
    plus                           shift and go to state 17
    directional                    shift and go to state 35
    predefined                     shift and go to state 36
    quantifier                     shift and go to state 6
    charclass                      shift and go to state 20
    anychar                        shift and go to state 37
    basic                          shift and go to state 79
    elementary                     shift and go to state 41
    asterisk                       shift and go to state 24

state 10

    (0) S' -> re .
    (3) alternation -> re . | simple

    |               shift and go to state 80


state 11

    (18) elementary -> literal .

    *               reduce using rule 18 (elementary -> literal .)
    +               reduce using rule 18 (elementary -> literal .)
    ?               reduce using rule 18 (elementary -> literal .)
    {               reduce using rule 18 (elementary -> literal .)
    (               reduce using rule 18 (elementary -> literal .)
    ^               reduce using rule 18 (elementary -> literal .)
    >               reduce using rule 18 (elementary -> literal .)
    <               reduce using rule 18 (elementary -> literal .)
    /               reduce using rule 18 (elementary -> literal .)
    \               reduce using rule 18 (elementary -> literal .)
    #               reduce using rule 18 (elementary -> literal .)
    %               reduce using rule 18 (elementary -> literal .)
    ESCAPED         reduce using rule 18 (elementary -> literal .)
    ALPHA           reduce using rule 18 (elementary -> literal .)
    DIGIT           reduce using rule 18 (elementary -> literal .)
    OTHER           reduce using rule 18 (elementary -> literal .)
    [               reduce using rule 18 (elementary -> literal .)
    .               reduce using rule 18 (elementary -> literal .)
    ,               reduce using rule 18 (elementary -> literal .)
    :               reduce using rule 18 (elementary -> literal .)
    ;               reduce using rule 18 (elementary -> literal .)
    $               reduce using rule 18 (elementary -> literal .)
    `               reduce using rule 18 (elementary -> literal .)
    |               reduce using rule 18 (elementary -> literal .)
    $end            reduce using rule 18 (elementary -> literal .)
    )               reduce using rule 18 (elementary -> literal .)


state 12

    (21) elementary -> nodisplay .

    *               reduce using rule 21 (elementary -> nodisplay .)
    +               reduce using rule 21 (elementary -> nodisplay .)
    ?               reduce using rule 21 (elementary -> nodisplay .)
    {               reduce using rule 21 (elementary -> nodisplay .)
    (               reduce using rule 21 (elementary -> nodisplay .)
    ^               reduce using rule 21 (elementary -> nodisplay .)
    >               reduce using rule 21 (elementary -> nodisplay .)
    <               reduce using rule 21 (elementary -> nodisplay .)
    /               reduce using rule 21 (elementary -> nodisplay .)
    \               reduce using rule 21 (elementary -> nodisplay .)
    #               reduce using rule 21 (elementary -> nodisplay .)
    %               reduce using rule 21 (elementary -> nodisplay .)
    ESCAPED         reduce using rule 21 (elementary -> nodisplay .)
    ALPHA           reduce using rule 21 (elementary -> nodisplay .)
    DIGIT           reduce using rule 21 (elementary -> nodisplay .)
    OTHER           reduce using rule 21 (elementary -> nodisplay .)
    [               reduce using rule 21 (elementary -> nodisplay .)
    .               reduce using rule 21 (elementary -> nodisplay .)
    ,               reduce using rule 21 (elementary -> nodisplay .)
    :               reduce using rule 21 (elementary -> nodisplay .)
    ;               reduce using rule 21 (elementary -> nodisplay .)
    $               reduce using rule 21 (elementary -> nodisplay .)
    `               reduce using rule 21 (elementary -> nodisplay .)
    |               reduce using rule 21 (elementary -> nodisplay .)
    $end            reduce using rule 21 (elementary -> nodisplay .)
    )               reduce using rule 21 (elementary -> nodisplay .)


state 13

    (105) command -> # .

    *               reduce using rule 105 (command -> # .)
    +               reduce using rule 105 (command -> # .)
    ?               reduce using rule 105 (command -> # .)
    {               reduce using rule 105 (command -> # .)
    (               reduce using rule 105 (command -> # .)
    ^               reduce using rule 105 (command -> # .)
    >               reduce using rule 105 (command -> # .)
    <               reduce using rule 105 (command -> # .)
    /               reduce using rule 105 (command -> # .)
    \               reduce using rule 105 (command -> # .)
    #               reduce using rule 105 (command -> # .)
    %               reduce using rule 105 (command -> # .)
    ESCAPED         reduce using rule 105 (command -> # .)
    ALPHA           reduce using rule 105 (command -> # .)
    DIGIT           reduce using rule 105 (command -> # .)
    OTHER           reduce using rule 105 (command -> # .)
    [               reduce using rule 105 (command -> # .)
    .               reduce using rule 105 (command -> # .)
    ,               reduce using rule 105 (command -> # .)
    :               reduce using rule 105 (command -> # .)
    ;               reduce using rule 105 (command -> # .)
    $               reduce using rule 105 (command -> # .)
    `               reduce using rule 105 (command -> # .)
    |               reduce using rule 105 (command -> # .)
    $end            reduce using rule 105 (command -> # .)
    )               reduce using rule 105 (command -> # .)


state 14

    (14) basequantifier -> nrepeat .

    ?               reduce using rule 14 (basequantifier -> nrepeat .)
    (               reduce using rule 14 (basequantifier -> nrepeat .)
    ^               reduce using rule 14 (basequantifier -> nrepeat .)
    >               reduce using rule 14 (basequantifier -> nrepeat .)
    <               reduce using rule 14 (basequantifier -> nrepeat .)
    /               reduce using rule 14 (basequantifier -> nrepeat .)
    \               reduce using rule 14 (basequantifier -> nrepeat .)
    #               reduce using rule 14 (basequantifier -> nrepeat .)
    %               reduce using rule 14 (basequantifier -> nrepeat .)
    ESCAPED         reduce using rule 14 (basequantifier -> nrepeat .)
    ALPHA           reduce using rule 14 (basequantifier -> nrepeat .)
    DIGIT           reduce using rule 14 (basequantifier -> nrepeat .)
    OTHER           reduce using rule 14 (basequantifier -> nrepeat .)
    [               reduce using rule 14 (basequantifier -> nrepeat .)
    .               reduce using rule 14 (basequantifier -> nrepeat .)
    ,               reduce using rule 14 (basequantifier -> nrepeat .)
    :               reduce using rule 14 (basequantifier -> nrepeat .)
    ;               reduce using rule 14 (basequantifier -> nrepeat .)
    $               reduce using rule 14 (basequantifier -> nrepeat .)
    `               reduce using rule 14 (basequantifier -> nrepeat .)
    |               reduce using rule 14 (basequantifier -> nrepeat .)
    )               reduce using rule 14 (basequantifier -> nrepeat .)
    $end            reduce using rule 14 (basequantifier -> nrepeat .)


state 15

    (35) nomatch -> : .

    *               reduce using rule 35 (nomatch -> : .)
    +               reduce using rule 35 (nomatch -> : .)
    ?               reduce using rule 35 (nomatch -> : .)
    {               reduce using rule 35 (nomatch -> : .)
    (               reduce using rule 35 (nomatch -> : .)
    ^               reduce using rule 35 (nomatch -> : .)
    >               reduce using rule 35 (nomatch -> : .)
    <               reduce using rule 35 (nomatch -> : .)
    /               reduce using rule 35 (nomatch -> : .)
    \               reduce using rule 35 (nomatch -> : .)
    #               reduce using rule 35 (nomatch -> : .)
    %               reduce using rule 35 (nomatch -> : .)
    ESCAPED         reduce using rule 35 (nomatch -> : .)
    ALPHA           reduce using rule 35 (nomatch -> : .)
    DIGIT           reduce using rule 35 (nomatch -> : .)
    OTHER           reduce using rule 35 (nomatch -> : .)
    [               reduce using rule 35 (nomatch -> : .)
    .               reduce using rule 35 (nomatch -> : .)
    ,               reduce using rule 35 (nomatch -> : .)
    :               reduce using rule 35 (nomatch -> : .)
    ;               reduce using rule 35 (nomatch -> : .)
    $               reduce using rule 35 (nomatch -> : .)
    `               reduce using rule 35 (nomatch -> : .)
    |               reduce using rule 35 (nomatch -> : .)
    $end            reduce using rule 35 (nomatch -> : .)
    )               reduce using rule 35 (nomatch -> : .)


state 16

    (15) elementary -> group .

    *               reduce using rule 15 (elementary -> group .)
    +               reduce using rule 15 (elementary -> group .)
    ?               reduce using rule 15 (elementary -> group .)
    {               reduce using rule 15 (elementary -> group .)
    (               reduce using rule 15 (elementary -> group .)
    ^               reduce using rule 15 (elementary -> group .)
    >               reduce using rule 15 (elementary -> group .)
    <               reduce using rule 15 (elementary -> group .)
    /               reduce using rule 15 (elementary -> group .)
    \               reduce using rule 15 (elementary -> group .)
    #               reduce using rule 15 (elementary -> group .)
    %               reduce using rule 15 (elementary -> group .)
    ESCAPED         reduce using rule 15 (elementary -> group .)
    ALPHA           reduce using rule 15 (elementary -> group .)
    DIGIT           reduce using rule 15 (elementary -> group .)
    OTHER           reduce using rule 15 (elementary -> group .)
    [               reduce using rule 15 (elementary -> group .)
    .               reduce using rule 15 (elementary -> group .)
    ,               reduce using rule 15 (elementary -> group .)
    :               reduce using rule 15 (elementary -> group .)
    ;               reduce using rule 15 (elementary -> group .)
    $               reduce using rule 15 (elementary -> group .)
    `               reduce using rule 15 (elementary -> group .)
    |               reduce using rule 15 (elementary -> group .)
    $end            reduce using rule 15 (elementary -> group .)
    )               reduce using rule 15 (elementary -> group .)


state 17

    (12) basequantifier -> plus .

    ?               reduce using rule 12 (basequantifier -> plus .)
    (               reduce using rule 12 (basequantifier -> plus .)
    ^               reduce using rule 12 (basequantifier -> plus .)
    >               reduce using rule 12 (basequantifier -> plus .)
    <               reduce using rule 12 (basequantifier -> plus .)
    /               reduce using rule 12 (basequantifier -> plus .)
    \               reduce using rule 12 (basequantifier -> plus .)
    #               reduce using rule 12 (basequantifier -> plus .)
    %               reduce using rule 12 (basequantifier -> plus .)
    ESCAPED         reduce using rule 12 (basequantifier -> plus .)
    ALPHA           reduce using rule 12 (basequantifier -> plus .)
    DIGIT           reduce using rule 12 (basequantifier -> plus .)
    OTHER           reduce using rule 12 (basequantifier -> plus .)
    [               reduce using rule 12 (basequantifier -> plus .)
    .               reduce using rule 12 (basequantifier -> plus .)
    ,               reduce using rule 12 (basequantifier -> plus .)
    :               reduce using rule 12 (basequantifier -> plus .)
    ;               reduce using rule 12 (basequantifier -> plus .)
    $               reduce using rule 12 (basequantifier -> plus .)
    `               reduce using rule 12 (basequantifier -> plus .)
    |               reduce using rule 12 (basequantifier -> plus .)
    )               reduce using rule 12 (basequantifier -> plus .)
    $end            reduce using rule 12 (basequantifier -> plus .)


state 18

    (34) nodisplay -> , .

    *               reduce using rule 34 (nodisplay -> , .)
    +               reduce using rule 34 (nodisplay -> , .)
    ?               reduce using rule 34 (nodisplay -> , .)
    {               reduce using rule 34 (nodisplay -> , .)
    (               reduce using rule 34 (nodisplay -> , .)
    ^               reduce using rule 34 (nodisplay -> , .)
    >               reduce using rule 34 (nodisplay -> , .)
    <               reduce using rule 34 (nodisplay -> , .)
    /               reduce using rule 34 (nodisplay -> , .)
    \               reduce using rule 34 (nodisplay -> , .)
    #               reduce using rule 34 (nodisplay -> , .)
    %               reduce using rule 34 (nodisplay -> , .)
    ESCAPED         reduce using rule 34 (nodisplay -> , .)
    ALPHA           reduce using rule 34 (nodisplay -> , .)
    DIGIT           reduce using rule 34 (nodisplay -> , .)
    OTHER           reduce using rule 34 (nodisplay -> , .)
    [               reduce using rule 34 (nodisplay -> , .)
    .               reduce using rule 34 (nodisplay -> , .)
    ,               reduce using rule 34 (nodisplay -> , .)
    :               reduce using rule 34 (nodisplay -> , .)
    ;               reduce using rule 34 (nodisplay -> , .)
    $               reduce using rule 34 (nodisplay -> , .)
    `               reduce using rule 34 (nodisplay -> , .)
    |               reduce using rule 34 (nodisplay -> , .)
    $end            reduce using rule 34 (nodisplay -> , .)
    )               reduce using rule 34 (nodisplay -> , .)


state 19

    (103) command -> / .

    *               reduce using rule 103 (command -> / .)
    +               reduce using rule 103 (command -> / .)
    ?               reduce using rule 103 (command -> / .)
    {               reduce using rule 103 (command -> / .)
    (               reduce using rule 103 (command -> / .)
    ^               reduce using rule 103 (command -> / .)
    >               reduce using rule 103 (command -> / .)
    <               reduce using rule 103 (command -> / .)
    /               reduce using rule 103 (command -> / .)
    \               reduce using rule 103 (command -> / .)
    #               reduce using rule 103 (command -> / .)
    %               reduce using rule 103 (command -> / .)
    ESCAPED         reduce using rule 103 (command -> / .)
    ALPHA           reduce using rule 103 (command -> / .)
    DIGIT           reduce using rule 103 (command -> / .)
    OTHER           reduce using rule 103 (command -> / .)
    [               reduce using rule 103 (command -> / .)
    .               reduce using rule 103 (command -> / .)
    ,               reduce using rule 103 (command -> / .)
    :               reduce using rule 103 (command -> / .)
    ;               reduce using rule 103 (command -> / .)
    $               reduce using rule 103 (command -> / .)
    `               reduce using rule 103 (command -> / .)
    |               reduce using rule 103 (command -> / .)
    $end            reduce using rule 103 (command -> / .)
    )               reduce using rule 103 (command -> / .)


state 20

    (19) elementary -> charclass .

    *               reduce using rule 19 (elementary -> charclass .)
    +               reduce using rule 19 (elementary -> charclass .)
    ?               reduce using rule 19 (elementary -> charclass .)
    {               reduce using rule 19 (elementary -> charclass .)
    (               reduce using rule 19 (elementary -> charclass .)
    ^               reduce using rule 19 (elementary -> charclass .)
    >               reduce using rule 19 (elementary -> charclass .)
    <               reduce using rule 19 (elementary -> charclass .)
    /               reduce using rule 19 (elementary -> charclass .)
    \               reduce using rule 19 (elementary -> charclass .)
    #               reduce using rule 19 (elementary -> charclass .)
    %               reduce using rule 19 (elementary -> charclass .)
    ESCAPED         reduce using rule 19 (elementary -> charclass .)
    ALPHA           reduce using rule 19 (elementary -> charclass .)
    DIGIT           reduce using rule 19 (elementary -> charclass .)
    OTHER           reduce using rule 19 (elementary -> charclass .)
    [               reduce using rule 19 (elementary -> charclass .)
    .               reduce using rule 19 (elementary -> charclass .)
    ,               reduce using rule 19 (elementary -> charclass .)
    :               reduce using rule 19 (elementary -> charclass .)
    ;               reduce using rule 19 (elementary -> charclass .)
    $               reduce using rule 19 (elementary -> charclass .)
    `               reduce using rule 19 (elementary -> charclass .)
    |               reduce using rule 19 (elementary -> charclass .)
    $end            reduce using rule 19 (elementary -> charclass .)
    )               reduce using rule 19 (elementary -> charclass .)


state 21

    (36) nodispmatch -> ; .

    *               reduce using rule 36 (nodispmatch -> ; .)
    +               reduce using rule 36 (nodispmatch -> ; .)
    ?               reduce using rule 36 (nodispmatch -> ; .)
    {               reduce using rule 36 (nodispmatch -> ; .)
    (               reduce using rule 36 (nodispmatch -> ; .)
    ^               reduce using rule 36 (nodispmatch -> ; .)
    >               reduce using rule 36 (nodispmatch -> ; .)
    <               reduce using rule 36 (nodispmatch -> ; .)
    /               reduce using rule 36 (nodispmatch -> ; .)
    \               reduce using rule 36 (nodispmatch -> ; .)
    #               reduce using rule 36 (nodispmatch -> ; .)
    %               reduce using rule 36 (nodispmatch -> ; .)
    ESCAPED         reduce using rule 36 (nodispmatch -> ; .)
    ALPHA           reduce using rule 36 (nodispmatch -> ; .)
    DIGIT           reduce using rule 36 (nodispmatch -> ; .)
    OTHER           reduce using rule 36 (nodispmatch -> ; .)
    [               reduce using rule 36 (nodispmatch -> ; .)
    .               reduce using rule 36 (nodispmatch -> ; .)
    ,               reduce using rule 36 (nodispmatch -> ; .)
    :               reduce using rule 36 (nodispmatch -> ; .)
    ;               reduce using rule 36 (nodispmatch -> ; .)
    $               reduce using rule 36 (nodispmatch -> ; .)
    `               reduce using rule 36 (nodispmatch -> ; .)
    |               reduce using rule 36 (nodispmatch -> ; .)
    $end            reduce using rule 36 (nodispmatch -> ; .)
    )               reduce using rule 36 (nodispmatch -> ; .)


state 22

    (39) group -> ( . groupbody )
    (40) groupbody -> . ? specialgroup
    (41) groupbody -> . basicgroup
    (52) basicgroup -> . re
    (1) re -> . alternation
    (2) re -> . simple
    (3) alternation -> . re | simple
    (4) simple -> . concatenation
    (5) simple -> . basic
    (6) concatenation -> . simple basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . nomatch
    (23) elementary -> . nodispmatch
    (24) elementary -> . anchor
    (25) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (39) group -> . ( groupbody )
    (93) directional -> . ^ DIGIT
    (94) directional -> . ^ ALPHA
    (95) directional -> . ^ *
    (96) directional -> . ^ +
    (101) command -> . >
    (102) command -> . <
    (103) command -> . /
    (104) command -> . \
    (105) command -> . #
    (106) command -> . %
    (107) literal -> . ESCAPED
    (108) literal -> . ALPHA
    (109) literal -> . DIGIT
    (110) literal -> . OTHER
    (53) charclass -> . [ classitems ]
    (33) anychar -> . .
    (34) nodisplay -> . ,
    (35) nomatch -> . :
    (36) nodispmatch -> . ;
    (97) anchor -> . $ DIGIT
    (98) anchor -> . $ ALPHA
    (99) anchor -> . $ *
    (100) anchor -> . $ +
    (92) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (26) asterisk -> . elementary *
    (27) plus -> . elementary +
    (28) optional -> . elementary ?
    (29) nrepeat -> . elementary { number }
    (30) nrepeat -> . elementary { , number }
    (31) nrepeat -> . elementary { number , }
    (32) nrepeat -> . elementary { number , number }

    ?               shift and go to state 84
    (               shift and go to state 22
    ^               shift and go to state 30
    >               shift and go to state 38
    <               shift and go to state 4
    /               shift and go to state 19
    \               shift and go to state 25
    #               shift and go to state 13
    %               shift and go to state 42
    ESCAPED         shift and go to state 39
    ALPHA           shift and go to state 34
    DIGIT           shift and go to state 28
    OTHER           shift and go to state 7
    [               shift and go to state 1
    .               shift and go to state 33
    ,               shift and go to state 18
    :               shift and go to state 15
    ;               shift and go to state 21
    $               shift and go to state 32
    `               shift and go to state 29

    alternation                    shift and go to state 26
    basequantifier                 shift and go to state 27
    anchor                         shift and go to state 2
    nomatch                        shift and go to state 3
    command                        shift and go to state 5
    nodispmatch                    shift and go to state 8
    simple                         shift and go to state 9
    nodisplay                      shift and go to state 12
    optional                       shift and go to state 31
    nrepeat                        shift and go to state 14
    literal                        shift and go to state 11
    re                             shift and go to state 81
    groupbody                      shift and go to state 82
    elementary                     shift and go to state 41
    concatenation                  shift and go to state 23
    group                          shift and go to state 16
    plus                           shift and go to state 17
    directional                    shift and go to state 35
    predefined                     shift and go to state 36
    quantifier                     shift and go to state 6
    charclass                      shift and go to state 20
    anychar                        shift and go to state 37
    basic                          shift and go to state 40
    basicgroup                     shift and go to state 83
    asterisk                       shift and go to state 24

state 23

    (4) simple -> concatenation .

    (               reduce using rule 4 (simple -> concatenation .)
    ^               reduce using rule 4 (simple -> concatenation .)
    >               reduce using rule 4 (simple -> concatenation .)
    <               reduce using rule 4 (simple -> concatenation .)
    /               reduce using rule 4 (simple -> concatenation .)
    \               reduce using rule 4 (simple -> concatenation .)
    #               reduce using rule 4 (simple -> concatenation .)
    %               reduce using rule 4 (simple -> concatenation .)
    ESCAPED         reduce using rule 4 (simple -> concatenation .)
    ALPHA           reduce using rule 4 (simple -> concatenation .)
    DIGIT           reduce using rule 4 (simple -> concatenation .)
    OTHER           reduce using rule 4 (simple -> concatenation .)
    [               reduce using rule 4 (simple -> concatenation .)
    .               reduce using rule 4 (simple -> concatenation .)
    ,               reduce using rule 4 (simple -> concatenation .)
    :               reduce using rule 4 (simple -> concatenation .)
    ;               reduce using rule 4 (simple -> concatenation .)
    $               reduce using rule 4 (simple -> concatenation .)
    `               reduce using rule 4 (simple -> concatenation .)
    |               reduce using rule 4 (simple -> concatenation .)
    )               reduce using rule 4 (simple -> concatenation .)
    $end            reduce using rule 4 (simple -> concatenation .)


state 24

    (11) basequantifier -> asterisk .

    ?               reduce using rule 11 (basequantifier -> asterisk .)
    (               reduce using rule 11 (basequantifier -> asterisk .)
    ^               reduce using rule 11 (basequantifier -> asterisk .)
    >               reduce using rule 11 (basequantifier -> asterisk .)
    <               reduce using rule 11 (basequantifier -> asterisk .)
    /               reduce using rule 11 (basequantifier -> asterisk .)
    \               reduce using rule 11 (basequantifier -> asterisk .)
    #               reduce using rule 11 (basequantifier -> asterisk .)
    %               reduce using rule 11 (basequantifier -> asterisk .)
    ESCAPED         reduce using rule 11 (basequantifier -> asterisk .)
    ALPHA           reduce using rule 11 (basequantifier -> asterisk .)
    DIGIT           reduce using rule 11 (basequantifier -> asterisk .)
    OTHER           reduce using rule 11 (basequantifier -> asterisk .)
    [               reduce using rule 11 (basequantifier -> asterisk .)
    .               reduce using rule 11 (basequantifier -> asterisk .)
    ,               reduce using rule 11 (basequantifier -> asterisk .)
    :               reduce using rule 11 (basequantifier -> asterisk .)
    ;               reduce using rule 11 (basequantifier -> asterisk .)
    $               reduce using rule 11 (basequantifier -> asterisk .)
    `               reduce using rule 11 (basequantifier -> asterisk .)
    |               reduce using rule 11 (basequantifier -> asterisk .)
    )               reduce using rule 11 (basequantifier -> asterisk .)
    $end            reduce using rule 11 (basequantifier -> asterisk .)


state 25

    (104) command -> \ .

    *               reduce using rule 104 (command -> \ .)
    +               reduce using rule 104 (command -> \ .)
    ?               reduce using rule 104 (command -> \ .)
    {               reduce using rule 104 (command -> \ .)
    (               reduce using rule 104 (command -> \ .)
    ^               reduce using rule 104 (command -> \ .)
    >               reduce using rule 104 (command -> \ .)
    <               reduce using rule 104 (command -> \ .)
    /               reduce using rule 104 (command -> \ .)
    \               reduce using rule 104 (command -> \ .)
    #               reduce using rule 104 (command -> \ .)
    %               reduce using rule 104 (command -> \ .)
    ESCAPED         reduce using rule 104 (command -> \ .)
    ALPHA           reduce using rule 104 (command -> \ .)
    DIGIT           reduce using rule 104 (command -> \ .)
    OTHER           reduce using rule 104 (command -> \ .)
    [               reduce using rule 104 (command -> \ .)
    .               reduce using rule 104 (command -> \ .)
    ,               reduce using rule 104 (command -> \ .)
    :               reduce using rule 104 (command -> \ .)
    ;               reduce using rule 104 (command -> \ .)
    $               reduce using rule 104 (command -> \ .)
    `               reduce using rule 104 (command -> \ .)
    |               reduce using rule 104 (command -> \ .)
    $end            reduce using rule 104 (command -> \ .)
    )               reduce using rule 104 (command -> \ .)


state 26

    (1) re -> alternation .

    |               reduce using rule 1 (re -> alternation .)
    )               reduce using rule 1 (re -> alternation .)
    $end            reduce using rule 1 (re -> alternation .)


state 27

    (9) quantifier -> basequantifier .
    (10) quantifier -> basequantifier . ?

    (               reduce using rule 9 (quantifier -> basequantifier .)
    ^               reduce using rule 9 (quantifier -> basequantifier .)
    >               reduce using rule 9 (quantifier -> basequantifier .)
    <               reduce using rule 9 (quantifier -> basequantifier .)
    /               reduce using rule 9 (quantifier -> basequantifier .)
    \               reduce using rule 9 (quantifier -> basequantifier .)
    #               reduce using rule 9 (quantifier -> basequantifier .)
    %               reduce using rule 9 (quantifier -> basequantifier .)
    ESCAPED         reduce using rule 9 (quantifier -> basequantifier .)
    ALPHA           reduce using rule 9 (quantifier -> basequantifier .)
    DIGIT           reduce using rule 9 (quantifier -> basequantifier .)
    OTHER           reduce using rule 9 (quantifier -> basequantifier .)
    [               reduce using rule 9 (quantifier -> basequantifier .)
    .               reduce using rule 9 (quantifier -> basequantifier .)
    ,               reduce using rule 9 (quantifier -> basequantifier .)
    :               reduce using rule 9 (quantifier -> basequantifier .)
    ;               reduce using rule 9 (quantifier -> basequantifier .)
    $               reduce using rule 9 (quantifier -> basequantifier .)
    `               reduce using rule 9 (quantifier -> basequantifier .)
    |               reduce using rule 9 (quantifier -> basequantifier .)
    )               reduce using rule 9 (quantifier -> basequantifier .)
    $end            reduce using rule 9 (quantifier -> basequantifier .)
    ?               shift and go to state 85


state 28

    (109) literal -> DIGIT .

    *               reduce using rule 109 (literal -> DIGIT .)
    +               reduce using rule 109 (literal -> DIGIT .)
    ?               reduce using rule 109 (literal -> DIGIT .)
    {               reduce using rule 109 (literal -> DIGIT .)
    (               reduce using rule 109 (literal -> DIGIT .)
    ^               reduce using rule 109 (literal -> DIGIT .)
    >               reduce using rule 109 (literal -> DIGIT .)
    <               reduce using rule 109 (literal -> DIGIT .)
    /               reduce using rule 109 (literal -> DIGIT .)
    \               reduce using rule 109 (literal -> DIGIT .)
    #               reduce using rule 109 (literal -> DIGIT .)
    %               reduce using rule 109 (literal -> DIGIT .)
    ESCAPED         reduce using rule 109 (literal -> DIGIT .)
    ALPHA           reduce using rule 109 (literal -> DIGIT .)
    DIGIT           reduce using rule 109 (literal -> DIGIT .)
    OTHER           reduce using rule 109 (literal -> DIGIT .)
    [               reduce using rule 109 (literal -> DIGIT .)
    .               reduce using rule 109 (literal -> DIGIT .)
    ,               reduce using rule 109 (literal -> DIGIT .)
    :               reduce using rule 109 (literal -> DIGIT .)
    ;               reduce using rule 109 (literal -> DIGIT .)
    $               reduce using rule 109 (literal -> DIGIT .)
    `               reduce using rule 109 (literal -> DIGIT .)
    |               reduce using rule 109 (literal -> DIGIT .)
    )               reduce using rule 109 (literal -> DIGIT .)
    $end            reduce using rule 109 (literal -> DIGIT .)
    -               reduce using rule 109 (literal -> DIGIT .)
    !               reduce using rule 109 (literal -> DIGIT .)
    "               reduce using rule 109 (literal -> DIGIT .)
    &               reduce using rule 109 (literal -> DIGIT .)
    '               reduce using rule 109 (literal -> DIGIT .)
    =               reduce using rule 109 (literal -> DIGIT .)
    @               reduce using rule 109 (literal -> DIGIT .)
    _               reduce using rule 109 (literal -> DIGIT .)
    }               reduce using rule 109 (literal -> DIGIT .)
    ~               reduce using rule 109 (literal -> DIGIT .)
    ]               reduce using rule 109 (literal -> DIGIT .)


state 29

    (92) predefined -> ` . ALPHA

    ALPHA           shift and go to state 86


state 30

    (93) directional -> ^ . DIGIT
    (94) directional -> ^ . ALPHA
    (95) directional -> ^ . *
    (96) directional -> ^ . +

    DIGIT           shift and go to state 90
    ALPHA           shift and go to state 89
    *               shift and go to state 87
    +               shift and go to state 88


state 31

    (13) basequantifier -> optional .

    ?               reduce using rule 13 (basequantifier -> optional .)
    (               reduce using rule 13 (basequantifier -> optional .)
    ^               reduce using rule 13 (basequantifier -> optional .)
    >               reduce using rule 13 (basequantifier -> optional .)
    <               reduce using rule 13 (basequantifier -> optional .)
    /               reduce using rule 13 (basequantifier -> optional .)
    \               reduce using rule 13 (basequantifier -> optional .)
    #               reduce using rule 13 (basequantifier -> optional .)
    %               reduce using rule 13 (basequantifier -> optional .)
    ESCAPED         reduce using rule 13 (basequantifier -> optional .)
    ALPHA           reduce using rule 13 (basequantifier -> optional .)
    DIGIT           reduce using rule 13 (basequantifier -> optional .)
    OTHER           reduce using rule 13 (basequantifier -> optional .)
    [               reduce using rule 13 (basequantifier -> optional .)
    .               reduce using rule 13 (basequantifier -> optional .)
    ,               reduce using rule 13 (basequantifier -> optional .)
    :               reduce using rule 13 (basequantifier -> optional .)
    ;               reduce using rule 13 (basequantifier -> optional .)
    $               reduce using rule 13 (basequantifier -> optional .)
    `               reduce using rule 13 (basequantifier -> optional .)
    |               reduce using rule 13 (basequantifier -> optional .)
    )               reduce using rule 13 (basequantifier -> optional .)
    $end            reduce using rule 13 (basequantifier -> optional .)


state 32

    (97) anchor -> $ . DIGIT
    (98) anchor -> $ . ALPHA
    (99) anchor -> $ . *
    (100) anchor -> $ . +

    DIGIT           shift and go to state 94
    ALPHA           shift and go to state 92
    *               shift and go to state 91
    +               shift and go to state 93


state 33

    (33) anychar -> . .

    *               reduce using rule 33 (anychar -> . .)
    +               reduce using rule 33 (anychar -> . .)
    ?               reduce using rule 33 (anychar -> . .)
    {               reduce using rule 33 (anychar -> . .)
    (               reduce using rule 33 (anychar -> . .)
    ^               reduce using rule 33 (anychar -> . .)
    >               reduce using rule 33 (anychar -> . .)
    <               reduce using rule 33 (anychar -> . .)
    /               reduce using rule 33 (anychar -> . .)
    \               reduce using rule 33 (anychar -> . .)
    #               reduce using rule 33 (anychar -> . .)
    %               reduce using rule 33 (anychar -> . .)
    ESCAPED         reduce using rule 33 (anychar -> . .)
    ALPHA           reduce using rule 33 (anychar -> . .)
    DIGIT           reduce using rule 33 (anychar -> . .)
    OTHER           reduce using rule 33 (anychar -> . .)
    [               reduce using rule 33 (anychar -> . .)
    .               reduce using rule 33 (anychar -> . .)
    ,               reduce using rule 33 (anychar -> . .)
    :               reduce using rule 33 (anychar -> . .)
    ;               reduce using rule 33 (anychar -> . .)
    $               reduce using rule 33 (anychar -> . .)
    `               reduce using rule 33 (anychar -> . .)
    |               reduce using rule 33 (anychar -> . .)
    $end            reduce using rule 33 (anychar -> . .)
    )               reduce using rule 33 (anychar -> . .)


state 34

    (108) literal -> ALPHA .

    *               reduce using rule 108 (literal -> ALPHA .)
    +               reduce using rule 108 (literal -> ALPHA .)
    ?               reduce using rule 108 (literal -> ALPHA .)
    {               reduce using rule 108 (literal -> ALPHA .)
    (               reduce using rule 108 (literal -> ALPHA .)
    ^               reduce using rule 108 (literal -> ALPHA .)
    >               reduce using rule 108 (literal -> ALPHA .)
    <               reduce using rule 108 (literal -> ALPHA .)
    /               reduce using rule 108 (literal -> ALPHA .)
    \               reduce using rule 108 (literal -> ALPHA .)
    #               reduce using rule 108 (literal -> ALPHA .)
    %               reduce using rule 108 (literal -> ALPHA .)
    ESCAPED         reduce using rule 108 (literal -> ALPHA .)
    ALPHA           reduce using rule 108 (literal -> ALPHA .)
    DIGIT           reduce using rule 108 (literal -> ALPHA .)
    OTHER           reduce using rule 108 (literal -> ALPHA .)
    [               reduce using rule 108 (literal -> ALPHA .)
    .               reduce using rule 108 (literal -> ALPHA .)
    ,               reduce using rule 108 (literal -> ALPHA .)
    :               reduce using rule 108 (literal -> ALPHA .)
    ;               reduce using rule 108 (literal -> ALPHA .)
    $               reduce using rule 108 (literal -> ALPHA .)
    `               reduce using rule 108 (literal -> ALPHA .)
    |               reduce using rule 108 (literal -> ALPHA .)
    )               reduce using rule 108 (literal -> ALPHA .)
    $end            reduce using rule 108 (literal -> ALPHA .)
    -               reduce using rule 108 (literal -> ALPHA .)
    !               reduce using rule 108 (literal -> ALPHA .)
    "               reduce using rule 108 (literal -> ALPHA .)
    &               reduce using rule 108 (literal -> ALPHA .)
    '               reduce using rule 108 (literal -> ALPHA .)
    =               reduce using rule 108 (literal -> ALPHA .)
    @               reduce using rule 108 (literal -> ALPHA .)
    _               reduce using rule 108 (literal -> ALPHA .)
    }               reduce using rule 108 (literal -> ALPHA .)
    ~               reduce using rule 108 (literal -> ALPHA .)
    ]               reduce using rule 108 (literal -> ALPHA .)


state 35

    (16) elementary -> directional .

    *               reduce using rule 16 (elementary -> directional .)
    +               reduce using rule 16 (elementary -> directional .)
    ?               reduce using rule 16 (elementary -> directional .)
    {               reduce using rule 16 (elementary -> directional .)
    (               reduce using rule 16 (elementary -> directional .)
    ^               reduce using rule 16 (elementary -> directional .)
    >               reduce using rule 16 (elementary -> directional .)
    <               reduce using rule 16 (elementary -> directional .)
    /               reduce using rule 16 (elementary -> directional .)
    \               reduce using rule 16 (elementary -> directional .)
    #               reduce using rule 16 (elementary -> directional .)
    %               reduce using rule 16 (elementary -> directional .)
    ESCAPED         reduce using rule 16 (elementary -> directional .)
    ALPHA           reduce using rule 16 (elementary -> directional .)
    DIGIT           reduce using rule 16 (elementary -> directional .)
    OTHER           reduce using rule 16 (elementary -> directional .)
    [               reduce using rule 16 (elementary -> directional .)
    .               reduce using rule 16 (elementary -> directional .)
    ,               reduce using rule 16 (elementary -> directional .)
    :               reduce using rule 16 (elementary -> directional .)
    ;               reduce using rule 16 (elementary -> directional .)
    $               reduce using rule 16 (elementary -> directional .)
    `               reduce using rule 16 (elementary -> directional .)
    |               reduce using rule 16 (elementary -> directional .)
    $end            reduce using rule 16 (elementary -> directional .)
    )               reduce using rule 16 (elementary -> directional .)


state 36

    (25) elementary -> predefined .

    *               reduce using rule 25 (elementary -> predefined .)
    +               reduce using rule 25 (elementary -> predefined .)
    ?               reduce using rule 25 (elementary -> predefined .)
    {               reduce using rule 25 (elementary -> predefined .)
    (               reduce using rule 25 (elementary -> predefined .)
    ^               reduce using rule 25 (elementary -> predefined .)
    >               reduce using rule 25 (elementary -> predefined .)
    <               reduce using rule 25 (elementary -> predefined .)
    /               reduce using rule 25 (elementary -> predefined .)
    \               reduce using rule 25 (elementary -> predefined .)
    #               reduce using rule 25 (elementary -> predefined .)
    %               reduce using rule 25 (elementary -> predefined .)
    ESCAPED         reduce using rule 25 (elementary -> predefined .)
    ALPHA           reduce using rule 25 (elementary -> predefined .)
    DIGIT           reduce using rule 25 (elementary -> predefined .)
    OTHER           reduce using rule 25 (elementary -> predefined .)
    [               reduce using rule 25 (elementary -> predefined .)
    .               reduce using rule 25 (elementary -> predefined .)
    ,               reduce using rule 25 (elementary -> predefined .)
    :               reduce using rule 25 (elementary -> predefined .)
    ;               reduce using rule 25 (elementary -> predefined .)
    $               reduce using rule 25 (elementary -> predefined .)
    `               reduce using rule 25 (elementary -> predefined .)
    |               reduce using rule 25 (elementary -> predefined .)
    $end            reduce using rule 25 (elementary -> predefined .)
    )               reduce using rule 25 (elementary -> predefined .)


state 37

    (20) elementary -> anychar .

    *               reduce using rule 20 (elementary -> anychar .)
    +               reduce using rule 20 (elementary -> anychar .)
    ?               reduce using rule 20 (elementary -> anychar .)
    {               reduce using rule 20 (elementary -> anychar .)
    (               reduce using rule 20 (elementary -> anychar .)
    ^               reduce using rule 20 (elementary -> anychar .)
    >               reduce using rule 20 (elementary -> anychar .)
    <               reduce using rule 20 (elementary -> anychar .)
    /               reduce using rule 20 (elementary -> anychar .)
    \               reduce using rule 20 (elementary -> anychar .)
    #               reduce using rule 20 (elementary -> anychar .)
    %               reduce using rule 20 (elementary -> anychar .)
    ESCAPED         reduce using rule 20 (elementary -> anychar .)
    ALPHA           reduce using rule 20 (elementary -> anychar .)
    DIGIT           reduce using rule 20 (elementary -> anychar .)
    OTHER           reduce using rule 20 (elementary -> anychar .)
    [               reduce using rule 20 (elementary -> anychar .)
    .               reduce using rule 20 (elementary -> anychar .)
    ,               reduce using rule 20 (elementary -> anychar .)
    :               reduce using rule 20 (elementary -> anychar .)
    ;               reduce using rule 20 (elementary -> anychar .)
    $               reduce using rule 20 (elementary -> anychar .)
    `               reduce using rule 20 (elementary -> anychar .)
    |               reduce using rule 20 (elementary -> anychar .)
    $end            reduce using rule 20 (elementary -> anychar .)
    )               reduce using rule 20 (elementary -> anychar .)


state 38

    (101) command -> > .

    *               reduce using rule 101 (command -> > .)
    +               reduce using rule 101 (command -> > .)
    ?               reduce using rule 101 (command -> > .)
    {               reduce using rule 101 (command -> > .)
    (               reduce using rule 101 (command -> > .)
    ^               reduce using rule 101 (command -> > .)
    >               reduce using rule 101 (command -> > .)
    <               reduce using rule 101 (command -> > .)
    /               reduce using rule 101 (command -> > .)
    \               reduce using rule 101 (command -> > .)
    #               reduce using rule 101 (command -> > .)
    %               reduce using rule 101 (command -> > .)
    ESCAPED         reduce using rule 101 (command -> > .)
    ALPHA           reduce using rule 101 (command -> > .)
    DIGIT           reduce using rule 101 (command -> > .)
    OTHER           reduce using rule 101 (command -> > .)
    [               reduce using rule 101 (command -> > .)
    .               reduce using rule 101 (command -> > .)
    ,               reduce using rule 101 (command -> > .)
    :               reduce using rule 101 (command -> > .)
    ;               reduce using rule 101 (command -> > .)
    $               reduce using rule 101 (command -> > .)
    `               reduce using rule 101 (command -> > .)
    |               reduce using rule 101 (command -> > .)
    $end            reduce using rule 101 (command -> > .)
    )               reduce using rule 101 (command -> > .)


state 39

    (107) literal -> ESCAPED .

    *               reduce using rule 107 (literal -> ESCAPED .)
    +               reduce using rule 107 (literal -> ESCAPED .)
    ?               reduce using rule 107 (literal -> ESCAPED .)
    {               reduce using rule 107 (literal -> ESCAPED .)
    (               reduce using rule 107 (literal -> ESCAPED .)
    ^               reduce using rule 107 (literal -> ESCAPED .)
    >               reduce using rule 107 (literal -> ESCAPED .)
    <               reduce using rule 107 (literal -> ESCAPED .)
    /               reduce using rule 107 (literal -> ESCAPED .)
    \               reduce using rule 107 (literal -> ESCAPED .)
    #               reduce using rule 107 (literal -> ESCAPED .)
    %               reduce using rule 107 (literal -> ESCAPED .)
    ESCAPED         reduce using rule 107 (literal -> ESCAPED .)
    ALPHA           reduce using rule 107 (literal -> ESCAPED .)
    DIGIT           reduce using rule 107 (literal -> ESCAPED .)
    OTHER           reduce using rule 107 (literal -> ESCAPED .)
    [               reduce using rule 107 (literal -> ESCAPED .)
    .               reduce using rule 107 (literal -> ESCAPED .)
    ,               reduce using rule 107 (literal -> ESCAPED .)
    :               reduce using rule 107 (literal -> ESCAPED .)
    ;               reduce using rule 107 (literal -> ESCAPED .)
    $               reduce using rule 107 (literal -> ESCAPED .)
    `               reduce using rule 107 (literal -> ESCAPED .)
    |               reduce using rule 107 (literal -> ESCAPED .)
    )               reduce using rule 107 (literal -> ESCAPED .)
    $end            reduce using rule 107 (literal -> ESCAPED .)
    -               reduce using rule 107 (literal -> ESCAPED .)
    !               reduce using rule 107 (literal -> ESCAPED .)
    "               reduce using rule 107 (literal -> ESCAPED .)
    &               reduce using rule 107 (literal -> ESCAPED .)
    '               reduce using rule 107 (literal -> ESCAPED .)
    =               reduce using rule 107 (literal -> ESCAPED .)
    @               reduce using rule 107 (literal -> ESCAPED .)
    _               reduce using rule 107 (literal -> ESCAPED .)
    }               reduce using rule 107 (literal -> ESCAPED .)
    ~               reduce using rule 107 (literal -> ESCAPED .)
    ]               reduce using rule 107 (literal -> ESCAPED .)


state 40

    (5) simple -> basic .

    (               reduce using rule 5 (simple -> basic .)
    ^               reduce using rule 5 (simple -> basic .)
    >               reduce using rule 5 (simple -> basic .)
    <               reduce using rule 5 (simple -> basic .)
    /               reduce using rule 5 (simple -> basic .)
    \               reduce using rule 5 (simple -> basic .)
    #               reduce using rule 5 (simple -> basic .)
    %               reduce using rule 5 (simple -> basic .)
    ESCAPED         reduce using rule 5 (simple -> basic .)
    ALPHA           reduce using rule 5 (simple -> basic .)
    DIGIT           reduce using rule 5 (simple -> basic .)
    OTHER           reduce using rule 5 (simple -> basic .)
    [               reduce using rule 5 (simple -> basic .)
    .               reduce using rule 5 (simple -> basic .)
    ,               reduce using rule 5 (simple -> basic .)
    :               reduce using rule 5 (simple -> basic .)
    ;               reduce using rule 5 (simple -> basic .)
    $               reduce using rule 5 (simple -> basic .)
    `               reduce using rule 5 (simple -> basic .)
    |               reduce using rule 5 (simple -> basic .)
    )               reduce using rule 5 (simple -> basic .)
    $end            reduce using rule 5 (simple -> basic .)


state 41

    (7) basic -> elementary .
    (26) asterisk -> elementary . *
    (27) plus -> elementary . +
    (28) optional -> elementary . ?
    (29) nrepeat -> elementary . { number }
    (30) nrepeat -> elementary . { , number }
    (31) nrepeat -> elementary . { number , }
    (32) nrepeat -> elementary . { number , number }

    (               reduce using rule 7 (basic -> elementary .)
    ^               reduce using rule 7 (basic -> elementary .)
    >               reduce using rule 7 (basic -> elementary .)
    <               reduce using rule 7 (basic -> elementary .)
    /               reduce using rule 7 (basic -> elementary .)
    \               reduce using rule 7 (basic -> elementary .)
    #               reduce using rule 7 (basic -> elementary .)
    %               reduce using rule 7 (basic -> elementary .)
    ESCAPED         reduce using rule 7 (basic -> elementary .)
    ALPHA           reduce using rule 7 (basic -> elementary .)
    DIGIT           reduce using rule 7 (basic -> elementary .)
    OTHER           reduce using rule 7 (basic -> elementary .)
    [               reduce using rule 7 (basic -> elementary .)
    .               reduce using rule 7 (basic -> elementary .)
    ,               reduce using rule 7 (basic -> elementary .)
    :               reduce using rule 7 (basic -> elementary .)
    ;               reduce using rule 7 (basic -> elementary .)
    $               reduce using rule 7 (basic -> elementary .)
    `               reduce using rule 7 (basic -> elementary .)
    |               reduce using rule 7 (basic -> elementary .)
    )               reduce using rule 7 (basic -> elementary .)
    $end            reduce using rule 7 (basic -> elementary .)
    *               shift and go to state 98
    +               shift and go to state 96
    ?               shift and go to state 97
    {               shift and go to state 95


state 42

    (106) command -> % .

    *               reduce using rule 106 (command -> % .)
    +               reduce using rule 106 (command -> % .)
    ?               reduce using rule 106 (command -> % .)
    {               reduce using rule 106 (command -> % .)
    (               reduce using rule 106 (command -> % .)
    ^               reduce using rule 106 (command -> % .)
    >               reduce using rule 106 (command -> % .)
    <               reduce using rule 106 (command -> % .)
    /               reduce using rule 106 (command -> % .)
    \               reduce using rule 106 (command -> % .)
    #               reduce using rule 106 (command -> % .)
    %               reduce using rule 106 (command -> % .)
    ESCAPED         reduce using rule 106 (command -> % .)
    ALPHA           reduce using rule 106 (command -> % .)
    DIGIT           reduce using rule 106 (command -> % .)
    OTHER           reduce using rule 106 (command -> % .)
    [               reduce using rule 106 (command -> % .)
    .               reduce using rule 106 (command -> % .)
    ,               reduce using rule 106 (command -> % .)
    :               reduce using rule 106 (command -> % .)
    ;               reduce using rule 106 (command -> % .)
    $               reduce using rule 106 (command -> % .)
    `               reduce using rule 106 (command -> % .)
    |               reduce using rule 106 (command -> % .)
    $end            reduce using rule 106 (command -> % .)
    )               reduce using rule 106 (command -> % .)


state 43

    (83) classliteral -> [ .

    -               reduce using rule 83 (classliteral -> [ .)
    !               reduce using rule 83 (classliteral -> [ .)
    "               reduce using rule 83 (classliteral -> [ .)
    #               reduce using rule 83 (classliteral -> [ .)
    $               reduce using rule 83 (classliteral -> [ .)
    %               reduce using rule 83 (classliteral -> [ .)
    &               reduce using rule 83 (classliteral -> [ .)
    '               reduce using rule 83 (classliteral -> [ .)
    (               reduce using rule 83 (classliteral -> [ .)
    )               reduce using rule 83 (classliteral -> [ .)
    *               reduce using rule 83 (classliteral -> [ .)
    +               reduce using rule 83 (classliteral -> [ .)
    ,               reduce using rule 83 (classliteral -> [ .)
    .               reduce using rule 83 (classliteral -> [ .)
    /               reduce using rule 83 (classliteral -> [ .)
    :               reduce using rule 83 (classliteral -> [ .)
    ;               reduce using rule 83 (classliteral -> [ .)
    <               reduce using rule 83 (classliteral -> [ .)
    =               reduce using rule 83 (classliteral -> [ .)
    >               reduce using rule 83 (classliteral -> [ .)
    ?               reduce using rule 83 (classliteral -> [ .)
    @               reduce using rule 83 (classliteral -> [ .)
    [               reduce using rule 83 (classliteral -> [ .)
    \               reduce using rule 83 (classliteral -> [ .)
    _               reduce using rule 83 (classliteral -> [ .)
    `               reduce using rule 83 (classliteral -> [ .)
    {               reduce using rule 83 (classliteral -> [ .)
    }               reduce using rule 83 (classliteral -> [ .)
    ~               reduce using rule 83 (classliteral -> [ .)
    ESCAPED         reduce using rule 83 (classliteral -> [ .)
    ALPHA           reduce using rule 83 (classliteral -> [ .)
    DIGIT           reduce using rule 83 (classliteral -> [ .)
    OTHER           reduce using rule 83 (classliteral -> [ .)
    ]               reduce using rule 83 (classliteral -> [ .)
    |               reduce using rule 83 (classliteral -> [ .)


state 44

    (61) classatom -> classrange .

    !               reduce using rule 61 (classatom -> classrange .)
    "               reduce using rule 61 (classatom -> classrange .)
    #               reduce using rule 61 (classatom -> classrange .)
    $               reduce using rule 61 (classatom -> classrange .)
    %               reduce using rule 61 (classatom -> classrange .)
    &               reduce using rule 61 (classatom -> classrange .)
    '               reduce using rule 61 (classatom -> classrange .)
    (               reduce using rule 61 (classatom -> classrange .)
    )               reduce using rule 61 (classatom -> classrange .)
    *               reduce using rule 61 (classatom -> classrange .)
    +               reduce using rule 61 (classatom -> classrange .)
    ,               reduce using rule 61 (classatom -> classrange .)
    .               reduce using rule 61 (classatom -> classrange .)
    /               reduce using rule 61 (classatom -> classrange .)
    :               reduce using rule 61 (classatom -> classrange .)
    ;               reduce using rule 61 (classatom -> classrange .)
    <               reduce using rule 61 (classatom -> classrange .)
    =               reduce using rule 61 (classatom -> classrange .)
    >               reduce using rule 61 (classatom -> classrange .)
    ?               reduce using rule 61 (classatom -> classrange .)
    @               reduce using rule 61 (classatom -> classrange .)
    [               reduce using rule 61 (classatom -> classrange .)
    \               reduce using rule 61 (classatom -> classrange .)
    _               reduce using rule 61 (classatom -> classrange .)
    `               reduce using rule 61 (classatom -> classrange .)
    {               reduce using rule 61 (classatom -> classrange .)
    }               reduce using rule 61 (classatom -> classrange .)
    ~               reduce using rule 61 (classatom -> classrange .)
    ESCAPED         reduce using rule 61 (classatom -> classrange .)
    ALPHA           reduce using rule 61 (classatom -> classrange .)
    DIGIT           reduce using rule 61 (classatom -> classrange .)
    OTHER           reduce using rule 61 (classatom -> classrange .)
    ]               reduce using rule 61 (classatom -> classrange .)
    |               reduce using rule 61 (classatom -> classrange .)


state 45

    (70) classliteral -> ) .

    -               reduce using rule 70 (classliteral -> ) .)
    !               reduce using rule 70 (classliteral -> ) .)
    "               reduce using rule 70 (classliteral -> ) .)
    #               reduce using rule 70 (classliteral -> ) .)
    $               reduce using rule 70 (classliteral -> ) .)
    %               reduce using rule 70 (classliteral -> ) .)
    &               reduce using rule 70 (classliteral -> ) .)
    '               reduce using rule 70 (classliteral -> ) .)
    (               reduce using rule 70 (classliteral -> ) .)
    )               reduce using rule 70 (classliteral -> ) .)
    *               reduce using rule 70 (classliteral -> ) .)
    +               reduce using rule 70 (classliteral -> ) .)
    ,               reduce using rule 70 (classliteral -> ) .)
    .               reduce using rule 70 (classliteral -> ) .)
    /               reduce using rule 70 (classliteral -> ) .)
    :               reduce using rule 70 (classliteral -> ) .)
    ;               reduce using rule 70 (classliteral -> ) .)
    <               reduce using rule 70 (classliteral -> ) .)
    =               reduce using rule 70 (classliteral -> ) .)
    >               reduce using rule 70 (classliteral -> ) .)
    ?               reduce using rule 70 (classliteral -> ) .)
    @               reduce using rule 70 (classliteral -> ) .)
    [               reduce using rule 70 (classliteral -> ) .)
    \               reduce using rule 70 (classliteral -> ) .)
    _               reduce using rule 70 (classliteral -> ) .)
    `               reduce using rule 70 (classliteral -> ) .)
    {               reduce using rule 70 (classliteral -> ) .)
    }               reduce using rule 70 (classliteral -> ) .)
    ~               reduce using rule 70 (classliteral -> ) .)
    ESCAPED         reduce using rule 70 (classliteral -> ) .)
    ALPHA           reduce using rule 70 (classliteral -> ) .)
    DIGIT           reduce using rule 70 (classliteral -> ) .)
    OTHER           reduce using rule 70 (classliteral -> ) .)
    ]               reduce using rule 70 (classliteral -> ) .)
    |               reduce using rule 70 (classliteral -> ) .)


state 46

    (81) classliteral -> ? .

    -               reduce using rule 81 (classliteral -> ? .)
    !               reduce using rule 81 (classliteral -> ? .)
    "               reduce using rule 81 (classliteral -> ? .)
    #               reduce using rule 81 (classliteral -> ? .)
    $               reduce using rule 81 (classliteral -> ? .)
    %               reduce using rule 81 (classliteral -> ? .)
    &               reduce using rule 81 (classliteral -> ? .)
    '               reduce using rule 81 (classliteral -> ? .)
    (               reduce using rule 81 (classliteral -> ? .)
    )               reduce using rule 81 (classliteral -> ? .)
    *               reduce using rule 81 (classliteral -> ? .)
    +               reduce using rule 81 (classliteral -> ? .)
    ,               reduce using rule 81 (classliteral -> ? .)
    .               reduce using rule 81 (classliteral -> ? .)
    /               reduce using rule 81 (classliteral -> ? .)
    :               reduce using rule 81 (classliteral -> ? .)
    ;               reduce using rule 81 (classliteral -> ? .)
    <               reduce using rule 81 (classliteral -> ? .)
    =               reduce using rule 81 (classliteral -> ? .)
    >               reduce using rule 81 (classliteral -> ? .)
    ?               reduce using rule 81 (classliteral -> ? .)
    @               reduce using rule 81 (classliteral -> ? .)
    [               reduce using rule 81 (classliteral -> ? .)
    \               reduce using rule 81 (classliteral -> ? .)
    _               reduce using rule 81 (classliteral -> ? .)
    `               reduce using rule 81 (classliteral -> ? .)
    {               reduce using rule 81 (classliteral -> ? .)
    }               reduce using rule 81 (classliteral -> ? .)
    ~               reduce using rule 81 (classliteral -> ? .)
    ESCAPED         reduce using rule 81 (classliteral -> ? .)
    ALPHA           reduce using rule 81 (classliteral -> ? .)
    DIGIT           reduce using rule 81 (classliteral -> ? .)
    OTHER           reduce using rule 81 (classliteral -> ? .)
    ]               reduce using rule 81 (classliteral -> ? .)
    |               reduce using rule 81 (classliteral -> ? .)


state 47

    (78) classliteral -> < .

    -               reduce using rule 78 (classliteral -> < .)
    !               reduce using rule 78 (classliteral -> < .)
    "               reduce using rule 78 (classliteral -> < .)
    #               reduce using rule 78 (classliteral -> < .)
    $               reduce using rule 78 (classliteral -> < .)
    %               reduce using rule 78 (classliteral -> < .)
    &               reduce using rule 78 (classliteral -> < .)
    '               reduce using rule 78 (classliteral -> < .)
    (               reduce using rule 78 (classliteral -> < .)
    )               reduce using rule 78 (classliteral -> < .)
    *               reduce using rule 78 (classliteral -> < .)
    +               reduce using rule 78 (classliteral -> < .)
    ,               reduce using rule 78 (classliteral -> < .)
    .               reduce using rule 78 (classliteral -> < .)
    /               reduce using rule 78 (classliteral -> < .)
    :               reduce using rule 78 (classliteral -> < .)
    ;               reduce using rule 78 (classliteral -> < .)
    <               reduce using rule 78 (classliteral -> < .)
    =               reduce using rule 78 (classliteral -> < .)
    >               reduce using rule 78 (classliteral -> < .)
    ?               reduce using rule 78 (classliteral -> < .)
    @               reduce using rule 78 (classliteral -> < .)
    [               reduce using rule 78 (classliteral -> < .)
    \               reduce using rule 78 (classliteral -> < .)
    _               reduce using rule 78 (classliteral -> < .)
    `               reduce using rule 78 (classliteral -> < .)
    {               reduce using rule 78 (classliteral -> < .)
    }               reduce using rule 78 (classliteral -> < .)
    ~               reduce using rule 78 (classliteral -> < .)
    ESCAPED         reduce using rule 78 (classliteral -> < .)
    ALPHA           reduce using rule 78 (classliteral -> < .)
    DIGIT           reduce using rule 78 (classliteral -> < .)
    OTHER           reduce using rule 78 (classliteral -> < .)
    ]               reduce using rule 78 (classliteral -> < .)
    |               reduce using rule 78 (classliteral -> < .)


state 48

    (85) classliteral -> _ .

    -               reduce using rule 85 (classliteral -> _ .)
    !               reduce using rule 85 (classliteral -> _ .)
    "               reduce using rule 85 (classliteral -> _ .)
    #               reduce using rule 85 (classliteral -> _ .)
    $               reduce using rule 85 (classliteral -> _ .)
    %               reduce using rule 85 (classliteral -> _ .)
    &               reduce using rule 85 (classliteral -> _ .)
    '               reduce using rule 85 (classliteral -> _ .)
    (               reduce using rule 85 (classliteral -> _ .)
    )               reduce using rule 85 (classliteral -> _ .)
    *               reduce using rule 85 (classliteral -> _ .)
    +               reduce using rule 85 (classliteral -> _ .)
    ,               reduce using rule 85 (classliteral -> _ .)
    .               reduce using rule 85 (classliteral -> _ .)
    /               reduce using rule 85 (classliteral -> _ .)
    :               reduce using rule 85 (classliteral -> _ .)
    ;               reduce using rule 85 (classliteral -> _ .)
    <               reduce using rule 85 (classliteral -> _ .)
    =               reduce using rule 85 (classliteral -> _ .)
    >               reduce using rule 85 (classliteral -> _ .)
    ?               reduce using rule 85 (classliteral -> _ .)
    @               reduce using rule 85 (classliteral -> _ .)
    [               reduce using rule 85 (classliteral -> _ .)
    \               reduce using rule 85 (classliteral -> _ .)
    _               reduce using rule 85 (classliteral -> _ .)
    `               reduce using rule 85 (classliteral -> _ .)
    {               reduce using rule 85 (classliteral -> _ .)
    }               reduce using rule 85 (classliteral -> _ .)
    ~               reduce using rule 85 (classliteral -> _ .)
    ESCAPED         reduce using rule 85 (classliteral -> _ .)
    ALPHA           reduce using rule 85 (classliteral -> _ .)
    DIGIT           reduce using rule 85 (classliteral -> _ .)
    OTHER           reduce using rule 85 (classliteral -> _ .)
    ]               reduce using rule 85 (classliteral -> _ .)
    |               reduce using rule 85 (classliteral -> _ .)


state 49

    (86) classliteral -> ` .

    -               reduce using rule 86 (classliteral -> ` .)
    !               reduce using rule 86 (classliteral -> ` .)
    "               reduce using rule 86 (classliteral -> ` .)
    #               reduce using rule 86 (classliteral -> ` .)
    $               reduce using rule 86 (classliteral -> ` .)
    %               reduce using rule 86 (classliteral -> ` .)
    &               reduce using rule 86 (classliteral -> ` .)
    '               reduce using rule 86 (classliteral -> ` .)
    (               reduce using rule 86 (classliteral -> ` .)
    )               reduce using rule 86 (classliteral -> ` .)
    *               reduce using rule 86 (classliteral -> ` .)
    +               reduce using rule 86 (classliteral -> ` .)
    ,               reduce using rule 86 (classliteral -> ` .)
    .               reduce using rule 86 (classliteral -> ` .)
    /               reduce using rule 86 (classliteral -> ` .)
    :               reduce using rule 86 (classliteral -> ` .)
    ;               reduce using rule 86 (classliteral -> ` .)
    <               reduce using rule 86 (classliteral -> ` .)
    =               reduce using rule 86 (classliteral -> ` .)
    >               reduce using rule 86 (classliteral -> ` .)
    ?               reduce using rule 86 (classliteral -> ` .)
    @               reduce using rule 86 (classliteral -> ` .)
    [               reduce using rule 86 (classliteral -> ` .)
    \               reduce using rule 86 (classliteral -> ` .)
    _               reduce using rule 86 (classliteral -> ` .)
    `               reduce using rule 86 (classliteral -> ` .)
    {               reduce using rule 86 (classliteral -> ` .)
    }               reduce using rule 86 (classliteral -> ` .)
    ~               reduce using rule 86 (classliteral -> ` .)
    ESCAPED         reduce using rule 86 (classliteral -> ` .)
    ALPHA           reduce using rule 86 (classliteral -> ` .)
    DIGIT           reduce using rule 86 (classliteral -> ` .)
    OTHER           reduce using rule 86 (classliteral -> ` .)
    ]               reduce using rule 86 (classliteral -> ` .)
    |               reduce using rule 86 (classliteral -> ` .)


state 50

    (71) classliteral -> * .

    -               reduce using rule 71 (classliteral -> * .)
    !               reduce using rule 71 (classliteral -> * .)
    "               reduce using rule 71 (classliteral -> * .)
    #               reduce using rule 71 (classliteral -> * .)
    $               reduce using rule 71 (classliteral -> * .)
    %               reduce using rule 71 (classliteral -> * .)
    &               reduce using rule 71 (classliteral -> * .)
    '               reduce using rule 71 (classliteral -> * .)
    (               reduce using rule 71 (classliteral -> * .)
    )               reduce using rule 71 (classliteral -> * .)
    *               reduce using rule 71 (classliteral -> * .)
    +               reduce using rule 71 (classliteral -> * .)
    ,               reduce using rule 71 (classliteral -> * .)
    .               reduce using rule 71 (classliteral -> * .)
    /               reduce using rule 71 (classliteral -> * .)
    :               reduce using rule 71 (classliteral -> * .)
    ;               reduce using rule 71 (classliteral -> * .)
    <               reduce using rule 71 (classliteral -> * .)
    =               reduce using rule 71 (classliteral -> * .)
    >               reduce using rule 71 (classliteral -> * .)
    ?               reduce using rule 71 (classliteral -> * .)
    @               reduce using rule 71 (classliteral -> * .)
    [               reduce using rule 71 (classliteral -> * .)
    \               reduce using rule 71 (classliteral -> * .)
    _               reduce using rule 71 (classliteral -> * .)
    `               reduce using rule 71 (classliteral -> * .)
    {               reduce using rule 71 (classliteral -> * .)
    }               reduce using rule 71 (classliteral -> * .)
    ~               reduce using rule 71 (classliteral -> * .)
    ESCAPED         reduce using rule 71 (classliteral -> * .)
    ALPHA           reduce using rule 71 (classliteral -> * .)
    DIGIT           reduce using rule 71 (classliteral -> * .)
    OTHER           reduce using rule 71 (classliteral -> * .)
    ]               reduce using rule 71 (classliteral -> * .)
    |               reduce using rule 71 (classliteral -> * .)


state 51

    (82) classliteral -> @ .

    -               reduce using rule 82 (classliteral -> @ .)
    !               reduce using rule 82 (classliteral -> @ .)
    "               reduce using rule 82 (classliteral -> @ .)
    #               reduce using rule 82 (classliteral -> @ .)
    $               reduce using rule 82 (classliteral -> @ .)
    %               reduce using rule 82 (classliteral -> @ .)
    &               reduce using rule 82 (classliteral -> @ .)
    '               reduce using rule 82 (classliteral -> @ .)
    (               reduce using rule 82 (classliteral -> @ .)
    )               reduce using rule 82 (classliteral -> @ .)
    *               reduce using rule 82 (classliteral -> @ .)
    +               reduce using rule 82 (classliteral -> @ .)
    ,               reduce using rule 82 (classliteral -> @ .)
    .               reduce using rule 82 (classliteral -> @ .)
    /               reduce using rule 82 (classliteral -> @ .)
    :               reduce using rule 82 (classliteral -> @ .)
    ;               reduce using rule 82 (classliteral -> @ .)
    <               reduce using rule 82 (classliteral -> @ .)
    =               reduce using rule 82 (classliteral -> @ .)
    >               reduce using rule 82 (classliteral -> @ .)
    ?               reduce using rule 82 (classliteral -> @ .)
    @               reduce using rule 82 (classliteral -> @ .)
    [               reduce using rule 82 (classliteral -> @ .)
    \               reduce using rule 82 (classliteral -> @ .)
    _               reduce using rule 82 (classliteral -> @ .)
    `               reduce using rule 82 (classliteral -> @ .)
    {               reduce using rule 82 (classliteral -> @ .)
    }               reduce using rule 82 (classliteral -> @ .)
    ~               reduce using rule 82 (classliteral -> @ .)
    ESCAPED         reduce using rule 82 (classliteral -> @ .)
    ALPHA           reduce using rule 82 (classliteral -> @ .)
    DIGIT           reduce using rule 82 (classliteral -> @ .)
    OTHER           reduce using rule 82 (classliteral -> @ .)
    ]               reduce using rule 82 (classliteral -> @ .)
    |               reduce using rule 82 (classliteral -> @ .)


state 52

    (79) classliteral -> = .

    -               reduce using rule 79 (classliteral -> = .)
    !               reduce using rule 79 (classliteral -> = .)
    "               reduce using rule 79 (classliteral -> = .)
    #               reduce using rule 79 (classliteral -> = .)
    $               reduce using rule 79 (classliteral -> = .)
    %               reduce using rule 79 (classliteral -> = .)
    &               reduce using rule 79 (classliteral -> = .)
    '               reduce using rule 79 (classliteral -> = .)
    (               reduce using rule 79 (classliteral -> = .)
    )               reduce using rule 79 (classliteral -> = .)
    *               reduce using rule 79 (classliteral -> = .)
    +               reduce using rule 79 (classliteral -> = .)
    ,               reduce using rule 79 (classliteral -> = .)
    .               reduce using rule 79 (classliteral -> = .)
    /               reduce using rule 79 (classliteral -> = .)
    :               reduce using rule 79 (classliteral -> = .)
    ;               reduce using rule 79 (classliteral -> = .)
    <               reduce using rule 79 (classliteral -> = .)
    =               reduce using rule 79 (classliteral -> = .)
    >               reduce using rule 79 (classliteral -> = .)
    ?               reduce using rule 79 (classliteral -> = .)
    @               reduce using rule 79 (classliteral -> = .)
    [               reduce using rule 79 (classliteral -> = .)
    \               reduce using rule 79 (classliteral -> = .)
    _               reduce using rule 79 (classliteral -> = .)
    `               reduce using rule 79 (classliteral -> = .)
    {               reduce using rule 79 (classliteral -> = .)
    }               reduce using rule 79 (classliteral -> = .)
    ~               reduce using rule 79 (classliteral -> = .)
    ESCAPED         reduce using rule 79 (classliteral -> = .)
    ALPHA           reduce using rule 79 (classliteral -> = .)
    DIGIT           reduce using rule 79 (classliteral -> = .)
    OTHER           reduce using rule 79 (classliteral -> = .)
    ]               reduce using rule 79 (classliteral -> = .)
    |               reduce using rule 79 (classliteral -> = .)


state 53

    (63) classliteral -> " .

    -               reduce using rule 63 (classliteral -> " .)
    !               reduce using rule 63 (classliteral -> " .)
    "               reduce using rule 63 (classliteral -> " .)
    #               reduce using rule 63 (classliteral -> " .)
    $               reduce using rule 63 (classliteral -> " .)
    %               reduce using rule 63 (classliteral -> " .)
    &               reduce using rule 63 (classliteral -> " .)
    '               reduce using rule 63 (classliteral -> " .)
    (               reduce using rule 63 (classliteral -> " .)
    )               reduce using rule 63 (classliteral -> " .)
    *               reduce using rule 63 (classliteral -> " .)
    +               reduce using rule 63 (classliteral -> " .)
    ,               reduce using rule 63 (classliteral -> " .)
    .               reduce using rule 63 (classliteral -> " .)
    /               reduce using rule 63 (classliteral -> " .)
    :               reduce using rule 63 (classliteral -> " .)
    ;               reduce using rule 63 (classliteral -> " .)
    <               reduce using rule 63 (classliteral -> " .)
    =               reduce using rule 63 (classliteral -> " .)
    >               reduce using rule 63 (classliteral -> " .)
    ?               reduce using rule 63 (classliteral -> " .)
    @               reduce using rule 63 (classliteral -> " .)
    [               reduce using rule 63 (classliteral -> " .)
    \               reduce using rule 63 (classliteral -> " .)
    _               reduce using rule 63 (classliteral -> " .)
    `               reduce using rule 63 (classliteral -> " .)
    {               reduce using rule 63 (classliteral -> " .)
    }               reduce using rule 63 (classliteral -> " .)
    ~               reduce using rule 63 (classliteral -> " .)
    ESCAPED         reduce using rule 63 (classliteral -> " .)
    ALPHA           reduce using rule 63 (classliteral -> " .)
    DIGIT           reduce using rule 63 (classliteral -> " .)
    OTHER           reduce using rule 63 (classliteral -> " .)
    ]               reduce using rule 63 (classliteral -> " .)
    |               reduce using rule 63 (classliteral -> " .)


state 54

    (60) classatom -> classliteral .
    (91) classrange -> classliteral . - classliteral

    !               reduce using rule 60 (classatom -> classliteral .)
    "               reduce using rule 60 (classatom -> classliteral .)
    #               reduce using rule 60 (classatom -> classliteral .)
    $               reduce using rule 60 (classatom -> classliteral .)
    %               reduce using rule 60 (classatom -> classliteral .)
    &               reduce using rule 60 (classatom -> classliteral .)
    '               reduce using rule 60 (classatom -> classliteral .)
    (               reduce using rule 60 (classatom -> classliteral .)
    )               reduce using rule 60 (classatom -> classliteral .)
    *               reduce using rule 60 (classatom -> classliteral .)
    +               reduce using rule 60 (classatom -> classliteral .)
    ,               reduce using rule 60 (classatom -> classliteral .)
    .               reduce using rule 60 (classatom -> classliteral .)
    /               reduce using rule 60 (classatom -> classliteral .)
    :               reduce using rule 60 (classatom -> classliteral .)
    ;               reduce using rule 60 (classatom -> classliteral .)
    <               reduce using rule 60 (classatom -> classliteral .)
    =               reduce using rule 60 (classatom -> classliteral .)
    >               reduce using rule 60 (classatom -> classliteral .)
    ?               reduce using rule 60 (classatom -> classliteral .)
    @               reduce using rule 60 (classatom -> classliteral .)
    [               reduce using rule 60 (classatom -> classliteral .)
    \               reduce using rule 60 (classatom -> classliteral .)
    _               reduce using rule 60 (classatom -> classliteral .)
    `               reduce using rule 60 (classatom -> classliteral .)
    {               reduce using rule 60 (classatom -> classliteral .)
    }               reduce using rule 60 (classatom -> classliteral .)
    ~               reduce using rule 60 (classatom -> classliteral .)
    ESCAPED         reduce using rule 60 (classatom -> classliteral .)
    ALPHA           reduce using rule 60 (classatom -> classliteral .)
    DIGIT           reduce using rule 60 (classatom -> classliteral .)
    OTHER           reduce using rule 60 (classatom -> classliteral .)
    ]               reduce using rule 60 (classatom -> classliteral .)
    |               reduce using rule 60 (classatom -> classliteral .)
    -               shift and go to state 99


state 55

    (54) classitems -> ^ . baseitems
    (58) baseitems -> . classatom
    (59) baseitems -> . classatom baseitems
    (60) classatom -> . classliteral
    (61) classatom -> . classrange
    (62) classliteral -> . !
    (63) classliteral -> . "
    (64) classliteral -> . #
    (65) classliteral -> . $
    (66) classliteral -> . %
    (67) classliteral -> . &
    (68) classliteral -> . '
    (69) classliteral -> . (
    (70) classliteral -> . )
    (71) classliteral -> . *
    (72) classliteral -> . +
    (73) classliteral -> . ,
    (74) classliteral -> . .
    (75) classliteral -> . /
    (76) classliteral -> . :
    (77) classliteral -> . ;
    (78) classliteral -> . <
    (79) classliteral -> . =
    (80) classliteral -> . >
    (81) classliteral -> . ?
    (82) classliteral -> . @
    (83) classliteral -> . [
    (84) classliteral -> . \
    (85) classliteral -> . _
    (86) classliteral -> . `
    (87) classliteral -> . {
    (88) classliteral -> . }
    (89) classliteral -> . ~
    (90) classliteral -> . literal
    (91) classrange -> . classliteral - classliteral
    (107) literal -> . ESCAPED
    (108) literal -> . ALPHA
    (109) literal -> . DIGIT
    (110) literal -> . OTHER

    !               shift and go to state 60
    "               shift and go to state 53
    #               shift and go to state 59
    $               shift and go to state 57
    %               shift and go to state 77
    &               shift and go to state 76
    '               shift and go to state 64
    (               shift and go to state 74
    )               shift and go to state 45
    *               shift and go to state 50
    +               shift and go to state 63
    ,               shift and go to state 66
    .               shift and go to state 62
    /               shift and go to state 67
    :               shift and go to state 61
    ;               shift and go to state 69
    <               shift and go to state 47
    =               shift and go to state 52
    >               shift and go to state 71
    ?               shift and go to state 46
    @               shift and go to state 51
    [               shift and go to state 43
    \               shift and go to state 78
    _               shift and go to state 48
    `               shift and go to state 49
    {               shift and go to state 72
    }               shift and go to state 75
    ~               shift and go to state 56
    ESCAPED         shift and go to state 39
    ALPHA           shift and go to state 34
    DIGIT           shift and go to state 28
    OTHER           shift and go to state 7

    baseitems                      shift and go to state 100
    literal                        shift and go to state 58
    classrange                     shift and go to state 44
    classatom                      shift and go to state 68
    classliteral                   shift and go to state 54

state 56

    (89) classliteral -> ~ .

    -               reduce using rule 89 (classliteral -> ~ .)
    !               reduce using rule 89 (classliteral -> ~ .)
    "               reduce using rule 89 (classliteral -> ~ .)
    #               reduce using rule 89 (classliteral -> ~ .)
    $               reduce using rule 89 (classliteral -> ~ .)
    %               reduce using rule 89 (classliteral -> ~ .)
    &               reduce using rule 89 (classliteral -> ~ .)
    '               reduce using rule 89 (classliteral -> ~ .)
    (               reduce using rule 89 (classliteral -> ~ .)
    )               reduce using rule 89 (classliteral -> ~ .)
    *               reduce using rule 89 (classliteral -> ~ .)
    +               reduce using rule 89 (classliteral -> ~ .)
    ,               reduce using rule 89 (classliteral -> ~ .)
    .               reduce using rule 89 (classliteral -> ~ .)
    /               reduce using rule 89 (classliteral -> ~ .)
    :               reduce using rule 89 (classliteral -> ~ .)
    ;               reduce using rule 89 (classliteral -> ~ .)
    <               reduce using rule 89 (classliteral -> ~ .)
    =               reduce using rule 89 (classliteral -> ~ .)
    >               reduce using rule 89 (classliteral -> ~ .)
    ?               reduce using rule 89 (classliteral -> ~ .)
    @               reduce using rule 89 (classliteral -> ~ .)
    [               reduce using rule 89 (classliteral -> ~ .)
    \               reduce using rule 89 (classliteral -> ~ .)
    _               reduce using rule 89 (classliteral -> ~ .)
    `               reduce using rule 89 (classliteral -> ~ .)
    {               reduce using rule 89 (classliteral -> ~ .)
    }               reduce using rule 89 (classliteral -> ~ .)
    ~               reduce using rule 89 (classliteral -> ~ .)
    ESCAPED         reduce using rule 89 (classliteral -> ~ .)
    ALPHA           reduce using rule 89 (classliteral -> ~ .)
    DIGIT           reduce using rule 89 (classliteral -> ~ .)
    OTHER           reduce using rule 89 (classliteral -> ~ .)
    ]               reduce using rule 89 (classliteral -> ~ .)
    |               reduce using rule 89 (classliteral -> ~ .)


state 57

    (65) classliteral -> $ .

    -               reduce using rule 65 (classliteral -> $ .)
    !               reduce using rule 65 (classliteral -> $ .)
    "               reduce using rule 65 (classliteral -> $ .)
    #               reduce using rule 65 (classliteral -> $ .)
    $               reduce using rule 65 (classliteral -> $ .)
    %               reduce using rule 65 (classliteral -> $ .)
    &               reduce using rule 65 (classliteral -> $ .)
    '               reduce using rule 65 (classliteral -> $ .)
    (               reduce using rule 65 (classliteral -> $ .)
    )               reduce using rule 65 (classliteral -> $ .)
    *               reduce using rule 65 (classliteral -> $ .)
    +               reduce using rule 65 (classliteral -> $ .)
    ,               reduce using rule 65 (classliteral -> $ .)
    .               reduce using rule 65 (classliteral -> $ .)
    /               reduce using rule 65 (classliteral -> $ .)
    :               reduce using rule 65 (classliteral -> $ .)
    ;               reduce using rule 65 (classliteral -> $ .)
    <               reduce using rule 65 (classliteral -> $ .)
    =               reduce using rule 65 (classliteral -> $ .)
    >               reduce using rule 65 (classliteral -> $ .)
    ?               reduce using rule 65 (classliteral -> $ .)
    @               reduce using rule 65 (classliteral -> $ .)
    [               reduce using rule 65 (classliteral -> $ .)
    \               reduce using rule 65 (classliteral -> $ .)
    _               reduce using rule 65 (classliteral -> $ .)
    `               reduce using rule 65 (classliteral -> $ .)
    {               reduce using rule 65 (classliteral -> $ .)
    }               reduce using rule 65 (classliteral -> $ .)
    ~               reduce using rule 65 (classliteral -> $ .)
    ESCAPED         reduce using rule 65 (classliteral -> $ .)
    ALPHA           reduce using rule 65 (classliteral -> $ .)
    DIGIT           reduce using rule 65 (classliteral -> $ .)
    OTHER           reduce using rule 65 (classliteral -> $ .)
    ]               reduce using rule 65 (classliteral -> $ .)
    |               reduce using rule 65 (classliteral -> $ .)


state 58

    (90) classliteral -> literal .

    -               reduce using rule 90 (classliteral -> literal .)
    !               reduce using rule 90 (classliteral -> literal .)
    "               reduce using rule 90 (classliteral -> literal .)
    #               reduce using rule 90 (classliteral -> literal .)
    $               reduce using rule 90 (classliteral -> literal .)
    %               reduce using rule 90 (classliteral -> literal .)
    &               reduce using rule 90 (classliteral -> literal .)
    '               reduce using rule 90 (classliteral -> literal .)
    (               reduce using rule 90 (classliteral -> literal .)
    )               reduce using rule 90 (classliteral -> literal .)
    *               reduce using rule 90 (classliteral -> literal .)
    +               reduce using rule 90 (classliteral -> literal .)
    ,               reduce using rule 90 (classliteral -> literal .)
    .               reduce using rule 90 (classliteral -> literal .)
    /               reduce using rule 90 (classliteral -> literal .)
    :               reduce using rule 90 (classliteral -> literal .)
    ;               reduce using rule 90 (classliteral -> literal .)
    <               reduce using rule 90 (classliteral -> literal .)
    =               reduce using rule 90 (classliteral -> literal .)
    >               reduce using rule 90 (classliteral -> literal .)
    ?               reduce using rule 90 (classliteral -> literal .)
    @               reduce using rule 90 (classliteral -> literal .)
    [               reduce using rule 90 (classliteral -> literal .)
    \               reduce using rule 90 (classliteral -> literal .)
    _               reduce using rule 90 (classliteral -> literal .)
    `               reduce using rule 90 (classliteral -> literal .)
    {               reduce using rule 90 (classliteral -> literal .)
    }               reduce using rule 90 (classliteral -> literal .)
    ~               reduce using rule 90 (classliteral -> literal .)
    ESCAPED         reduce using rule 90 (classliteral -> literal .)
    ALPHA           reduce using rule 90 (classliteral -> literal .)
    DIGIT           reduce using rule 90 (classliteral -> literal .)
    OTHER           reduce using rule 90 (classliteral -> literal .)
    ]               reduce using rule 90 (classliteral -> literal .)
    |               reduce using rule 90 (classliteral -> literal .)


state 59

    (64) classliteral -> # .

    -               reduce using rule 64 (classliteral -> # .)
    !               reduce using rule 64 (classliteral -> # .)
    "               reduce using rule 64 (classliteral -> # .)
    #               reduce using rule 64 (classliteral -> # .)
    $               reduce using rule 64 (classliteral -> # .)
    %               reduce using rule 64 (classliteral -> # .)
    &               reduce using rule 64 (classliteral -> # .)
    '               reduce using rule 64 (classliteral -> # .)
    (               reduce using rule 64 (classliteral -> # .)
    )               reduce using rule 64 (classliteral -> # .)
    *               reduce using rule 64 (classliteral -> # .)
    +               reduce using rule 64 (classliteral -> # .)
    ,               reduce using rule 64 (classliteral -> # .)
    .               reduce using rule 64 (classliteral -> # .)
    /               reduce using rule 64 (classliteral -> # .)
    :               reduce using rule 64 (classliteral -> # .)
    ;               reduce using rule 64 (classliteral -> # .)
    <               reduce using rule 64 (classliteral -> # .)
    =               reduce using rule 64 (classliteral -> # .)
    >               reduce using rule 64 (classliteral -> # .)
    ?               reduce using rule 64 (classliteral -> # .)
    @               reduce using rule 64 (classliteral -> # .)
    [               reduce using rule 64 (classliteral -> # .)
    \               reduce using rule 64 (classliteral -> # .)
    _               reduce using rule 64 (classliteral -> # .)
    `               reduce using rule 64 (classliteral -> # .)
    {               reduce using rule 64 (classliteral -> # .)
    }               reduce using rule 64 (classliteral -> # .)
    ~               reduce using rule 64 (classliteral -> # .)
    ESCAPED         reduce using rule 64 (classliteral -> # .)
    ALPHA           reduce using rule 64 (classliteral -> # .)
    DIGIT           reduce using rule 64 (classliteral -> # .)
    OTHER           reduce using rule 64 (classliteral -> # .)
    ]               reduce using rule 64 (classliteral -> # .)
    |               reduce using rule 64 (classliteral -> # .)


state 60

    (62) classliteral -> ! .

    -               reduce using rule 62 (classliteral -> ! .)
    !               reduce using rule 62 (classliteral -> ! .)
    "               reduce using rule 62 (classliteral -> ! .)
    #               reduce using rule 62 (classliteral -> ! .)
    $               reduce using rule 62 (classliteral -> ! .)
    %               reduce using rule 62 (classliteral -> ! .)
    &               reduce using rule 62 (classliteral -> ! .)
    '               reduce using rule 62 (classliteral -> ! .)
    (               reduce using rule 62 (classliteral -> ! .)
    )               reduce using rule 62 (classliteral -> ! .)
    *               reduce using rule 62 (classliteral -> ! .)
    +               reduce using rule 62 (classliteral -> ! .)
    ,               reduce using rule 62 (classliteral -> ! .)
    .               reduce using rule 62 (classliteral -> ! .)
    /               reduce using rule 62 (classliteral -> ! .)
    :               reduce using rule 62 (classliteral -> ! .)
    ;               reduce using rule 62 (classliteral -> ! .)
    <               reduce using rule 62 (classliteral -> ! .)
    =               reduce using rule 62 (classliteral -> ! .)
    >               reduce using rule 62 (classliteral -> ! .)
    ?               reduce using rule 62 (classliteral -> ! .)
    @               reduce using rule 62 (classliteral -> ! .)
    [               reduce using rule 62 (classliteral -> ! .)
    \               reduce using rule 62 (classliteral -> ! .)
    _               reduce using rule 62 (classliteral -> ! .)
    `               reduce using rule 62 (classliteral -> ! .)
    {               reduce using rule 62 (classliteral -> ! .)
    }               reduce using rule 62 (classliteral -> ! .)
    ~               reduce using rule 62 (classliteral -> ! .)
    ESCAPED         reduce using rule 62 (classliteral -> ! .)
    ALPHA           reduce using rule 62 (classliteral -> ! .)
    DIGIT           reduce using rule 62 (classliteral -> ! .)
    OTHER           reduce using rule 62 (classliteral -> ! .)
    ]               reduce using rule 62 (classliteral -> ! .)
    |               reduce using rule 62 (classliteral -> ! .)


state 61

    (76) classliteral -> : .

    -               reduce using rule 76 (classliteral -> : .)
    !               reduce using rule 76 (classliteral -> : .)
    "               reduce using rule 76 (classliteral -> : .)
    #               reduce using rule 76 (classliteral -> : .)
    $               reduce using rule 76 (classliteral -> : .)
    %               reduce using rule 76 (classliteral -> : .)
    &               reduce using rule 76 (classliteral -> : .)
    '               reduce using rule 76 (classliteral -> : .)
    (               reduce using rule 76 (classliteral -> : .)
    )               reduce using rule 76 (classliteral -> : .)
    *               reduce using rule 76 (classliteral -> : .)
    +               reduce using rule 76 (classliteral -> : .)
    ,               reduce using rule 76 (classliteral -> : .)
    .               reduce using rule 76 (classliteral -> : .)
    /               reduce using rule 76 (classliteral -> : .)
    :               reduce using rule 76 (classliteral -> : .)
    ;               reduce using rule 76 (classliteral -> : .)
    <               reduce using rule 76 (classliteral -> : .)
    =               reduce using rule 76 (classliteral -> : .)
    >               reduce using rule 76 (classliteral -> : .)
    ?               reduce using rule 76 (classliteral -> : .)
    @               reduce using rule 76 (classliteral -> : .)
    [               reduce using rule 76 (classliteral -> : .)
    \               reduce using rule 76 (classliteral -> : .)
    _               reduce using rule 76 (classliteral -> : .)
    `               reduce using rule 76 (classliteral -> : .)
    {               reduce using rule 76 (classliteral -> : .)
    }               reduce using rule 76 (classliteral -> : .)
    ~               reduce using rule 76 (classliteral -> : .)
    ESCAPED         reduce using rule 76 (classliteral -> : .)
    ALPHA           reduce using rule 76 (classliteral -> : .)
    DIGIT           reduce using rule 76 (classliteral -> : .)
    OTHER           reduce using rule 76 (classliteral -> : .)
    ]               reduce using rule 76 (classliteral -> : .)
    |               reduce using rule 76 (classliteral -> : .)


state 62

    (74) classliteral -> . .

    -               reduce using rule 74 (classliteral -> . .)
    !               reduce using rule 74 (classliteral -> . .)
    "               reduce using rule 74 (classliteral -> . .)
    #               reduce using rule 74 (classliteral -> . .)
    $               reduce using rule 74 (classliteral -> . .)
    %               reduce using rule 74 (classliteral -> . .)
    &               reduce using rule 74 (classliteral -> . .)
    '               reduce using rule 74 (classliteral -> . .)
    (               reduce using rule 74 (classliteral -> . .)
    )               reduce using rule 74 (classliteral -> . .)
    *               reduce using rule 74 (classliteral -> . .)
    +               reduce using rule 74 (classliteral -> . .)
    ,               reduce using rule 74 (classliteral -> . .)
    .               reduce using rule 74 (classliteral -> . .)
    /               reduce using rule 74 (classliteral -> . .)
    :               reduce using rule 74 (classliteral -> . .)
    ;               reduce using rule 74 (classliteral -> . .)
    <               reduce using rule 74 (classliteral -> . .)
    =               reduce using rule 74 (classliteral -> . .)
    >               reduce using rule 74 (classliteral -> . .)
    ?               reduce using rule 74 (classliteral -> . .)
    @               reduce using rule 74 (classliteral -> . .)
    [               reduce using rule 74 (classliteral -> . .)
    \               reduce using rule 74 (classliteral -> . .)
    _               reduce using rule 74 (classliteral -> . .)
    `               reduce using rule 74 (classliteral -> . .)
    {               reduce using rule 74 (classliteral -> . .)
    }               reduce using rule 74 (classliteral -> . .)
    ~               reduce using rule 74 (classliteral -> . .)
    ESCAPED         reduce using rule 74 (classliteral -> . .)
    ALPHA           reduce using rule 74 (classliteral -> . .)
    DIGIT           reduce using rule 74 (classliteral -> . .)
    OTHER           reduce using rule 74 (classliteral -> . .)
    ]               reduce using rule 74 (classliteral -> . .)
    |               reduce using rule 74 (classliteral -> . .)


state 63

    (72) classliteral -> + .

    -               reduce using rule 72 (classliteral -> + .)
    !               reduce using rule 72 (classliteral -> + .)
    "               reduce using rule 72 (classliteral -> + .)
    #               reduce using rule 72 (classliteral -> + .)
    $               reduce using rule 72 (classliteral -> + .)
    %               reduce using rule 72 (classliteral -> + .)
    &               reduce using rule 72 (classliteral -> + .)
    '               reduce using rule 72 (classliteral -> + .)
    (               reduce using rule 72 (classliteral -> + .)
    )               reduce using rule 72 (classliteral -> + .)
    *               reduce using rule 72 (classliteral -> + .)
    +               reduce using rule 72 (classliteral -> + .)
    ,               reduce using rule 72 (classliteral -> + .)
    .               reduce using rule 72 (classliteral -> + .)
    /               reduce using rule 72 (classliteral -> + .)
    :               reduce using rule 72 (classliteral -> + .)
    ;               reduce using rule 72 (classliteral -> + .)
    <               reduce using rule 72 (classliteral -> + .)
    =               reduce using rule 72 (classliteral -> + .)
    >               reduce using rule 72 (classliteral -> + .)
    ?               reduce using rule 72 (classliteral -> + .)
    @               reduce using rule 72 (classliteral -> + .)
    [               reduce using rule 72 (classliteral -> + .)
    \               reduce using rule 72 (classliteral -> + .)
    _               reduce using rule 72 (classliteral -> + .)
    `               reduce using rule 72 (classliteral -> + .)
    {               reduce using rule 72 (classliteral -> + .)
    }               reduce using rule 72 (classliteral -> + .)
    ~               reduce using rule 72 (classliteral -> + .)
    ESCAPED         reduce using rule 72 (classliteral -> + .)
    ALPHA           reduce using rule 72 (classliteral -> + .)
    DIGIT           reduce using rule 72 (classliteral -> + .)
    OTHER           reduce using rule 72 (classliteral -> + .)
    ]               reduce using rule 72 (classliteral -> + .)
    |               reduce using rule 72 (classliteral -> + .)


state 64

    (68) classliteral -> ' .

    -               reduce using rule 68 (classliteral -> ' .)
    !               reduce using rule 68 (classliteral -> ' .)
    "               reduce using rule 68 (classliteral -> ' .)
    #               reduce using rule 68 (classliteral -> ' .)
    $               reduce using rule 68 (classliteral -> ' .)
    %               reduce using rule 68 (classliteral -> ' .)
    &               reduce using rule 68 (classliteral -> ' .)
    '               reduce using rule 68 (classliteral -> ' .)
    (               reduce using rule 68 (classliteral -> ' .)
    )               reduce using rule 68 (classliteral -> ' .)
    *               reduce using rule 68 (classliteral -> ' .)
    +               reduce using rule 68 (classliteral -> ' .)
    ,               reduce using rule 68 (classliteral -> ' .)
    .               reduce using rule 68 (classliteral -> ' .)
    /               reduce using rule 68 (classliteral -> ' .)
    :               reduce using rule 68 (classliteral -> ' .)
    ;               reduce using rule 68 (classliteral -> ' .)
    <               reduce using rule 68 (classliteral -> ' .)
    =               reduce using rule 68 (classliteral -> ' .)
    >               reduce using rule 68 (classliteral -> ' .)
    ?               reduce using rule 68 (classliteral -> ' .)
    @               reduce using rule 68 (classliteral -> ' .)
    [               reduce using rule 68 (classliteral -> ' .)
    \               reduce using rule 68 (classliteral -> ' .)
    _               reduce using rule 68 (classliteral -> ' .)
    `               reduce using rule 68 (classliteral -> ' .)
    {               reduce using rule 68 (classliteral -> ' .)
    }               reduce using rule 68 (classliteral -> ' .)
    ~               reduce using rule 68 (classliteral -> ' .)
    ESCAPED         reduce using rule 68 (classliteral -> ' .)
    ALPHA           reduce using rule 68 (classliteral -> ' .)
    DIGIT           reduce using rule 68 (classliteral -> ' .)
    OTHER           reduce using rule 68 (classliteral -> ' .)
    ]               reduce using rule 68 (classliteral -> ' .)
    |               reduce using rule 68 (classliteral -> ' .)


state 65

    (56) classitems2 -> baseitems .
    (57) classitems2 -> baseitems . | baseitems

    ]               reduce using rule 56 (classitems2 -> baseitems .)
    |               shift and go to state 101


state 66

    (73) classliteral -> , .

    -               reduce using rule 73 (classliteral -> , .)
    !               reduce using rule 73 (classliteral -> , .)
    "               reduce using rule 73 (classliteral -> , .)
    #               reduce using rule 73 (classliteral -> , .)
    $               reduce using rule 73 (classliteral -> , .)
    %               reduce using rule 73 (classliteral -> , .)
    &               reduce using rule 73 (classliteral -> , .)
    '               reduce using rule 73 (classliteral -> , .)
    (               reduce using rule 73 (classliteral -> , .)
    )               reduce using rule 73 (classliteral -> , .)
    *               reduce using rule 73 (classliteral -> , .)
    +               reduce using rule 73 (classliteral -> , .)
    ,               reduce using rule 73 (classliteral -> , .)
    .               reduce using rule 73 (classliteral -> , .)
    /               reduce using rule 73 (classliteral -> , .)
    :               reduce using rule 73 (classliteral -> , .)
    ;               reduce using rule 73 (classliteral -> , .)
    <               reduce using rule 73 (classliteral -> , .)
    =               reduce using rule 73 (classliteral -> , .)
    >               reduce using rule 73 (classliteral -> , .)
    ?               reduce using rule 73 (classliteral -> , .)
    @               reduce using rule 73 (classliteral -> , .)
    [               reduce using rule 73 (classliteral -> , .)
    \               reduce using rule 73 (classliteral -> , .)
    _               reduce using rule 73 (classliteral -> , .)
    `               reduce using rule 73 (classliteral -> , .)
    {               reduce using rule 73 (classliteral -> , .)
    }               reduce using rule 73 (classliteral -> , .)
    ~               reduce using rule 73 (classliteral -> , .)
    ESCAPED         reduce using rule 73 (classliteral -> , .)
    ALPHA           reduce using rule 73 (classliteral -> , .)
    DIGIT           reduce using rule 73 (classliteral -> , .)
    OTHER           reduce using rule 73 (classliteral -> , .)
    ]               reduce using rule 73 (classliteral -> , .)
    |               reduce using rule 73 (classliteral -> , .)


state 67

    (75) classliteral -> / .

    -               reduce using rule 75 (classliteral -> / .)
    !               reduce using rule 75 (classliteral -> / .)
    "               reduce using rule 75 (classliteral -> / .)
    #               reduce using rule 75 (classliteral -> / .)
    $               reduce using rule 75 (classliteral -> / .)
    %               reduce using rule 75 (classliteral -> / .)
    &               reduce using rule 75 (classliteral -> / .)
    '               reduce using rule 75 (classliteral -> / .)
    (               reduce using rule 75 (classliteral -> / .)
    )               reduce using rule 75 (classliteral -> / .)
    *               reduce using rule 75 (classliteral -> / .)
    +               reduce using rule 75 (classliteral -> / .)
    ,               reduce using rule 75 (classliteral -> / .)
    .               reduce using rule 75 (classliteral -> / .)
    /               reduce using rule 75 (classliteral -> / .)
    :               reduce using rule 75 (classliteral -> / .)
    ;               reduce using rule 75 (classliteral -> / .)
    <               reduce using rule 75 (classliteral -> / .)
    =               reduce using rule 75 (classliteral -> / .)
    >               reduce using rule 75 (classliteral -> / .)
    ?               reduce using rule 75 (classliteral -> / .)
    @               reduce using rule 75 (classliteral -> / .)
    [               reduce using rule 75 (classliteral -> / .)
    \               reduce using rule 75 (classliteral -> / .)
    _               reduce using rule 75 (classliteral -> / .)
    `               reduce using rule 75 (classliteral -> / .)
    {               reduce using rule 75 (classliteral -> / .)
    }               reduce using rule 75 (classliteral -> / .)
    ~               reduce using rule 75 (classliteral -> / .)
    ESCAPED         reduce using rule 75 (classliteral -> / .)
    ALPHA           reduce using rule 75 (classliteral -> / .)
    DIGIT           reduce using rule 75 (classliteral -> / .)
    OTHER           reduce using rule 75 (classliteral -> / .)
    ]               reduce using rule 75 (classliteral -> / .)
    |               reduce using rule 75 (classliteral -> / .)


state 68

    (58) baseitems -> classatom .
    (59) baseitems -> classatom . baseitems
    (58) baseitems -> . classatom
    (59) baseitems -> . classatom baseitems
    (60) classatom -> . classliteral
    (61) classatom -> . classrange
    (62) classliteral -> . !
    (63) classliteral -> . "
    (64) classliteral -> . #
    (65) classliteral -> . $
    (66) classliteral -> . %
    (67) classliteral -> . &
    (68) classliteral -> . '
    (69) classliteral -> . (
    (70) classliteral -> . )
    (71) classliteral -> . *
    (72) classliteral -> . +
    (73) classliteral -> . ,
    (74) classliteral -> . .
    (75) classliteral -> . /
    (76) classliteral -> . :
    (77) classliteral -> . ;
    (78) classliteral -> . <
    (79) classliteral -> . =
    (80) classliteral -> . >
    (81) classliteral -> . ?
    (82) classliteral -> . @
    (83) classliteral -> . [
    (84) classliteral -> . \
    (85) classliteral -> . _
    (86) classliteral -> . `
    (87) classliteral -> . {
    (88) classliteral -> . }
    (89) classliteral -> . ~
    (90) classliteral -> . literal
    (91) classrange -> . classliteral - classliteral
    (107) literal -> . ESCAPED
    (108) literal -> . ALPHA
    (109) literal -> . DIGIT
    (110) literal -> . OTHER

    |               reduce using rule 58 (baseitems -> classatom .)
    ]               reduce using rule 58 (baseitems -> classatom .)
    !               shift and go to state 60
    "               shift and go to state 53
    #               shift and go to state 59
    $               shift and go to state 57
    %               shift and go to state 77
    &               shift and go to state 76
    '               shift and go to state 64
    (               shift and go to state 74
    )               shift and go to state 45
    *               shift and go to state 50
    +               shift and go to state 63
    ,               shift and go to state 66
    .               shift and go to state 62
    /               shift and go to state 67
    :               shift and go to state 61
    ;               shift and go to state 69
    <               shift and go to state 47
    =               shift and go to state 52
    >               shift and go to state 71
    ?               shift and go to state 46
    @               shift and go to state 51
    [               shift and go to state 43
    \               shift and go to state 78
    _               shift and go to state 48
    `               shift and go to state 49
    {               shift and go to state 72
    }               shift and go to state 75
    ~               shift and go to state 56
    ESCAPED         shift and go to state 39
    ALPHA           shift and go to state 34
    DIGIT           shift and go to state 28
    OTHER           shift and go to state 7

    baseitems                      shift and go to state 102
    literal                        shift and go to state 58
    classrange                     shift and go to state 44
    classatom                      shift and go to state 68
    classliteral                   shift and go to state 54

state 69

    (77) classliteral -> ; .

    -               reduce using rule 77 (classliteral -> ; .)
    !               reduce using rule 77 (classliteral -> ; .)
    "               reduce using rule 77 (classliteral -> ; .)
    #               reduce using rule 77 (classliteral -> ; .)
    $               reduce using rule 77 (classliteral -> ; .)
    %               reduce using rule 77 (classliteral -> ; .)
    &               reduce using rule 77 (classliteral -> ; .)
    '               reduce using rule 77 (classliteral -> ; .)
    (               reduce using rule 77 (classliteral -> ; .)
    )               reduce using rule 77 (classliteral -> ; .)
    *               reduce using rule 77 (classliteral -> ; .)
    +               reduce using rule 77 (classliteral -> ; .)
    ,               reduce using rule 77 (classliteral -> ; .)
    .               reduce using rule 77 (classliteral -> ; .)
    /               reduce using rule 77 (classliteral -> ; .)
    :               reduce using rule 77 (classliteral -> ; .)
    ;               reduce using rule 77 (classliteral -> ; .)
    <               reduce using rule 77 (classliteral -> ; .)
    =               reduce using rule 77 (classliteral -> ; .)
    >               reduce using rule 77 (classliteral -> ; .)
    ?               reduce using rule 77 (classliteral -> ; .)
    @               reduce using rule 77 (classliteral -> ; .)
    [               reduce using rule 77 (classliteral -> ; .)
    \               reduce using rule 77 (classliteral -> ; .)
    _               reduce using rule 77 (classliteral -> ; .)
    `               reduce using rule 77 (classliteral -> ; .)
    {               reduce using rule 77 (classliteral -> ; .)
    }               reduce using rule 77 (classliteral -> ; .)
    ~               reduce using rule 77 (classliteral -> ; .)
    ESCAPED         reduce using rule 77 (classliteral -> ; .)
    ALPHA           reduce using rule 77 (classliteral -> ; .)
    DIGIT           reduce using rule 77 (classliteral -> ; .)
    OTHER           reduce using rule 77 (classliteral -> ; .)
    ]               reduce using rule 77 (classliteral -> ; .)
    |               reduce using rule 77 (classliteral -> ; .)


state 70

    (53) charclass -> [ classitems . ]

    ]               shift and go to state 103


state 71

    (80) classliteral -> > .

    -               reduce using rule 80 (classliteral -> > .)
    !               reduce using rule 80 (classliteral -> > .)
    "               reduce using rule 80 (classliteral -> > .)
    #               reduce using rule 80 (classliteral -> > .)
    $               reduce using rule 80 (classliteral -> > .)
    %               reduce using rule 80 (classliteral -> > .)
    &               reduce using rule 80 (classliteral -> > .)
    '               reduce using rule 80 (classliteral -> > .)
    (               reduce using rule 80 (classliteral -> > .)
    )               reduce using rule 80 (classliteral -> > .)
    *               reduce using rule 80 (classliteral -> > .)
    +               reduce using rule 80 (classliteral -> > .)
    ,               reduce using rule 80 (classliteral -> > .)
    .               reduce using rule 80 (classliteral -> > .)
    /               reduce using rule 80 (classliteral -> > .)
    :               reduce using rule 80 (classliteral -> > .)
    ;               reduce using rule 80 (classliteral -> > .)
    <               reduce using rule 80 (classliteral -> > .)
    =               reduce using rule 80 (classliteral -> > .)
    >               reduce using rule 80 (classliteral -> > .)
    ?               reduce using rule 80 (classliteral -> > .)
    @               reduce using rule 80 (classliteral -> > .)
    [               reduce using rule 80 (classliteral -> > .)
    \               reduce using rule 80 (classliteral -> > .)
    _               reduce using rule 80 (classliteral -> > .)
    `               reduce using rule 80 (classliteral -> > .)
    {               reduce using rule 80 (classliteral -> > .)
    }               reduce using rule 80 (classliteral -> > .)
    ~               reduce using rule 80 (classliteral -> > .)
    ESCAPED         reduce using rule 80 (classliteral -> > .)
    ALPHA           reduce using rule 80 (classliteral -> > .)
    DIGIT           reduce using rule 80 (classliteral -> > .)
    OTHER           reduce using rule 80 (classliteral -> > .)
    ]               reduce using rule 80 (classliteral -> > .)
    |               reduce using rule 80 (classliteral -> > .)


state 72

    (87) classliteral -> { .

    -               reduce using rule 87 (classliteral -> { .)
    !               reduce using rule 87 (classliteral -> { .)
    "               reduce using rule 87 (classliteral -> { .)
    #               reduce using rule 87 (classliteral -> { .)
    $               reduce using rule 87 (classliteral -> { .)
    %               reduce using rule 87 (classliteral -> { .)
    &               reduce using rule 87 (classliteral -> { .)
    '               reduce using rule 87 (classliteral -> { .)
    (               reduce using rule 87 (classliteral -> { .)
    )               reduce using rule 87 (classliteral -> { .)
    *               reduce using rule 87 (classliteral -> { .)
    +               reduce using rule 87 (classliteral -> { .)
    ,               reduce using rule 87 (classliteral -> { .)
    .               reduce using rule 87 (classliteral -> { .)
    /               reduce using rule 87 (classliteral -> { .)
    :               reduce using rule 87 (classliteral -> { .)
    ;               reduce using rule 87 (classliteral -> { .)
    <               reduce using rule 87 (classliteral -> { .)
    =               reduce using rule 87 (classliteral -> { .)
    >               reduce using rule 87 (classliteral -> { .)
    ?               reduce using rule 87 (classliteral -> { .)
    @               reduce using rule 87 (classliteral -> { .)
    [               reduce using rule 87 (classliteral -> { .)
    \               reduce using rule 87 (classliteral -> { .)
    _               reduce using rule 87 (classliteral -> { .)
    `               reduce using rule 87 (classliteral -> { .)
    {               reduce using rule 87 (classliteral -> { .)
    }               reduce using rule 87 (classliteral -> { .)
    ~               reduce using rule 87 (classliteral -> { .)
    ESCAPED         reduce using rule 87 (classliteral -> { .)
    ALPHA           reduce using rule 87 (classliteral -> { .)
    DIGIT           reduce using rule 87 (classliteral -> { .)
    OTHER           reduce using rule 87 (classliteral -> { .)
    ]               reduce using rule 87 (classliteral -> { .)
    |               reduce using rule 87 (classliteral -> { .)


state 73

    (55) classitems -> classitems2 .

    ]               reduce using rule 55 (classitems -> classitems2 .)


state 74

    (69) classliteral -> ( .

    -               reduce using rule 69 (classliteral -> ( .)
    !               reduce using rule 69 (classliteral -> ( .)
    "               reduce using rule 69 (classliteral -> ( .)
    #               reduce using rule 69 (classliteral -> ( .)
    $               reduce using rule 69 (classliteral -> ( .)
    %               reduce using rule 69 (classliteral -> ( .)
    &               reduce using rule 69 (classliteral -> ( .)
    '               reduce using rule 69 (classliteral -> ( .)
    (               reduce using rule 69 (classliteral -> ( .)
    )               reduce using rule 69 (classliteral -> ( .)
    *               reduce using rule 69 (classliteral -> ( .)
    +               reduce using rule 69 (classliteral -> ( .)
    ,               reduce using rule 69 (classliteral -> ( .)
    .               reduce using rule 69 (classliteral -> ( .)
    /               reduce using rule 69 (classliteral -> ( .)
    :               reduce using rule 69 (classliteral -> ( .)
    ;               reduce using rule 69 (classliteral -> ( .)
    <               reduce using rule 69 (classliteral -> ( .)
    =               reduce using rule 69 (classliteral -> ( .)
    >               reduce using rule 69 (classliteral -> ( .)
    ?               reduce using rule 69 (classliteral -> ( .)
    @               reduce using rule 69 (classliteral -> ( .)
    [               reduce using rule 69 (classliteral -> ( .)
    \               reduce using rule 69 (classliteral -> ( .)
    _               reduce using rule 69 (classliteral -> ( .)
    `               reduce using rule 69 (classliteral -> ( .)
    {               reduce using rule 69 (classliteral -> ( .)
    }               reduce using rule 69 (classliteral -> ( .)
    ~               reduce using rule 69 (classliteral -> ( .)
    ESCAPED         reduce using rule 69 (classliteral -> ( .)
    ALPHA           reduce using rule 69 (classliteral -> ( .)
    DIGIT           reduce using rule 69 (classliteral -> ( .)
    OTHER           reduce using rule 69 (classliteral -> ( .)
    ]               reduce using rule 69 (classliteral -> ( .)
    |               reduce using rule 69 (classliteral -> ( .)


state 75

    (88) classliteral -> } .

    -               reduce using rule 88 (classliteral -> } .)
    !               reduce using rule 88 (classliteral -> } .)
    "               reduce using rule 88 (classliteral -> } .)
    #               reduce using rule 88 (classliteral -> } .)
    $               reduce using rule 88 (classliteral -> } .)
    %               reduce using rule 88 (classliteral -> } .)
    &               reduce using rule 88 (classliteral -> } .)
    '               reduce using rule 88 (classliteral -> } .)
    (               reduce using rule 88 (classliteral -> } .)
    )               reduce using rule 88 (classliteral -> } .)
    *               reduce using rule 88 (classliteral -> } .)
    +               reduce using rule 88 (classliteral -> } .)
    ,               reduce using rule 88 (classliteral -> } .)
    .               reduce using rule 88 (classliteral -> } .)
    /               reduce using rule 88 (classliteral -> } .)
    :               reduce using rule 88 (classliteral -> } .)
    ;               reduce using rule 88 (classliteral -> } .)
    <               reduce using rule 88 (classliteral -> } .)
    =               reduce using rule 88 (classliteral -> } .)
    >               reduce using rule 88 (classliteral -> } .)
    ?               reduce using rule 88 (classliteral -> } .)
    @               reduce using rule 88 (classliteral -> } .)
    [               reduce using rule 88 (classliteral -> } .)
    \               reduce using rule 88 (classliteral -> } .)
    _               reduce using rule 88 (classliteral -> } .)
    `               reduce using rule 88 (classliteral -> } .)
    {               reduce using rule 88 (classliteral -> } .)
    }               reduce using rule 88 (classliteral -> } .)
    ~               reduce using rule 88 (classliteral -> } .)
    ESCAPED         reduce using rule 88 (classliteral -> } .)
    ALPHA           reduce using rule 88 (classliteral -> } .)
    DIGIT           reduce using rule 88 (classliteral -> } .)
    OTHER           reduce using rule 88 (classliteral -> } .)
    ]               reduce using rule 88 (classliteral -> } .)
    |               reduce using rule 88 (classliteral -> } .)


state 76

    (67) classliteral -> & .

    -               reduce using rule 67 (classliteral -> & .)
    !               reduce using rule 67 (classliteral -> & .)
    "               reduce using rule 67 (classliteral -> & .)
    #               reduce using rule 67 (classliteral -> & .)
    $               reduce using rule 67 (classliteral -> & .)
    %               reduce using rule 67 (classliteral -> & .)
    &               reduce using rule 67 (classliteral -> & .)
    '               reduce using rule 67 (classliteral -> & .)
    (               reduce using rule 67 (classliteral -> & .)
    )               reduce using rule 67 (classliteral -> & .)
    *               reduce using rule 67 (classliteral -> & .)
    +               reduce using rule 67 (classliteral -> & .)
    ,               reduce using rule 67 (classliteral -> & .)
    .               reduce using rule 67 (classliteral -> & .)
    /               reduce using rule 67 (classliteral -> & .)
    :               reduce using rule 67 (classliteral -> & .)
    ;               reduce using rule 67 (classliteral -> & .)
    <               reduce using rule 67 (classliteral -> & .)
    =               reduce using rule 67 (classliteral -> & .)
    >               reduce using rule 67 (classliteral -> & .)
    ?               reduce using rule 67 (classliteral -> & .)
    @               reduce using rule 67 (classliteral -> & .)
    [               reduce using rule 67 (classliteral -> & .)
    \               reduce using rule 67 (classliteral -> & .)
    _               reduce using rule 67 (classliteral -> & .)
    `               reduce using rule 67 (classliteral -> & .)
    {               reduce using rule 67 (classliteral -> & .)
    }               reduce using rule 67 (classliteral -> & .)
    ~               reduce using rule 67 (classliteral -> & .)
    ESCAPED         reduce using rule 67 (classliteral -> & .)
    ALPHA           reduce using rule 67 (classliteral -> & .)
    DIGIT           reduce using rule 67 (classliteral -> & .)
    OTHER           reduce using rule 67 (classliteral -> & .)
    ]               reduce using rule 67 (classliteral -> & .)
    |               reduce using rule 67 (classliteral -> & .)


state 77

    (66) classliteral -> % .

    -               reduce using rule 66 (classliteral -> % .)
    !               reduce using rule 66 (classliteral -> % .)
    "               reduce using rule 66 (classliteral -> % .)
    #               reduce using rule 66 (classliteral -> % .)
    $               reduce using rule 66 (classliteral -> % .)
    %               reduce using rule 66 (classliteral -> % .)
    &               reduce using rule 66 (classliteral -> % .)
    '               reduce using rule 66 (classliteral -> % .)
    (               reduce using rule 66 (classliteral -> % .)
    )               reduce using rule 66 (classliteral -> % .)
    *               reduce using rule 66 (classliteral -> % .)
    +               reduce using rule 66 (classliteral -> % .)
    ,               reduce using rule 66 (classliteral -> % .)
    .               reduce using rule 66 (classliteral -> % .)
    /               reduce using rule 66 (classliteral -> % .)
    :               reduce using rule 66 (classliteral -> % .)
    ;               reduce using rule 66 (classliteral -> % .)
    <               reduce using rule 66 (classliteral -> % .)
    =               reduce using rule 66 (classliteral -> % .)
    >               reduce using rule 66 (classliteral -> % .)
    ?               reduce using rule 66 (classliteral -> % .)
    @               reduce using rule 66 (classliteral -> % .)
    [               reduce using rule 66 (classliteral -> % .)
    \               reduce using rule 66 (classliteral -> % .)
    _               reduce using rule 66 (classliteral -> % .)
    `               reduce using rule 66 (classliteral -> % .)
    {               reduce using rule 66 (classliteral -> % .)
    }               reduce using rule 66 (classliteral -> % .)
    ~               reduce using rule 66 (classliteral -> % .)
    ESCAPED         reduce using rule 66 (classliteral -> % .)
    ALPHA           reduce using rule 66 (classliteral -> % .)
    DIGIT           reduce using rule 66 (classliteral -> % .)
    OTHER           reduce using rule 66 (classliteral -> % .)
    ]               reduce using rule 66 (classliteral -> % .)
    |               reduce using rule 66 (classliteral -> % .)


state 78

    (84) classliteral -> \ .

    -               reduce using rule 84 (classliteral -> \ .)
    !               reduce using rule 84 (classliteral -> \ .)
    "               reduce using rule 84 (classliteral -> \ .)
    #               reduce using rule 84 (classliteral -> \ .)
    $               reduce using rule 84 (classliteral -> \ .)
    %               reduce using rule 84 (classliteral -> \ .)
    &               reduce using rule 84 (classliteral -> \ .)
    '               reduce using rule 84 (classliteral -> \ .)
    (               reduce using rule 84 (classliteral -> \ .)
    )               reduce using rule 84 (classliteral -> \ .)
    *               reduce using rule 84 (classliteral -> \ .)
    +               reduce using rule 84 (classliteral -> \ .)
    ,               reduce using rule 84 (classliteral -> \ .)
    .               reduce using rule 84 (classliteral -> \ .)
    /               reduce using rule 84 (classliteral -> \ .)
    :               reduce using rule 84 (classliteral -> \ .)
    ;               reduce using rule 84 (classliteral -> \ .)
    <               reduce using rule 84 (classliteral -> \ .)
    =               reduce using rule 84 (classliteral -> \ .)
    >               reduce using rule 84 (classliteral -> \ .)
    ?               reduce using rule 84 (classliteral -> \ .)
    @               reduce using rule 84 (classliteral -> \ .)
    [               reduce using rule 84 (classliteral -> \ .)
    \               reduce using rule 84 (classliteral -> \ .)
    _               reduce using rule 84 (classliteral -> \ .)
    `               reduce using rule 84 (classliteral -> \ .)
    {               reduce using rule 84 (classliteral -> \ .)
    }               reduce using rule 84 (classliteral -> \ .)
    ~               reduce using rule 84 (classliteral -> \ .)
    ESCAPED         reduce using rule 84 (classliteral -> \ .)
    ALPHA           reduce using rule 84 (classliteral -> \ .)
    DIGIT           reduce using rule 84 (classliteral -> \ .)
    OTHER           reduce using rule 84 (classliteral -> \ .)
    ]               reduce using rule 84 (classliteral -> \ .)
    |               reduce using rule 84 (classliteral -> \ .)


state 79

    (6) concatenation -> simple basic .

    (               reduce using rule 6 (concatenation -> simple basic .)
    ^               reduce using rule 6 (concatenation -> simple basic .)
    >               reduce using rule 6 (concatenation -> simple basic .)
    <               reduce using rule 6 (concatenation -> simple basic .)
    /               reduce using rule 6 (concatenation -> simple basic .)
    \               reduce using rule 6 (concatenation -> simple basic .)
    #               reduce using rule 6 (concatenation -> simple basic .)
    %               reduce using rule 6 (concatenation -> simple basic .)
    ESCAPED         reduce using rule 6 (concatenation -> simple basic .)
    ALPHA           reduce using rule 6 (concatenation -> simple basic .)
    DIGIT           reduce using rule 6 (concatenation -> simple basic .)
    OTHER           reduce using rule 6 (concatenation -> simple basic .)
    [               reduce using rule 6 (concatenation -> simple basic .)
    .               reduce using rule 6 (concatenation -> simple basic .)
    ,               reduce using rule 6 (concatenation -> simple basic .)
    :               reduce using rule 6 (concatenation -> simple basic .)
    ;               reduce using rule 6 (concatenation -> simple basic .)
    $               reduce using rule 6 (concatenation -> simple basic .)
    `               reduce using rule 6 (concatenation -> simple basic .)
    |               reduce using rule 6 (concatenation -> simple basic .)
    $end            reduce using rule 6 (concatenation -> simple basic .)
    )               reduce using rule 6 (concatenation -> simple basic .)


state 80

    (3) alternation -> re | . simple
    (4) simple -> . concatenation
    (5) simple -> . basic
    (6) concatenation -> . simple basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . nomatch
    (23) elementary -> . nodispmatch
    (24) elementary -> . anchor
    (25) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (39) group -> . ( groupbody )
    (93) directional -> . ^ DIGIT
    (94) directional -> . ^ ALPHA
    (95) directional -> . ^ *
    (96) directional -> . ^ +
    (101) command -> . >
    (102) command -> . <
    (103) command -> . /
    (104) command -> . \
    (105) command -> . #
    (106) command -> . %
    (107) literal -> . ESCAPED
    (108) literal -> . ALPHA
    (109) literal -> . DIGIT
    (110) literal -> . OTHER
    (53) charclass -> . [ classitems ]
    (33) anychar -> . .
    (34) nodisplay -> . ,
    (35) nomatch -> . :
    (36) nodispmatch -> . ;
    (97) anchor -> . $ DIGIT
    (98) anchor -> . $ ALPHA
    (99) anchor -> . $ *
    (100) anchor -> . $ +
    (92) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (26) asterisk -> . elementary *
    (27) plus -> . elementary +
    (28) optional -> . elementary ?
    (29) nrepeat -> . elementary { number }
    (30) nrepeat -> . elementary { , number }
    (31) nrepeat -> . elementary { number , }
    (32) nrepeat -> . elementary { number , number }

    (               shift and go to state 22
    ^               shift and go to state 30
    >               shift and go to state 38
    <               shift and go to state 4
    /               shift and go to state 19
    \               shift and go to state 25
    #               shift and go to state 13
    %               shift and go to state 42
    ESCAPED         shift and go to state 39
    ALPHA           shift and go to state 34
    DIGIT           shift and go to state 28
    OTHER           shift and go to state 7
    [               shift and go to state 1
    .               shift and go to state 33
    ,               shift and go to state 18
    :               shift and go to state 15
    ;               shift and go to state 21
    $               shift and go to state 32
    `               shift and go to state 29

    basequantifier                 shift and go to state 27
    anchor                         shift and go to state 2
    nomatch                        shift and go to state 3
    command                        shift and go to state 5
    nodispmatch                    shift and go to state 8
    simple                         shift and go to state 104
    nodisplay                      shift and go to state 12
    optional                       shift and go to state 31
    literal                        shift and go to state 11
    nrepeat                        shift and go to state 14
    concatenation                  shift and go to state 23
    group                          shift and go to state 16
    plus                           shift and go to state 17
    directional                    shift and go to state 35
    predefined                     shift and go to state 36
    quantifier                     shift and go to state 6
    charclass                      shift and go to state 20
    anychar                        shift and go to state 37
    basic                          shift and go to state 40
    elementary                     shift and go to state 41
    asterisk                       shift and go to state 24

state 81

    (52) basicgroup -> re .
    (3) alternation -> re . | simple

    )               reduce using rule 52 (basicgroup -> re .)
    |               shift and go to state 80


state 82

    (39) group -> ( groupbody . )

    )               shift and go to state 105


state 83

    (41) groupbody -> basicgroup .

    )               reduce using rule 41 (groupbody -> basicgroup .)


state 84

    (40) groupbody -> ? . specialgroup
    (42) specialgroup -> . _ lengthcheck
    (43) specialgroup -> . | stationarygroup
    (44) specialgroup -> . : nomatchgroup
    (45) specialgroup -> . , nodispgroup
    (46) specialgroup -> . ; nodispmatchgroup

    _               shift and go to state 109
    |               shift and go to state 106
    :               shift and go to state 111
    ,               shift and go to state 107
    ;               shift and go to state 108

    specialgroup                   shift and go to state 110

state 85

    (10) quantifier -> basequantifier ? .

    (               reduce using rule 10 (quantifier -> basequantifier ? .)
    ^               reduce using rule 10 (quantifier -> basequantifier ? .)
    >               reduce using rule 10 (quantifier -> basequantifier ? .)
    <               reduce using rule 10 (quantifier -> basequantifier ? .)
    /               reduce using rule 10 (quantifier -> basequantifier ? .)
    \               reduce using rule 10 (quantifier -> basequantifier ? .)
    #               reduce using rule 10 (quantifier -> basequantifier ? .)
    %               reduce using rule 10 (quantifier -> basequantifier ? .)
    ESCAPED         reduce using rule 10 (quantifier -> basequantifier ? .)
    ALPHA           reduce using rule 10 (quantifier -> basequantifier ? .)
    DIGIT           reduce using rule 10 (quantifier -> basequantifier ? .)
    OTHER           reduce using rule 10 (quantifier -> basequantifier ? .)
    [               reduce using rule 10 (quantifier -> basequantifier ? .)
    .               reduce using rule 10 (quantifier -> basequantifier ? .)
    ,               reduce using rule 10 (quantifier -> basequantifier ? .)
    :               reduce using rule 10 (quantifier -> basequantifier ? .)
    ;               reduce using rule 10 (quantifier -> basequantifier ? .)
    $               reduce using rule 10 (quantifier -> basequantifier ? .)
    `               reduce using rule 10 (quantifier -> basequantifier ? .)
    |               reduce using rule 10 (quantifier -> basequantifier ? .)
    )               reduce using rule 10 (quantifier -> basequantifier ? .)
    $end            reduce using rule 10 (quantifier -> basequantifier ? .)


state 86

    (92) predefined -> ` ALPHA .

    *               reduce using rule 92 (predefined -> ` ALPHA .)
    +               reduce using rule 92 (predefined -> ` ALPHA .)
    ?               reduce using rule 92 (predefined -> ` ALPHA .)
    {               reduce using rule 92 (predefined -> ` ALPHA .)
    (               reduce using rule 92 (predefined -> ` ALPHA .)
    ^               reduce using rule 92 (predefined -> ` ALPHA .)
    >               reduce using rule 92 (predefined -> ` ALPHA .)
    <               reduce using rule 92 (predefined -> ` ALPHA .)
    /               reduce using rule 92 (predefined -> ` ALPHA .)
    \               reduce using rule 92 (predefined -> ` ALPHA .)
    #               reduce using rule 92 (predefined -> ` ALPHA .)
    %               reduce using rule 92 (predefined -> ` ALPHA .)
    ESCAPED         reduce using rule 92 (predefined -> ` ALPHA .)
    ALPHA           reduce using rule 92 (predefined -> ` ALPHA .)
    DIGIT           reduce using rule 92 (predefined -> ` ALPHA .)
    OTHER           reduce using rule 92 (predefined -> ` ALPHA .)
    [               reduce using rule 92 (predefined -> ` ALPHA .)
    .               reduce using rule 92 (predefined -> ` ALPHA .)
    ,               reduce using rule 92 (predefined -> ` ALPHA .)
    :               reduce using rule 92 (predefined -> ` ALPHA .)
    ;               reduce using rule 92 (predefined -> ` ALPHA .)
    $               reduce using rule 92 (predefined -> ` ALPHA .)
    `               reduce using rule 92 (predefined -> ` ALPHA .)
    |               reduce using rule 92 (predefined -> ` ALPHA .)
    )               reduce using rule 92 (predefined -> ` ALPHA .)
    $end            reduce using rule 92 (predefined -> ` ALPHA .)


state 87

    (95) directional -> ^ * .

    *               reduce using rule 95 (directional -> ^ * .)
    +               reduce using rule 95 (directional -> ^ * .)
    ?               reduce using rule 95 (directional -> ^ * .)
    {               reduce using rule 95 (directional -> ^ * .)
    (               reduce using rule 95 (directional -> ^ * .)
    ^               reduce using rule 95 (directional -> ^ * .)
    >               reduce using rule 95 (directional -> ^ * .)
    <               reduce using rule 95 (directional -> ^ * .)
    /               reduce using rule 95 (directional -> ^ * .)
    \               reduce using rule 95 (directional -> ^ * .)
    #               reduce using rule 95 (directional -> ^ * .)
    %               reduce using rule 95 (directional -> ^ * .)
    ESCAPED         reduce using rule 95 (directional -> ^ * .)
    ALPHA           reduce using rule 95 (directional -> ^ * .)
    DIGIT           reduce using rule 95 (directional -> ^ * .)
    OTHER           reduce using rule 95 (directional -> ^ * .)
    [               reduce using rule 95 (directional -> ^ * .)
    .               reduce using rule 95 (directional -> ^ * .)
    ,               reduce using rule 95 (directional -> ^ * .)
    :               reduce using rule 95 (directional -> ^ * .)
    ;               reduce using rule 95 (directional -> ^ * .)
    $               reduce using rule 95 (directional -> ^ * .)
    `               reduce using rule 95 (directional -> ^ * .)
    |               reduce using rule 95 (directional -> ^ * .)
    )               reduce using rule 95 (directional -> ^ * .)
    $end            reduce using rule 95 (directional -> ^ * .)


state 88

    (96) directional -> ^ + .

    *               reduce using rule 96 (directional -> ^ + .)
    +               reduce using rule 96 (directional -> ^ + .)
    ?               reduce using rule 96 (directional -> ^ + .)
    {               reduce using rule 96 (directional -> ^ + .)
    (               reduce using rule 96 (directional -> ^ + .)
    ^               reduce using rule 96 (directional -> ^ + .)
    >               reduce using rule 96 (directional -> ^ + .)
    <               reduce using rule 96 (directional -> ^ + .)
    /               reduce using rule 96 (directional -> ^ + .)
    \               reduce using rule 96 (directional -> ^ + .)
    #               reduce using rule 96 (directional -> ^ + .)
    %               reduce using rule 96 (directional -> ^ + .)
    ESCAPED         reduce using rule 96 (directional -> ^ + .)
    ALPHA           reduce using rule 96 (directional -> ^ + .)
    DIGIT           reduce using rule 96 (directional -> ^ + .)
    OTHER           reduce using rule 96 (directional -> ^ + .)
    [               reduce using rule 96 (directional -> ^ + .)
    .               reduce using rule 96 (directional -> ^ + .)
    ,               reduce using rule 96 (directional -> ^ + .)
    :               reduce using rule 96 (directional -> ^ + .)
    ;               reduce using rule 96 (directional -> ^ + .)
    $               reduce using rule 96 (directional -> ^ + .)
    `               reduce using rule 96 (directional -> ^ + .)
    |               reduce using rule 96 (directional -> ^ + .)
    )               reduce using rule 96 (directional -> ^ + .)
    $end            reduce using rule 96 (directional -> ^ + .)


state 89

    (94) directional -> ^ ALPHA .

    *               reduce using rule 94 (directional -> ^ ALPHA .)
    +               reduce using rule 94 (directional -> ^ ALPHA .)
    ?               reduce using rule 94 (directional -> ^ ALPHA .)
    {               reduce using rule 94 (directional -> ^ ALPHA .)
    (               reduce using rule 94 (directional -> ^ ALPHA .)
    ^               reduce using rule 94 (directional -> ^ ALPHA .)
    >               reduce using rule 94 (directional -> ^ ALPHA .)
    <               reduce using rule 94 (directional -> ^ ALPHA .)
    /               reduce using rule 94 (directional -> ^ ALPHA .)
    \               reduce using rule 94 (directional -> ^ ALPHA .)
    #               reduce using rule 94 (directional -> ^ ALPHA .)
    %               reduce using rule 94 (directional -> ^ ALPHA .)
    ESCAPED         reduce using rule 94 (directional -> ^ ALPHA .)
    ALPHA           reduce using rule 94 (directional -> ^ ALPHA .)
    DIGIT           reduce using rule 94 (directional -> ^ ALPHA .)
    OTHER           reduce using rule 94 (directional -> ^ ALPHA .)
    [               reduce using rule 94 (directional -> ^ ALPHA .)
    .               reduce using rule 94 (directional -> ^ ALPHA .)
    ,               reduce using rule 94 (directional -> ^ ALPHA .)
    :               reduce using rule 94 (directional -> ^ ALPHA .)
    ;               reduce using rule 94 (directional -> ^ ALPHA .)
    $               reduce using rule 94 (directional -> ^ ALPHA .)
    `               reduce using rule 94 (directional -> ^ ALPHA .)
    |               reduce using rule 94 (directional -> ^ ALPHA .)
    )               reduce using rule 94 (directional -> ^ ALPHA .)
    $end            reduce using rule 94 (directional -> ^ ALPHA .)


state 90

    (93) directional -> ^ DIGIT .

    *               reduce using rule 93 (directional -> ^ DIGIT .)
    +               reduce using rule 93 (directional -> ^ DIGIT .)
    ?               reduce using rule 93 (directional -> ^ DIGIT .)
    {               reduce using rule 93 (directional -> ^ DIGIT .)
    (               reduce using rule 93 (directional -> ^ DIGIT .)
    ^               reduce using rule 93 (directional -> ^ DIGIT .)
    >               reduce using rule 93 (directional -> ^ DIGIT .)
    <               reduce using rule 93 (directional -> ^ DIGIT .)
    /               reduce using rule 93 (directional -> ^ DIGIT .)
    \               reduce using rule 93 (directional -> ^ DIGIT .)
    #               reduce using rule 93 (directional -> ^ DIGIT .)
    %               reduce using rule 93 (directional -> ^ DIGIT .)
    ESCAPED         reduce using rule 93 (directional -> ^ DIGIT .)
    ALPHA           reduce using rule 93 (directional -> ^ DIGIT .)
    DIGIT           reduce using rule 93 (directional -> ^ DIGIT .)
    OTHER           reduce using rule 93 (directional -> ^ DIGIT .)
    [               reduce using rule 93 (directional -> ^ DIGIT .)
    .               reduce using rule 93 (directional -> ^ DIGIT .)
    ,               reduce using rule 93 (directional -> ^ DIGIT .)
    :               reduce using rule 93 (directional -> ^ DIGIT .)
    ;               reduce using rule 93 (directional -> ^ DIGIT .)
    $               reduce using rule 93 (directional -> ^ DIGIT .)
    `               reduce using rule 93 (directional -> ^ DIGIT .)
    |               reduce using rule 93 (directional -> ^ DIGIT .)
    )               reduce using rule 93 (directional -> ^ DIGIT .)
    $end            reduce using rule 93 (directional -> ^ DIGIT .)


state 91

    (99) anchor -> $ * .

    *               reduce using rule 99 (anchor -> $ * .)
    +               reduce using rule 99 (anchor -> $ * .)
    ?               reduce using rule 99 (anchor -> $ * .)
    {               reduce using rule 99 (anchor -> $ * .)
    (               reduce using rule 99 (anchor -> $ * .)
    ^               reduce using rule 99 (anchor -> $ * .)
    >               reduce using rule 99 (anchor -> $ * .)
    <               reduce using rule 99 (anchor -> $ * .)
    /               reduce using rule 99 (anchor -> $ * .)
    \               reduce using rule 99 (anchor -> $ * .)
    #               reduce using rule 99 (anchor -> $ * .)
    %               reduce using rule 99 (anchor -> $ * .)
    ESCAPED         reduce using rule 99 (anchor -> $ * .)
    ALPHA           reduce using rule 99 (anchor -> $ * .)
    DIGIT           reduce using rule 99 (anchor -> $ * .)
    OTHER           reduce using rule 99 (anchor -> $ * .)
    [               reduce using rule 99 (anchor -> $ * .)
    .               reduce using rule 99 (anchor -> $ * .)
    ,               reduce using rule 99 (anchor -> $ * .)
    :               reduce using rule 99 (anchor -> $ * .)
    ;               reduce using rule 99 (anchor -> $ * .)
    $               reduce using rule 99 (anchor -> $ * .)
    `               reduce using rule 99 (anchor -> $ * .)
    |               reduce using rule 99 (anchor -> $ * .)
    $end            reduce using rule 99 (anchor -> $ * .)
    )               reduce using rule 99 (anchor -> $ * .)


state 92

    (98) anchor -> $ ALPHA .

    *               reduce using rule 98 (anchor -> $ ALPHA .)
    +               reduce using rule 98 (anchor -> $ ALPHA .)
    ?               reduce using rule 98 (anchor -> $ ALPHA .)
    {               reduce using rule 98 (anchor -> $ ALPHA .)
    (               reduce using rule 98 (anchor -> $ ALPHA .)
    ^               reduce using rule 98 (anchor -> $ ALPHA .)
    >               reduce using rule 98 (anchor -> $ ALPHA .)
    <               reduce using rule 98 (anchor -> $ ALPHA .)
    /               reduce using rule 98 (anchor -> $ ALPHA .)
    \               reduce using rule 98 (anchor -> $ ALPHA .)
    #               reduce using rule 98 (anchor -> $ ALPHA .)
    %               reduce using rule 98 (anchor -> $ ALPHA .)
    ESCAPED         reduce using rule 98 (anchor -> $ ALPHA .)
    ALPHA           reduce using rule 98 (anchor -> $ ALPHA .)
    DIGIT           reduce using rule 98 (anchor -> $ ALPHA .)
    OTHER           reduce using rule 98 (anchor -> $ ALPHA .)
    [               reduce using rule 98 (anchor -> $ ALPHA .)
    .               reduce using rule 98 (anchor -> $ ALPHA .)
    ,               reduce using rule 98 (anchor -> $ ALPHA .)
    :               reduce using rule 98 (anchor -> $ ALPHA .)
    ;               reduce using rule 98 (anchor -> $ ALPHA .)
    $               reduce using rule 98 (anchor -> $ ALPHA .)
    `               reduce using rule 98 (anchor -> $ ALPHA .)
    |               reduce using rule 98 (anchor -> $ ALPHA .)
    $end            reduce using rule 98 (anchor -> $ ALPHA .)
    )               reduce using rule 98 (anchor -> $ ALPHA .)


state 93

    (100) anchor -> $ + .

    *               reduce using rule 100 (anchor -> $ + .)
    +               reduce using rule 100 (anchor -> $ + .)
    ?               reduce using rule 100 (anchor -> $ + .)
    {               reduce using rule 100 (anchor -> $ + .)
    (               reduce using rule 100 (anchor -> $ + .)
    ^               reduce using rule 100 (anchor -> $ + .)
    >               reduce using rule 100 (anchor -> $ + .)
    <               reduce using rule 100 (anchor -> $ + .)
    /               reduce using rule 100 (anchor -> $ + .)
    \               reduce using rule 100 (anchor -> $ + .)
    #               reduce using rule 100 (anchor -> $ + .)
    %               reduce using rule 100 (anchor -> $ + .)
    ESCAPED         reduce using rule 100 (anchor -> $ + .)
    ALPHA           reduce using rule 100 (anchor -> $ + .)
    DIGIT           reduce using rule 100 (anchor -> $ + .)
    OTHER           reduce using rule 100 (anchor -> $ + .)
    [               reduce using rule 100 (anchor -> $ + .)
    .               reduce using rule 100 (anchor -> $ + .)
    ,               reduce using rule 100 (anchor -> $ + .)
    :               reduce using rule 100 (anchor -> $ + .)
    ;               reduce using rule 100 (anchor -> $ + .)
    $               reduce using rule 100 (anchor -> $ + .)
    `               reduce using rule 100 (anchor -> $ + .)
    |               reduce using rule 100 (anchor -> $ + .)
    $end            reduce using rule 100 (anchor -> $ + .)
    )               reduce using rule 100 (anchor -> $ + .)


state 94

    (97) anchor -> $ DIGIT .

    *               reduce using rule 97 (anchor -> $ DIGIT .)
    +               reduce using rule 97 (anchor -> $ DIGIT .)
    ?               reduce using rule 97 (anchor -> $ DIGIT .)
    {               reduce using rule 97 (anchor -> $ DIGIT .)
    (               reduce using rule 97 (anchor -> $ DIGIT .)
    ^               reduce using rule 97 (anchor -> $ DIGIT .)
    >               reduce using rule 97 (anchor -> $ DIGIT .)
    <               reduce using rule 97 (anchor -> $ DIGIT .)
    /               reduce using rule 97 (anchor -> $ DIGIT .)
    \               reduce using rule 97 (anchor -> $ DIGIT .)
    #               reduce using rule 97 (anchor -> $ DIGIT .)
    %               reduce using rule 97 (anchor -> $ DIGIT .)
    ESCAPED         reduce using rule 97 (anchor -> $ DIGIT .)
    ALPHA           reduce using rule 97 (anchor -> $ DIGIT .)
    DIGIT           reduce using rule 97 (anchor -> $ DIGIT .)
    OTHER           reduce using rule 97 (anchor -> $ DIGIT .)
    [               reduce using rule 97 (anchor -> $ DIGIT .)
    .               reduce using rule 97 (anchor -> $ DIGIT .)
    ,               reduce using rule 97 (anchor -> $ DIGIT .)
    :               reduce using rule 97 (anchor -> $ DIGIT .)
    ;               reduce using rule 97 (anchor -> $ DIGIT .)
    $               reduce using rule 97 (anchor -> $ DIGIT .)
    `               reduce using rule 97 (anchor -> $ DIGIT .)
    |               reduce using rule 97 (anchor -> $ DIGIT .)
    $end            reduce using rule 97 (anchor -> $ DIGIT .)
    )               reduce using rule 97 (anchor -> $ DIGIT .)


state 95

    (29) nrepeat -> elementary { . number }
    (30) nrepeat -> elementary { . , number }
    (31) nrepeat -> elementary { . number , }
    (32) nrepeat -> elementary { . number , number }
    (37) number -> . DIGIT
    (38) number -> . DIGIT number

    ,               shift and go to state 113
    DIGIT           shift and go to state 112

    number                         shift and go to state 114

state 96

    (27) plus -> elementary + .

    ?               reduce using rule 27 (plus -> elementary + .)
    (               reduce using rule 27 (plus -> elementary + .)
    ^               reduce using rule 27 (plus -> elementary + .)
    >               reduce using rule 27 (plus -> elementary + .)
    <               reduce using rule 27 (plus -> elementary + .)
    /               reduce using rule 27 (plus -> elementary + .)
    \               reduce using rule 27 (plus -> elementary + .)
    #               reduce using rule 27 (plus -> elementary + .)
    %               reduce using rule 27 (plus -> elementary + .)
    ESCAPED         reduce using rule 27 (plus -> elementary + .)
    ALPHA           reduce using rule 27 (plus -> elementary + .)
    DIGIT           reduce using rule 27 (plus -> elementary + .)
    OTHER           reduce using rule 27 (plus -> elementary + .)
    [               reduce using rule 27 (plus -> elementary + .)
    .               reduce using rule 27 (plus -> elementary + .)
    ,               reduce using rule 27 (plus -> elementary + .)
    :               reduce using rule 27 (plus -> elementary + .)
    ;               reduce using rule 27 (plus -> elementary + .)
    $               reduce using rule 27 (plus -> elementary + .)
    `               reduce using rule 27 (plus -> elementary + .)
    |               reduce using rule 27 (plus -> elementary + .)
    $end            reduce using rule 27 (plus -> elementary + .)
    )               reduce using rule 27 (plus -> elementary + .)


state 97

    (28) optional -> elementary ? .

    ?               reduce using rule 28 (optional -> elementary ? .)
    (               reduce using rule 28 (optional -> elementary ? .)
    ^               reduce using rule 28 (optional -> elementary ? .)
    >               reduce using rule 28 (optional -> elementary ? .)
    <               reduce using rule 28 (optional -> elementary ? .)
    /               reduce using rule 28 (optional -> elementary ? .)
    \               reduce using rule 28 (optional -> elementary ? .)
    #               reduce using rule 28 (optional -> elementary ? .)
    %               reduce using rule 28 (optional -> elementary ? .)
    ESCAPED         reduce using rule 28 (optional -> elementary ? .)
    ALPHA           reduce using rule 28 (optional -> elementary ? .)
    DIGIT           reduce using rule 28 (optional -> elementary ? .)
    OTHER           reduce using rule 28 (optional -> elementary ? .)
    [               reduce using rule 28 (optional -> elementary ? .)
    .               reduce using rule 28 (optional -> elementary ? .)
    ,               reduce using rule 28 (optional -> elementary ? .)
    :               reduce using rule 28 (optional -> elementary ? .)
    ;               reduce using rule 28 (optional -> elementary ? .)
    $               reduce using rule 28 (optional -> elementary ? .)
    `               reduce using rule 28 (optional -> elementary ? .)
    |               reduce using rule 28 (optional -> elementary ? .)
    )               reduce using rule 28 (optional -> elementary ? .)
    $end            reduce using rule 28 (optional -> elementary ? .)


state 98

    (26) asterisk -> elementary * .

    ?               reduce using rule 26 (asterisk -> elementary * .)
    (               reduce using rule 26 (asterisk -> elementary * .)
    ^               reduce using rule 26 (asterisk -> elementary * .)
    >               reduce using rule 26 (asterisk -> elementary * .)
    <               reduce using rule 26 (asterisk -> elementary * .)
    /               reduce using rule 26 (asterisk -> elementary * .)
    \               reduce using rule 26 (asterisk -> elementary * .)
    #               reduce using rule 26 (asterisk -> elementary * .)
    %               reduce using rule 26 (asterisk -> elementary * .)
    ESCAPED         reduce using rule 26 (asterisk -> elementary * .)
    ALPHA           reduce using rule 26 (asterisk -> elementary * .)
    DIGIT           reduce using rule 26 (asterisk -> elementary * .)
    OTHER           reduce using rule 26 (asterisk -> elementary * .)
    [               reduce using rule 26 (asterisk -> elementary * .)
    .               reduce using rule 26 (asterisk -> elementary * .)
    ,               reduce using rule 26 (asterisk -> elementary * .)
    :               reduce using rule 26 (asterisk -> elementary * .)
    ;               reduce using rule 26 (asterisk -> elementary * .)
    $               reduce using rule 26 (asterisk -> elementary * .)
    `               reduce using rule 26 (asterisk -> elementary * .)
    |               reduce using rule 26 (asterisk -> elementary * .)
    )               reduce using rule 26 (asterisk -> elementary * .)
    $end            reduce using rule 26 (asterisk -> elementary * .)


state 99

    (91) classrange -> classliteral - . classliteral
    (62) classliteral -> . !
    (63) classliteral -> . "
    (64) classliteral -> . #
    (65) classliteral -> . $
    (66) classliteral -> . %
    (67) classliteral -> . &
    (68) classliteral -> . '
    (69) classliteral -> . (
    (70) classliteral -> . )
    (71) classliteral -> . *
    (72) classliteral -> . +
    (73) classliteral -> . ,
    (74) classliteral -> . .
    (75) classliteral -> . /
    (76) classliteral -> . :
    (77) classliteral -> . ;
    (78) classliteral -> . <
    (79) classliteral -> . =
    (80) classliteral -> . >
    (81) classliteral -> . ?
    (82) classliteral -> . @
    (83) classliteral -> . [
    (84) classliteral -> . \
    (85) classliteral -> . _
    (86) classliteral -> . `
    (87) classliteral -> . {
    (88) classliteral -> . }
    (89) classliteral -> . ~
    (90) classliteral -> . literal
    (107) literal -> . ESCAPED
    (108) literal -> . ALPHA
    (109) literal -> . DIGIT
    (110) literal -> . OTHER

    !               shift and go to state 60
    "               shift and go to state 53
    #               shift and go to state 59
    $               shift and go to state 57
    %               shift and go to state 77
    &               shift and go to state 76
    '               shift and go to state 64
    (               shift and go to state 74
    )               shift and go to state 45
    *               shift and go to state 50
    +               shift and go to state 63
    ,               shift and go to state 66
    .               shift and go to state 62
    /               shift and go to state 67
    :               shift and go to state 61
    ;               shift and go to state 69
    <               shift and go to state 47
    =               shift and go to state 52
    >               shift and go to state 71
    ?               shift and go to state 46
    @               shift and go to state 51
    [               shift and go to state 43
    \               shift and go to state 78
    _               shift and go to state 48
    `               shift and go to state 49
    {               shift and go to state 72
    }               shift and go to state 75
    ~               shift and go to state 56
    ESCAPED         shift and go to state 39
    ALPHA           shift and go to state 34
    DIGIT           shift and go to state 28
    OTHER           shift and go to state 7

    classliteral                   shift and go to state 115
    literal                        shift and go to state 58

state 100

    (54) classitems -> ^ baseitems .

    ]               reduce using rule 54 (classitems -> ^ baseitems .)


state 101

    (57) classitems2 -> baseitems | . baseitems
    (58) baseitems -> . classatom
    (59) baseitems -> . classatom baseitems
    (60) classatom -> . classliteral
    (61) classatom -> . classrange
    (62) classliteral -> . !
    (63) classliteral -> . "
    (64) classliteral -> . #
    (65) classliteral -> . $
    (66) classliteral -> . %
    (67) classliteral -> . &
    (68) classliteral -> . '
    (69) classliteral -> . (
    (70) classliteral -> . )
    (71) classliteral -> . *
    (72) classliteral -> . +
    (73) classliteral -> . ,
    (74) classliteral -> . .
    (75) classliteral -> . /
    (76) classliteral -> . :
    (77) classliteral -> . ;
    (78) classliteral -> . <
    (79) classliteral -> . =
    (80) classliteral -> . >
    (81) classliteral -> . ?
    (82) classliteral -> . @
    (83) classliteral -> . [
    (84) classliteral -> . \
    (85) classliteral -> . _
    (86) classliteral -> . `
    (87) classliteral -> . {
    (88) classliteral -> . }
    (89) classliteral -> . ~
    (90) classliteral -> . literal
    (91) classrange -> . classliteral - classliteral
    (107) literal -> . ESCAPED
    (108) literal -> . ALPHA
    (109) literal -> . DIGIT
    (110) literal -> . OTHER

    !               shift and go to state 60
    "               shift and go to state 53
    #               shift and go to state 59
    $               shift and go to state 57
    %               shift and go to state 77
    &               shift and go to state 76
    '               shift and go to state 64
    (               shift and go to state 74
    )               shift and go to state 45
    *               shift and go to state 50
    +               shift and go to state 63
    ,               shift and go to state 66
    .               shift and go to state 62
    /               shift and go to state 67
    :               shift and go to state 61
    ;               shift and go to state 69
    <               shift and go to state 47
    =               shift and go to state 52
    >               shift and go to state 71
    ?               shift and go to state 46
    @               shift and go to state 51
    [               shift and go to state 43
    \               shift and go to state 78
    _               shift and go to state 48
    `               shift and go to state 49
    {               shift and go to state 72
    }               shift and go to state 75
    ~               shift and go to state 56
    ESCAPED         shift and go to state 39
    ALPHA           shift and go to state 34
    DIGIT           shift and go to state 28
    OTHER           shift and go to state 7

    baseitems                      shift and go to state 116
    literal                        shift and go to state 58
    classrange                     shift and go to state 44
    classatom                      shift and go to state 68
    classliteral                   shift and go to state 54

state 102

    (59) baseitems -> classatom baseitems .

    |               reduce using rule 59 (baseitems -> classatom baseitems .)
    ]               reduce using rule 59 (baseitems -> classatom baseitems .)


state 103

    (53) charclass -> [ classitems ] .

    *               reduce using rule 53 (charclass -> [ classitems ] .)
    +               reduce using rule 53 (charclass -> [ classitems ] .)
    ?               reduce using rule 53 (charclass -> [ classitems ] .)
    {               reduce using rule 53 (charclass -> [ classitems ] .)
    (               reduce using rule 53 (charclass -> [ classitems ] .)
    ^               reduce using rule 53 (charclass -> [ classitems ] .)
    >               reduce using rule 53 (charclass -> [ classitems ] .)
    <               reduce using rule 53 (charclass -> [ classitems ] .)
    /               reduce using rule 53 (charclass -> [ classitems ] .)
    \               reduce using rule 53 (charclass -> [ classitems ] .)
    #               reduce using rule 53 (charclass -> [ classitems ] .)
    %               reduce using rule 53 (charclass -> [ classitems ] .)
    ESCAPED         reduce using rule 53 (charclass -> [ classitems ] .)
    ALPHA           reduce using rule 53 (charclass -> [ classitems ] .)
    DIGIT           reduce using rule 53 (charclass -> [ classitems ] .)
    OTHER           reduce using rule 53 (charclass -> [ classitems ] .)
    [               reduce using rule 53 (charclass -> [ classitems ] .)
    .               reduce using rule 53 (charclass -> [ classitems ] .)
    ,               reduce using rule 53 (charclass -> [ classitems ] .)
    :               reduce using rule 53 (charclass -> [ classitems ] .)
    ;               reduce using rule 53 (charclass -> [ classitems ] .)
    $               reduce using rule 53 (charclass -> [ classitems ] .)
    `               reduce using rule 53 (charclass -> [ classitems ] .)
    |               reduce using rule 53 (charclass -> [ classitems ] .)
    )               reduce using rule 53 (charclass -> [ classitems ] .)
    $end            reduce using rule 53 (charclass -> [ classitems ] .)


state 104

    (3) alternation -> re | simple .
    (6) concatenation -> simple . basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . nomatch
    (23) elementary -> . nodispmatch
    (24) elementary -> . anchor
    (25) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (39) group -> . ( groupbody )
    (93) directional -> . ^ DIGIT
    (94) directional -> . ^ ALPHA
    (95) directional -> . ^ *
    (96) directional -> . ^ +
    (101) command -> . >
    (102) command -> . <
    (103) command -> . /
    (104) command -> . \
    (105) command -> . #
    (106) command -> . %
    (107) literal -> . ESCAPED
    (108) literal -> . ALPHA
    (109) literal -> . DIGIT
    (110) literal -> . OTHER
    (53) charclass -> . [ classitems ]
    (33) anychar -> . .
    (34) nodisplay -> . ,
    (35) nomatch -> . :
    (36) nodispmatch -> . ;
    (97) anchor -> . $ DIGIT
    (98) anchor -> . $ ALPHA
    (99) anchor -> . $ *
    (100) anchor -> . $ +
    (92) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (26) asterisk -> . elementary *
    (27) plus -> . elementary +
    (28) optional -> . elementary ?
    (29) nrepeat -> . elementary { number }
    (30) nrepeat -> . elementary { , number }
    (31) nrepeat -> . elementary { number , }
    (32) nrepeat -> . elementary { number , number }

    |               reduce using rule 3 (alternation -> re | simple .)
    )               reduce using rule 3 (alternation -> re | simple .)
    $end            reduce using rule 3 (alternation -> re | simple .)
    (               shift and go to state 22
    ^               shift and go to state 30
    >               shift and go to state 38
    <               shift and go to state 4
    /               shift and go to state 19
    \               shift and go to state 25
    #               shift and go to state 13
    %               shift and go to state 42
    ESCAPED         shift and go to state 39
    ALPHA           shift and go to state 34
    DIGIT           shift and go to state 28
    OTHER           shift and go to state 7
    [               shift and go to state 1
    .               shift and go to state 33
    ,               shift and go to state 18
    :               shift and go to state 15
    ;               shift and go to state 21
    $               shift and go to state 32
    `               shift and go to state 29

    basequantifier                 shift and go to state 27
    anchor                         shift and go to state 2
    nomatch                        shift and go to state 3
    command                        shift and go to state 5
    nodispmatch                    shift and go to state 8
    nodisplay                      shift and go to state 12
    optional                       shift and go to state 31
    literal                        shift and go to state 11
    nrepeat                        shift and go to state 14
    group                          shift and go to state 16
    plus                           shift and go to state 17
    directional                    shift and go to state 35
    predefined                     shift and go to state 36
    quantifier                     shift and go to state 6
    charclass                      shift and go to state 20
    anychar                        shift and go to state 37
    basic                          shift and go to state 79
    elementary                     shift and go to state 41
    asterisk                       shift and go to state 24

state 105

    (39) group -> ( groupbody ) .

    *               reduce using rule 39 (group -> ( groupbody ) .)
    +               reduce using rule 39 (group -> ( groupbody ) .)
    ?               reduce using rule 39 (group -> ( groupbody ) .)
    {               reduce using rule 39 (group -> ( groupbody ) .)
    (               reduce using rule 39 (group -> ( groupbody ) .)
    ^               reduce using rule 39 (group -> ( groupbody ) .)
    >               reduce using rule 39 (group -> ( groupbody ) .)
    <               reduce using rule 39 (group -> ( groupbody ) .)
    /               reduce using rule 39 (group -> ( groupbody ) .)
    \               reduce using rule 39 (group -> ( groupbody ) .)
    #               reduce using rule 39 (group -> ( groupbody ) .)
    %               reduce using rule 39 (group -> ( groupbody ) .)
    ESCAPED         reduce using rule 39 (group -> ( groupbody ) .)
    ALPHA           reduce using rule 39 (group -> ( groupbody ) .)
    DIGIT           reduce using rule 39 (group -> ( groupbody ) .)
    OTHER           reduce using rule 39 (group -> ( groupbody ) .)
    [               reduce using rule 39 (group -> ( groupbody ) .)
    .               reduce using rule 39 (group -> ( groupbody ) .)
    ,               reduce using rule 39 (group -> ( groupbody ) .)
    :               reduce using rule 39 (group -> ( groupbody ) .)
    ;               reduce using rule 39 (group -> ( groupbody ) .)
    $               reduce using rule 39 (group -> ( groupbody ) .)
    `               reduce using rule 39 (group -> ( groupbody ) .)
    |               reduce using rule 39 (group -> ( groupbody ) .)
    )               reduce using rule 39 (group -> ( groupbody ) .)
    $end            reduce using rule 39 (group -> ( groupbody ) .)


state 106

    (43) specialgroup -> | . stationarygroup
    (48) stationarygroup -> . re
    (1) re -> . alternation
    (2) re -> . simple
    (3) alternation -> . re | simple
    (4) simple -> . concatenation
    (5) simple -> . basic
    (6) concatenation -> . simple basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . nomatch
    (23) elementary -> . nodispmatch
    (24) elementary -> . anchor
    (25) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (39) group -> . ( groupbody )
    (93) directional -> . ^ DIGIT
    (94) directional -> . ^ ALPHA
    (95) directional -> . ^ *
    (96) directional -> . ^ +
    (101) command -> . >
    (102) command -> . <
    (103) command -> . /
    (104) command -> . \
    (105) command -> . #
    (106) command -> . %
    (107) literal -> . ESCAPED
    (108) literal -> . ALPHA
    (109) literal -> . DIGIT
    (110) literal -> . OTHER
    (53) charclass -> . [ classitems ]
    (33) anychar -> . .
    (34) nodisplay -> . ,
    (35) nomatch -> . :
    (36) nodispmatch -> . ;
    (97) anchor -> . $ DIGIT
    (98) anchor -> . $ ALPHA
    (99) anchor -> . $ *
    (100) anchor -> . $ +
    (92) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (26) asterisk -> . elementary *
    (27) plus -> . elementary +
    (28) optional -> . elementary ?
    (29) nrepeat -> . elementary { number }
    (30) nrepeat -> . elementary { , number }
    (31) nrepeat -> . elementary { number , }
    (32) nrepeat -> . elementary { number , number }

    (               shift and go to state 22
    ^               shift and go to state 30
    >               shift and go to state 38
    <               shift and go to state 4
    /               shift and go to state 19
    \               shift and go to state 25
    #               shift and go to state 13
    %               shift and go to state 42
    ESCAPED         shift and go to state 39
    ALPHA           shift and go to state 34
    DIGIT           shift and go to state 28
    OTHER           shift and go to state 7
    [               shift and go to state 1
    .               shift and go to state 33
    ,               shift and go to state 18
    :               shift and go to state 15
    ;               shift and go to state 21
    $               shift and go to state 32
    `               shift and go to state 29

    alternation                    shift and go to state 26
    basequantifier                 shift and go to state 27
    anchor                         shift and go to state 2
    nomatch                        shift and go to state 3
    command                        shift and go to state 5
    nodispmatch                    shift and go to state 8
    simple                         shift and go to state 9
    nodisplay                      shift and go to state 12
    optional                       shift and go to state 31
    stationarygroup                shift and go to state 118
    literal                        shift and go to state 11
    re                             shift and go to state 117
    nrepeat                        shift and go to state 14
    concatenation                  shift and go to state 23
    group                          shift and go to state 16
    plus                           shift and go to state 17
    directional                    shift and go to state 35
    predefined                     shift and go to state 36
    quantifier                     shift and go to state 6
    charclass                      shift and go to state 20
    anychar                        shift and go to state 37
    basic                          shift and go to state 40
    elementary                     shift and go to state 41
    asterisk                       shift and go to state 24

state 107

    (45) specialgroup -> , . nodispgroup
    (50) nodispgroup -> . re
    (1) re -> . alternation
    (2) re -> . simple
    (3) alternation -> . re | simple
    (4) simple -> . concatenation
    (5) simple -> . basic
    (6) concatenation -> . simple basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . nomatch
    (23) elementary -> . nodispmatch
    (24) elementary -> . anchor
    (25) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (39) group -> . ( groupbody )
    (93) directional -> . ^ DIGIT
    (94) directional -> . ^ ALPHA
    (95) directional -> . ^ *
    (96) directional -> . ^ +
    (101) command -> . >
    (102) command -> . <
    (103) command -> . /
    (104) command -> . \
    (105) command -> . #
    (106) command -> . %
    (107) literal -> . ESCAPED
    (108) literal -> . ALPHA
    (109) literal -> . DIGIT
    (110) literal -> . OTHER
    (53) charclass -> . [ classitems ]
    (33) anychar -> . .
    (34) nodisplay -> . ,
    (35) nomatch -> . :
    (36) nodispmatch -> . ;
    (97) anchor -> . $ DIGIT
    (98) anchor -> . $ ALPHA
    (99) anchor -> . $ *
    (100) anchor -> . $ +
    (92) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (26) asterisk -> . elementary *
    (27) plus -> . elementary +
    (28) optional -> . elementary ?
    (29) nrepeat -> . elementary { number }
    (30) nrepeat -> . elementary { , number }
    (31) nrepeat -> . elementary { number , }
    (32) nrepeat -> . elementary { number , number }

    (               shift and go to state 22
    ^               shift and go to state 30
    >               shift and go to state 38
    <               shift and go to state 4
    /               shift and go to state 19
    \               shift and go to state 25
    #               shift and go to state 13
    %               shift and go to state 42
    ESCAPED         shift and go to state 39
    ALPHA           shift and go to state 34
    DIGIT           shift and go to state 28
    OTHER           shift and go to state 7
    [               shift and go to state 1
    .               shift and go to state 33
    ,               shift and go to state 18
    :               shift and go to state 15
    ;               shift and go to state 21
    $               shift and go to state 32
    `               shift and go to state 29

    alternation                    shift and go to state 26
    basequantifier                 shift and go to state 27
    anchor                         shift and go to state 2
    nomatch                        shift and go to state 3
    command                        shift and go to state 5
    nodispmatch                    shift and go to state 8
    simple                         shift and go to state 9
    nodisplay                      shift and go to state 12
    optional                       shift and go to state 31
    literal                        shift and go to state 11
    re                             shift and go to state 119
    nrepeat                        shift and go to state 14
    concatenation                  shift and go to state 23
    group                          shift and go to state 16
    plus                           shift and go to state 17
    directional                    shift and go to state 35
    predefined                     shift and go to state 36
    quantifier                     shift and go to state 6
    nodispgroup                    shift and go to state 120
    charclass                      shift and go to state 20
    anychar                        shift and go to state 37
    basic                          shift and go to state 40
    elementary                     shift and go to state 41
    asterisk                       shift and go to state 24

state 108

    (46) specialgroup -> ; . nodispmatchgroup
    (51) nodispmatchgroup -> . re
    (1) re -> . alternation
    (2) re -> . simple
    (3) alternation -> . re | simple
    (4) simple -> . concatenation
    (5) simple -> . basic
    (6) concatenation -> . simple basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . nomatch
    (23) elementary -> . nodispmatch
    (24) elementary -> . anchor
    (25) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (39) group -> . ( groupbody )
    (93) directional -> . ^ DIGIT
    (94) directional -> . ^ ALPHA
    (95) directional -> . ^ *
    (96) directional -> . ^ +
    (101) command -> . >
    (102) command -> . <
    (103) command -> . /
    (104) command -> . \
    (105) command -> . #
    (106) command -> . %
    (107) literal -> . ESCAPED
    (108) literal -> . ALPHA
    (109) literal -> . DIGIT
    (110) literal -> . OTHER
    (53) charclass -> . [ classitems ]
    (33) anychar -> . .
    (34) nodisplay -> . ,
    (35) nomatch -> . :
    (36) nodispmatch -> . ;
    (97) anchor -> . $ DIGIT
    (98) anchor -> . $ ALPHA
    (99) anchor -> . $ *
    (100) anchor -> . $ +
    (92) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (26) asterisk -> . elementary *
    (27) plus -> . elementary +
    (28) optional -> . elementary ?
    (29) nrepeat -> . elementary { number }
    (30) nrepeat -> . elementary { , number }
    (31) nrepeat -> . elementary { number , }
    (32) nrepeat -> . elementary { number , number }

    (               shift and go to state 22
    ^               shift and go to state 30
    >               shift and go to state 38
    <               shift and go to state 4
    /               shift and go to state 19
    \               shift and go to state 25
    #               shift and go to state 13
    %               shift and go to state 42
    ESCAPED         shift and go to state 39
    ALPHA           shift and go to state 34
    DIGIT           shift and go to state 28
    OTHER           shift and go to state 7
    [               shift and go to state 1
    .               shift and go to state 33
    ,               shift and go to state 18
    :               shift and go to state 15
    ;               shift and go to state 21
    $               shift and go to state 32
    `               shift and go to state 29

    alternation                    shift and go to state 26
    basequantifier                 shift and go to state 27
    anchor                         shift and go to state 2
    nomatch                        shift and go to state 3
    command                        shift and go to state 5
    nodispmatch                    shift and go to state 8
    simple                         shift and go to state 9
    nodisplay                      shift and go to state 12
    optional                       shift and go to state 31
    literal                        shift and go to state 11
    re                             shift and go to state 121
    charclass                      shift and go to state 20
    nrepeat                        shift and go to state 14
    concatenation                  shift and go to state 23
    group                          shift and go to state 16
    plus                           shift and go to state 17
    directional                    shift and go to state 35
    predefined                     shift and go to state 36
    quantifier                     shift and go to state 6
    nodispmatchgroup               shift and go to state 122
    anychar                        shift and go to state 37
    basic                          shift and go to state 40
    elementary                     shift and go to state 41
    asterisk                       shift and go to state 24

state 109

    (42) specialgroup -> _ . lengthcheck
    (47) lengthcheck -> . ( number ) re

    (               shift and go to state 124

    lengthcheck                    shift and go to state 123

state 110

    (40) groupbody -> ? specialgroup .

    )               reduce using rule 40 (groupbody -> ? specialgroup .)


state 111

    (44) specialgroup -> : . nomatchgroup
    (49) nomatchgroup -> . re
    (1) re -> . alternation
    (2) re -> . simple
    (3) alternation -> . re | simple
    (4) simple -> . concatenation
    (5) simple -> . basic
    (6) concatenation -> . simple basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . nomatch
    (23) elementary -> . nodispmatch
    (24) elementary -> . anchor
    (25) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (39) group -> . ( groupbody )
    (93) directional -> . ^ DIGIT
    (94) directional -> . ^ ALPHA
    (95) directional -> . ^ *
    (96) directional -> . ^ +
    (101) command -> . >
    (102) command -> . <
    (103) command -> . /
    (104) command -> . \
    (105) command -> . #
    (106) command -> . %
    (107) literal -> . ESCAPED
    (108) literal -> . ALPHA
    (109) literal -> . DIGIT
    (110) literal -> . OTHER
    (53) charclass -> . [ classitems ]
    (33) anychar -> . .
    (34) nodisplay -> . ,
    (35) nomatch -> . :
    (36) nodispmatch -> . ;
    (97) anchor -> . $ DIGIT
    (98) anchor -> . $ ALPHA
    (99) anchor -> . $ *
    (100) anchor -> . $ +
    (92) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (26) asterisk -> . elementary *
    (27) plus -> . elementary +
    (28) optional -> . elementary ?
    (29) nrepeat -> . elementary { number }
    (30) nrepeat -> . elementary { , number }
    (31) nrepeat -> . elementary { number , }
    (32) nrepeat -> . elementary { number , number }

    (               shift and go to state 22
    ^               shift and go to state 30
    >               shift and go to state 38
    <               shift and go to state 4
    /               shift and go to state 19
    \               shift and go to state 25
    #               shift and go to state 13
    %               shift and go to state 42
    ESCAPED         shift and go to state 39
    ALPHA           shift and go to state 34
    DIGIT           shift and go to state 28
    OTHER           shift and go to state 7
    [               shift and go to state 1
    .               shift and go to state 33
    ,               shift and go to state 18
    :               shift and go to state 15
    ;               shift and go to state 21
    $               shift and go to state 32
    `               shift and go to state 29

    alternation                    shift and go to state 26
    basequantifier                 shift and go to state 27
    anchor                         shift and go to state 2
    nomatch                        shift and go to state 3
    command                        shift and go to state 5
    nodispmatch                    shift and go to state 8
    simple                         shift and go to state 9
    nodisplay                      shift and go to state 12
    optional                       shift and go to state 31
    literal                        shift and go to state 11
    re                             shift and go to state 125
    nrepeat                        shift and go to state 14
    concatenation                  shift and go to state 23
    group                          shift and go to state 16
    plus                           shift and go to state 17
    directional                    shift and go to state 35
    predefined                     shift and go to state 36
    quantifier                     shift and go to state 6
    charclass                      shift and go to state 20
    anychar                        shift and go to state 37
    nomatchgroup                   shift and go to state 126
    basic                          shift and go to state 40
    elementary                     shift and go to state 41
    asterisk                       shift and go to state 24

state 112

    (37) number -> DIGIT .
    (38) number -> DIGIT . number
    (37) number -> . DIGIT
    (38) number -> . DIGIT number

    }               reduce using rule 37 (number -> DIGIT .)
    ,               reduce using rule 37 (number -> DIGIT .)
    )               reduce using rule 37 (number -> DIGIT .)
    DIGIT           shift and go to state 112

    number                         shift and go to state 127

state 113

    (30) nrepeat -> elementary { , . number }
    (37) number -> . DIGIT
    (38) number -> . DIGIT number

    DIGIT           shift and go to state 112

    number                         shift and go to state 128

state 114

    (29) nrepeat -> elementary { number . }
    (31) nrepeat -> elementary { number . , }
    (32) nrepeat -> elementary { number . , number }

    }               shift and go to state 130
    ,               shift and go to state 129


state 115

    (91) classrange -> classliteral - classliteral .

    !               reduce using rule 91 (classrange -> classliteral - classliteral .)
    "               reduce using rule 91 (classrange -> classliteral - classliteral .)
    #               reduce using rule 91 (classrange -> classliteral - classliteral .)
    $               reduce using rule 91 (classrange -> classliteral - classliteral .)
    %               reduce using rule 91 (classrange -> classliteral - classliteral .)
    &               reduce using rule 91 (classrange -> classliteral - classliteral .)
    '               reduce using rule 91 (classrange -> classliteral - classliteral .)
    (               reduce using rule 91 (classrange -> classliteral - classliteral .)
    )               reduce using rule 91 (classrange -> classliteral - classliteral .)
    *               reduce using rule 91 (classrange -> classliteral - classliteral .)
    +               reduce using rule 91 (classrange -> classliteral - classliteral .)
    ,               reduce using rule 91 (classrange -> classliteral - classliteral .)
    .               reduce using rule 91 (classrange -> classliteral - classliteral .)
    /               reduce using rule 91 (classrange -> classliteral - classliteral .)
    :               reduce using rule 91 (classrange -> classliteral - classliteral .)
    ;               reduce using rule 91 (classrange -> classliteral - classliteral .)
    <               reduce using rule 91 (classrange -> classliteral - classliteral .)
    =               reduce using rule 91 (classrange -> classliteral - classliteral .)
    >               reduce using rule 91 (classrange -> classliteral - classliteral .)
    ?               reduce using rule 91 (classrange -> classliteral - classliteral .)
    @               reduce using rule 91 (classrange -> classliteral - classliteral .)
    [               reduce using rule 91 (classrange -> classliteral - classliteral .)
    \               reduce using rule 91 (classrange -> classliteral - classliteral .)
    _               reduce using rule 91 (classrange -> classliteral - classliteral .)
    `               reduce using rule 91 (classrange -> classliteral - classliteral .)
    {               reduce using rule 91 (classrange -> classliteral - classliteral .)
    }               reduce using rule 91 (classrange -> classliteral - classliteral .)
    ~               reduce using rule 91 (classrange -> classliteral - classliteral .)
    ESCAPED         reduce using rule 91 (classrange -> classliteral - classliteral .)
    ALPHA           reduce using rule 91 (classrange -> classliteral - classliteral .)
    DIGIT           reduce using rule 91 (classrange -> classliteral - classliteral .)
    OTHER           reduce using rule 91 (classrange -> classliteral - classliteral .)
    ]               reduce using rule 91 (classrange -> classliteral - classliteral .)
    |               reduce using rule 91 (classrange -> classliteral - classliteral .)


state 116

    (57) classitems2 -> baseitems | baseitems .

    ]               reduce using rule 57 (classitems2 -> baseitems | baseitems .)


state 117

    (48) stationarygroup -> re .
    (3) alternation -> re . | simple

    )               reduce using rule 48 (stationarygroup -> re .)
    |               shift and go to state 80


state 118

    (43) specialgroup -> | stationarygroup .

    )               reduce using rule 43 (specialgroup -> | stationarygroup .)


state 119

    (50) nodispgroup -> re .
    (3) alternation -> re . | simple

    )               reduce using rule 50 (nodispgroup -> re .)
    |               shift and go to state 80


state 120

    (45) specialgroup -> , nodispgroup .

    )               reduce using rule 45 (specialgroup -> , nodispgroup .)


state 121

    (51) nodispmatchgroup -> re .
    (3) alternation -> re . | simple

    )               reduce using rule 51 (nodispmatchgroup -> re .)
    |               shift and go to state 80


state 122

    (46) specialgroup -> ; nodispmatchgroup .

    )               reduce using rule 46 (specialgroup -> ; nodispmatchgroup .)


state 123

    (42) specialgroup -> _ lengthcheck .

    )               reduce using rule 42 (specialgroup -> _ lengthcheck .)


state 124

    (47) lengthcheck -> ( . number ) re
    (37) number -> . DIGIT
    (38) number -> . DIGIT number

    DIGIT           shift and go to state 112

    number                         shift and go to state 131

state 125

    (49) nomatchgroup -> re .
    (3) alternation -> re . | simple

    )               reduce using rule 49 (nomatchgroup -> re .)
    |               shift and go to state 80


state 126

    (44) specialgroup -> : nomatchgroup .

    )               reduce using rule 44 (specialgroup -> : nomatchgroup .)


state 127

    (38) number -> DIGIT number .

    }               reduce using rule 38 (number -> DIGIT number .)
    ,               reduce using rule 38 (number -> DIGIT number .)
    )               reduce using rule 38 (number -> DIGIT number .)


state 128

    (30) nrepeat -> elementary { , number . }

    }               shift and go to state 132


state 129

    (31) nrepeat -> elementary { number , . }
    (32) nrepeat -> elementary { number , . number }
    (37) number -> . DIGIT
    (38) number -> . DIGIT number

    }               shift and go to state 134
    DIGIT           shift and go to state 112

    number                         shift and go to state 133

state 130

    (29) nrepeat -> elementary { number } .

    ?               reduce using rule 29 (nrepeat -> elementary { number } .)
    (               reduce using rule 29 (nrepeat -> elementary { number } .)
    ^               reduce using rule 29 (nrepeat -> elementary { number } .)
    >               reduce using rule 29 (nrepeat -> elementary { number } .)
    <               reduce using rule 29 (nrepeat -> elementary { number } .)
    /               reduce using rule 29 (nrepeat -> elementary { number } .)
    \               reduce using rule 29 (nrepeat -> elementary { number } .)
    #               reduce using rule 29 (nrepeat -> elementary { number } .)
    %               reduce using rule 29 (nrepeat -> elementary { number } .)
    ESCAPED         reduce using rule 29 (nrepeat -> elementary { number } .)
    ALPHA           reduce using rule 29 (nrepeat -> elementary { number } .)
    DIGIT           reduce using rule 29 (nrepeat -> elementary { number } .)
    OTHER           reduce using rule 29 (nrepeat -> elementary { number } .)
    [               reduce using rule 29 (nrepeat -> elementary { number } .)
    .               reduce using rule 29 (nrepeat -> elementary { number } .)
    ,               reduce using rule 29 (nrepeat -> elementary { number } .)
    :               reduce using rule 29 (nrepeat -> elementary { number } .)
    ;               reduce using rule 29 (nrepeat -> elementary { number } .)
    $               reduce using rule 29 (nrepeat -> elementary { number } .)
    `               reduce using rule 29 (nrepeat -> elementary { number } .)
    |               reduce using rule 29 (nrepeat -> elementary { number } .)
    $end            reduce using rule 29 (nrepeat -> elementary { number } .)
    )               reduce using rule 29 (nrepeat -> elementary { number } .)


state 131

    (47) lengthcheck -> ( number . ) re

    )               shift and go to state 135


state 132

    (30) nrepeat -> elementary { , number } .

    ?               reduce using rule 30 (nrepeat -> elementary { , number } .)
    (               reduce using rule 30 (nrepeat -> elementary { , number } .)
    ^               reduce using rule 30 (nrepeat -> elementary { , number } .)
    >               reduce using rule 30 (nrepeat -> elementary { , number } .)
    <               reduce using rule 30 (nrepeat -> elementary { , number } .)
    /               reduce using rule 30 (nrepeat -> elementary { , number } .)
    \               reduce using rule 30 (nrepeat -> elementary { , number } .)
    #               reduce using rule 30 (nrepeat -> elementary { , number } .)
    %               reduce using rule 30 (nrepeat -> elementary { , number } .)
    ESCAPED         reduce using rule 30 (nrepeat -> elementary { , number } .)
    ALPHA           reduce using rule 30 (nrepeat -> elementary { , number } .)
    DIGIT           reduce using rule 30 (nrepeat -> elementary { , number } .)
    OTHER           reduce using rule 30 (nrepeat -> elementary { , number } .)
    [               reduce using rule 30 (nrepeat -> elementary { , number } .)
    .               reduce using rule 30 (nrepeat -> elementary { , number } .)
    ,               reduce using rule 30 (nrepeat -> elementary { , number } .)
    :               reduce using rule 30 (nrepeat -> elementary { , number } .)
    ;               reduce using rule 30 (nrepeat -> elementary { , number } .)
    $               reduce using rule 30 (nrepeat -> elementary { , number } .)
    `               reduce using rule 30 (nrepeat -> elementary { , number } .)
    |               reduce using rule 30 (nrepeat -> elementary { , number } .)
    $end            reduce using rule 30 (nrepeat -> elementary { , number } .)
    )               reduce using rule 30 (nrepeat -> elementary { , number } .)


state 133

    (32) nrepeat -> elementary { number , number . }

    }               shift and go to state 136


state 134

    (31) nrepeat -> elementary { number , } .

    ?               reduce using rule 31 (nrepeat -> elementary { number , } .)
    (               reduce using rule 31 (nrepeat -> elementary { number , } .)
    ^               reduce using rule 31 (nrepeat -> elementary { number , } .)
    >               reduce using rule 31 (nrepeat -> elementary { number , } .)
    <               reduce using rule 31 (nrepeat -> elementary { number , } .)
    /               reduce using rule 31 (nrepeat -> elementary { number , } .)
    \               reduce using rule 31 (nrepeat -> elementary { number , } .)
    #               reduce using rule 31 (nrepeat -> elementary { number , } .)
    %               reduce using rule 31 (nrepeat -> elementary { number , } .)
    ESCAPED         reduce using rule 31 (nrepeat -> elementary { number , } .)
    ALPHA           reduce using rule 31 (nrepeat -> elementary { number , } .)
    DIGIT           reduce using rule 31 (nrepeat -> elementary { number , } .)
    OTHER           reduce using rule 31 (nrepeat -> elementary { number , } .)
    [               reduce using rule 31 (nrepeat -> elementary { number , } .)
    .               reduce using rule 31 (nrepeat -> elementary { number , } .)
    ,               reduce using rule 31 (nrepeat -> elementary { number , } .)
    :               reduce using rule 31 (nrepeat -> elementary { number , } .)
    ;               reduce using rule 31 (nrepeat -> elementary { number , } .)
    $               reduce using rule 31 (nrepeat -> elementary { number , } .)
    `               reduce using rule 31 (nrepeat -> elementary { number , } .)
    |               reduce using rule 31 (nrepeat -> elementary { number , } .)
    $end            reduce using rule 31 (nrepeat -> elementary { number , } .)
    )               reduce using rule 31 (nrepeat -> elementary { number , } .)


state 135

    (47) lengthcheck -> ( number ) . re
    (1) re -> . alternation
    (2) re -> . simple
    (3) alternation -> . re | simple
    (4) simple -> . concatenation
    (5) simple -> . basic
    (6) concatenation -> . simple basic
    (7) basic -> . elementary
    (8) basic -> . quantifier
    (15) elementary -> . group
    (16) elementary -> . directional
    (17) elementary -> . command
    (18) elementary -> . literal
    (19) elementary -> . charclass
    (20) elementary -> . anychar
    (21) elementary -> . nodisplay
    (22) elementary -> . nomatch
    (23) elementary -> . nodispmatch
    (24) elementary -> . anchor
    (25) elementary -> . predefined
    (9) quantifier -> . basequantifier
    (10) quantifier -> . basequantifier ?
    (39) group -> . ( groupbody )
    (93) directional -> . ^ DIGIT
    (94) directional -> . ^ ALPHA
    (95) directional -> . ^ *
    (96) directional -> . ^ +
    (101) command -> . >
    (102) command -> . <
    (103) command -> . /
    (104) command -> . \
    (105) command -> . #
    (106) command -> . %
    (107) literal -> . ESCAPED
    (108) literal -> . ALPHA
    (109) literal -> . DIGIT
    (110) literal -> . OTHER
    (53) charclass -> . [ classitems ]
    (33) anychar -> . .
    (34) nodisplay -> . ,
    (35) nomatch -> . :
    (36) nodispmatch -> . ;
    (97) anchor -> . $ DIGIT
    (98) anchor -> . $ ALPHA
    (99) anchor -> . $ *
    (100) anchor -> . $ +
    (92) predefined -> . ` ALPHA
    (11) basequantifier -> . asterisk
    (12) basequantifier -> . plus
    (13) basequantifier -> . optional
    (14) basequantifier -> . nrepeat
    (26) asterisk -> . elementary *
    (27) plus -> . elementary +
    (28) optional -> . elementary ?
    (29) nrepeat -> . elementary { number }
    (30) nrepeat -> . elementary { , number }
    (31) nrepeat -> . elementary { number , }
    (32) nrepeat -> . elementary { number , number }

    (               shift and go to state 22
    ^               shift and go to state 30
    >               shift and go to state 38
    <               shift and go to state 4
    /               shift and go to state 19
    \               shift and go to state 25
    #               shift and go to state 13
    %               shift and go to state 42
    ESCAPED         shift and go to state 39
    ALPHA           shift and go to state 34
    DIGIT           shift and go to state 28
    OTHER           shift and go to state 7
    [               shift and go to state 1
    .               shift and go to state 33
    ,               shift and go to state 18
    :               shift and go to state 15
    ;               shift and go to state 21
    $               shift and go to state 32
    `               shift and go to state 29

    alternation                    shift and go to state 26
    basequantifier                 shift and go to state 27
    anchor                         shift and go to state 2
    nomatch                        shift and go to state 3
    command                        shift and go to state 5
    nodispmatch                    shift and go to state 8
    nodisplay                      shift and go to state 12
    optional                       shift and go to state 31
    simple                         shift and go to state 9
    literal                        shift and go to state 11
    re                             shift and go to state 137
    nrepeat                        shift and go to state 14
    concatenation                  shift and go to state 23
    group                          shift and go to state 16
    plus                           shift and go to state 17
    directional                    shift and go to state 35
    predefined                     shift and go to state 36
    quantifier                     shift and go to state 6
    charclass                      shift and go to state 20
    anychar                        shift and go to state 37
    basic                          shift and go to state 40
    elementary                     shift and go to state 41
    asterisk                       shift and go to state 24

state 136

    (32) nrepeat -> elementary { number , number } .

    ?               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    (               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    ^               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    >               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    <               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    /               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    \               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    #               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    %               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    ESCAPED         reduce using rule 32 (nrepeat -> elementary { number , number } .)
    ALPHA           reduce using rule 32 (nrepeat -> elementary { number , number } .)
    DIGIT           reduce using rule 32 (nrepeat -> elementary { number , number } .)
    OTHER           reduce using rule 32 (nrepeat -> elementary { number , number } .)
    [               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    .               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    ,               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    :               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    ;               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    $               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    `               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    |               reduce using rule 32 (nrepeat -> elementary { number , number } .)
    $end            reduce using rule 32 (nrepeat -> elementary { number , number } .)
    )               reduce using rule 32 (nrepeat -> elementary { number , number } .)


state 137

    (47) lengthcheck -> ( number ) re .
    (3) alternation -> re . | simple

    )               reduce using rule 47 (lengthcheck -> ( number ) re .)
    |               shift and go to state 80

